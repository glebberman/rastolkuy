<inspections profile="Project Default"><group name="Docker-compose" path=""><inspection shortName="ComposeUnquotedPorts" defaultSeverity="WEAK WARNING" displayName="Unquoted port mappings" enabled="true" language="yaml" pluginId="Docker" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports unquoted port mappings in Docker Compose files.&lt;/p&gt;
&lt;p&gt;
  According to the &lt;a href="https://docs.docker.com/compose/compose-file/compose-file-v3/#short-syntax-1"&gt;Compose file specification&lt;/a&gt;,
  mapping ports in the &lt;code&gt;HOST:CONTAINER&lt;/code&gt; format may lead to erroneous results when using a container port lower than 60,
  because YAML parses numbers in the format &lt;code&gt;xx:yy&lt;/code&gt; as a base-60 value.
  For this reason, we recommend always explicitly specifying the port mappings as strings.
&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Examples:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  ports:
    - 3000
    - 3000-3005
    - 22:22
    - 8080:8080
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  ports:
    - "3000"
    - "3000-3005"
    - "22:22"
    - "8080:8080"
&lt;/code&gt;&lt;/pre&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ComposeUnknownKeys" defaultSeverity="ERROR" displayName="Unknown docker-compose YAML keys" enabled="true" language="yaml" pluginId="Docker" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports unrecognized keys in Docker Compose files.
&lt;br&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ComposeMissingKeys" defaultSeverity="ERROR" displayName="Missing docker-compose YAML keys" enabled="true" language="yaml" pluginId="Docker" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports missing required keys in Docker Compose files.
&lt;br&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ComposeUnknownValues" defaultSeverity="ERROR" displayName="Unknown docker-compose YAML values" enabled="true" language="yaml" pluginId="Docker" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports unrecognized values in Docker Compose files.
&lt;br&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Flow type checker" path="JavaScript and TypeScript"><inspection shortName="FlowJSError" defaultSeverity="ERROR" displayName="Flow type checker" enabled="false" language="JavaScript" pluginId="JavaScript" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports errors from &lt;a href="https://flowtype.org/"&gt;Flow&lt;/a&gt;.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="FlowJSCoverage" defaultSeverity="WEAK WARNING" displayName="Code is not covered by Flow" enabled="false" language="Flow JS" pluginId="JavaScript" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports JavaScript code fragments that are not covered by the Flow type checker.
To use this inspection, configure the Flow executable in &lt;a href="settings://Settings.JavaScript"&gt;Settings | Languages &amp;amp; Frameworks | JavaScript&lt;/a&gt;.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="FlowJSFlagCommentPlacement" defaultSeverity="WARNING" displayName="Misplaced @flow flag" enabled="true" language="Flow JS" pluginId="JavaScript" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a &lt;code&gt;@flow&lt;/code&gt; flag comment that is not located at the top of a file.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="FlowJSConfig" defaultSeverity="WARNING" displayName="Missing .flowconfig" enabled="true" language="Flow JS" pluginId="JavaScript" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a JavaScript file with a &lt;code&gt;@flow&lt;/code&gt; flag  that doesn't have an associated &lt;code&gt;.flowconfig&lt;/code&gt; file in the project.
&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Naming conventions" path="PHP"><inspection shortName="PhpVariableNamingConventionInspection" defaultSeverity="WEAK WARNING" displayName="Variable name is not following coding convention" enabled="false" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the variables' names that are either too short, too long, or do not follow the specified regular expression pattern.
Some coding styles have a special naming convention for variables.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  Use the inspection options to specify minimum/maximum length and the regular expression expected for variables' names.
  To ignore the names' length, specify &lt;b&gt;0&lt;/b&gt;.
&lt;/p&gt;
&lt;p&gt;
  To learn more about regular expressions, refer to the &lt;a href="https://www.regular-expressions.info/quickstart.html"&gt;Quick Start guide (regular-expressions.info)&lt;/a&gt;.
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpFunctionNamingConventionInspection" defaultSeverity="WEAK WARNING" displayName="Function name is not following coding convention" enabled="false" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the functions' names that are either too short, too long, or do not follow the specified regular expression pattern.
Some coding styles have a special naming convention for functions.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  Use the inspection options to specify minimum/maximum length and the regular expression expected for functions' names.
  To ignore the names' length, specify &lt;b&gt;0&lt;/b&gt;.
&lt;/p&gt;
&lt;p&gt;
  To learn more about regular expressions, refer to the &lt;a href="https://www.regular-expressions.info/quickstart.html"&gt;Quick Start guide (regular-expressions.info)&lt;/a&gt;.
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpConstantNamingConventionInspection" defaultSeverity="WEAK WARNING" displayName="Constant name is not following coding convention" enabled="false" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the constants' names that are either too short, too long, or do not follow the specified regular expression pattern.
Some coding styles have a special naming convention for constants.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  Use the inspection options to specify minimum/maximum length and the regular expression expected for constants' names.
  To ignore the names' length, specify &lt;b&gt;0&lt;/b&gt;.
&lt;/p&gt;
&lt;p&gt;
  To learn more about regular expressions, refer to the &lt;a href="https://www.regular-expressions.info/quickstart.html"&gt;Quick Start guide (regular-expressions.info)&lt;/a&gt;.
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpPropertyNamingConventionInspection" defaultSeverity="WEAK WARNING" displayName="Property name is not following coding convention" enabled="false" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the properties' names that are either too short, too long, or do not follow the specified regular expression pattern.
Some coding styles have a special naming convention for properties.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  Use the inspection options to specify minimum/maximum length and the regular expression expected for properties' names.
  To ignore the names' length, specify &lt;b&gt;0&lt;/b&gt;.
&lt;/p&gt;
&lt;p&gt;
  To learn more about regular expressions, refer to the &lt;a href="https://www.regular-expressions.info/quickstart.html"&gt;Quick Start guide (regular-expressions.info)&lt;/a&gt;.
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpMethodNamingConventionInspection" defaultSeverity="WEAK WARNING" displayName="Method name is not following coding convention" enabled="false" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the methods' names that are either too short, too long, or do not follow the specified regular expression pattern.
Some coding styles have a special naming convention for methods.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  Use the inspection options to specify minimum/maximum length and the regular expression expected for methods' names.
  To ignore the names' length, specify &lt;b&gt;0&lt;/b&gt;.
&lt;/p&gt;
&lt;p&gt;
  To learn more about regular expressions, refer to the &lt;a href="https://www.regular-expressions.info/quickstart.html"&gt;Quick Start guide (regular-expressions.info)&lt;/a&gt;.
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpClassNamingConventionInspection" defaultSeverity="WEAK WARNING" displayName="Class name is not following coding convention" enabled="false" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the classes' names that are either too short, too long, or do not follow the specified regular expression pattern.
Some coding styles have a special naming convention for classes.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  Use the inspection options to specify minimum/maximum length and the regular expression expected for classes' names.
  To ignore the names' length, specify &lt;b&gt;0&lt;/b&gt;.
&lt;/p&gt;
&lt;p&gt;
  To learn more about regular expressions, refer to the &lt;a href="https://www.regular-expressions.info/quickstart.html"&gt;Quick Start guide (regular-expressions.info)&lt;/a&gt;.
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Unused" path="PHP/Php Inspections (EA Extended)"><inspection shortName="SenselessProxyMethodInspection" defaultSeverity="WARNING" displayName="Senseless proxy function" enabled="true" language="PHP" pluginId="com.kalessil.phpStorm.phpInspectionsEA" pluginVersion="5.0.0.0" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Documentation can be found &lt;a href="https://github.com/kalessil/phpinspectionsea/blob/master/docs/unused.md#senseless-proxy-function"&gt;here&lt;/a&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="DateUsageInspection" defaultSeverity="WEAK WARNING" displayName="Unnecessary 'date(...)' arguments specification" enabled="true" language="PHP" pluginId="com.kalessil.phpStorm.phpInspectionsEA" pluginVersion="5.0.0.0" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Documentation can be found &lt;a href="https://github.com/kalessil/phpinspectionsea/blob/master/docs/unused.md#unnecessary-date-arguments-specification"&gt;here&lt;/a&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PropertyInitializationFlawsInspection" defaultSeverity="WEAK WARNING" displayName="Class property initialization flaws" enabled="true" language="PHP" pluginId="com.kalessil.phpStorm.phpInspectionsEA" pluginVersion="5.0.0.0" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Documentation can be found &lt;a href="https://github.com/kalessil/phpinspectionsea/blob/master/docs/unused.md#class-property-initialization-flaws"&gt;here&lt;/a&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="UnnecessaryIssetArgumentsInspection" defaultSeverity="WEAK WARNING" displayName="Unnecessary isset arguments specification" enabled="true" language="PHP" pluginId="com.kalessil.phpStorm.phpInspectionsEA" pluginVersion="5.0.0.0" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Documentation can be found &lt;a href="https://github.com/kalessil/phpinspectionsea/blob/master/docs/unused.md#unnecessary-isset-arguments-specification"&gt;here&lt;/a&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="UnusedGotoLabelInspection" defaultSeverity="WEAK WARNING" displayName="Unused goto labels" enabled="true" language="PHP" pluginId="com.kalessil.phpStorm.phpInspectionsEA" pluginVersion="5.0.0.0" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports unused goto labels.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="UselessUnsetInspection" defaultSeverity="WEAK WARNING" displayName="Useless unset" enabled="true" language="PHP" pluginId="com.kalessil.phpStorm.phpInspectionsEA" pluginVersion="5.0.0.0" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Documentation can be found &lt;a href="https://github.com/kalessil/phpinspectionsea/blob/master/docs/unused.md#useless-unset"&gt;here&lt;/a&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="UnusedConstructorDependenciesInspection" defaultSeverity="WEAK WARNING" displayName="Unused constructor dependencies" enabled="true" language="PHP" pluginId="com.kalessil.phpStorm.phpInspectionsEA" pluginVersion="5.0.0.0" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Documentation can be found &lt;a href="https://github.com/kalessil/phpinspectionsea/blob/master/docs/unused.md#unused-constructor-dependencies"&gt;here&lt;/a&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="SenselessMethodDuplicationInspection" defaultSeverity="WEAK WARNING" displayName="Child method is exactly the same" enabled="true" language="PHP" pluginId="com.kalessil.phpStorm.phpInspectionsEA" pluginVersion="5.0.0.0" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Documentation can be found &lt;a href="https://github.com/kalessil/phpinspectionsea/blob/master/docs/unused.md#child-method-is-exactly-the-same"&gt;here&lt;/a&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="OnlyWritesOnParameterInspection" defaultSeverity="WEAK WARNING" displayName="Parameter/variable is not used" enabled="true" language="PHP" pluginId="com.kalessil.phpStorm.phpInspectionsEA" pluginVersion="5.0.0.0" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Documentation can be found &lt;a href="https://github.com/kalessil/phpinspectionsea/blob/master/docs/unused.md#parametervariable-is-not-used"&gt;here&lt;/a&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Naming conventions" path="JavaScript and TypeScript"><inspection shortName="LocalVariableNamingConventionJS" defaultSeverity="WARNING" displayName="Local variable naming convention" enabled="false" language="JavaScript" pluginId="JavaScript" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a local variable whose name is  too short, too
long, or doesn't follow the specified regular expression pattern.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  Use the fields provided below to specify minimum length, maximum length, and a regular expression
  expected for local variables names. Use the standard &lt;code&gt;java.util.regex&lt;/code&gt; format regular expressions.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JSNonASCIINames" defaultSeverity="WARNING" displayName="Identifiers with non-ASCII symbols" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a non-ASCII symbol in a name.&lt;br/&gt;&lt;br/&gt;
If the 'Allow only ASCII names' option is selected, reports all names that contain non-ASCII symbols.&lt;br/&gt;
Otherwise reports all names that contain both ASCII and non-ASCII symbols.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ParameterNamingConventionJS" defaultSeverity="WARNING" displayName="Function parameter naming convention" enabled="false" language="JavaScript" pluginId="JavaScript" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a function parameter whose name is too short,
too long, or doesn't follow the specified regular expression pattern.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  Use the fields provided below to specify minimum length, maximum length and regular expression
  expected for local variables names. Use the standard &lt;code&gt;java.util.regex&lt;/code&gt; format regular expressions.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="FunctionNamingConventionJS" defaultSeverity="WARNING" displayName="Function naming convention" enabled="false" language="JavaScript" pluginId="JavaScript" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a function whose name is too short, too
long, or does not follow the specified regular expression pattern.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
 Use the fields provided below to specify minimum length, maximum length, and a regular expression
for function names. Use the standard &lt;code&gt;java.util.regex&lt;/code&gt; format for regular expressions.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JSClassNamingConvention" defaultSeverity="WARNING" displayName="Class naming convention" enabled="false" language="JavaScript" pluginId="JavaScript" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a class or a function that is annotated with a JSDoc &lt;code&gt;@constructor&lt;/code&gt; or &lt;code&gt;@class&lt;/code&gt; tag whose names are
too short, too long, or do not follow the specified regular expression pattern.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  Use the fields provided below to specify minimum length, maximum length, and a regular expression
  expected for classes names. Use the standard &lt;code&gt;java.util.regex&lt;/code&gt; format for regular expressions.
&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Language level migration" path="PHP/Php Inspections (EA Extended)"><inspection shortName="ArgumentUnpackingCanBeUsedInspection" defaultSeverity="WARNING" displayName="Argument unpacking can be used" enabled="true" language="PHP" pluginId="com.kalessil.phpStorm.phpInspectionsEA" pluginVersion="5.0.0.0" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
The inspection suggest to use &lt;a href="https://wiki.php.net/rfc/argument_unpacking"&gt;argument unpacking&lt;/a&gt; feature
instead of call_user_func_array(). Apart less magic, the feature is &lt;a href ="https://gist.github.com/nikic/6390366"&gt;faster&lt;/a&gt;.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="StrEndsWithCanBeUsedInspection" defaultSeverity="WEAK WARNING" displayName="'str_ends_with(...)' can be used" enabled="true" language="PHP" pluginId="com.kalessil.phpStorm.phpInspectionsEA" pluginVersion="5.0.0.0" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
The inspection reports cases when 'str_ends_with(...)' can be used.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="NullCoalescingOperatorCanBeUsedInspection" defaultSeverity="WEAK WARNING" displayName="Null coalescing operator can be used" enabled="true" language="PHP" pluginId="com.kalessil.phpStorm.phpInspectionsEA" pluginVersion="5.0.0.0" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Using null coalescing operator in PHP 7 simplifies code structure.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ConstantCanBeUsedInspection" defaultSeverity="WEAK WARNING" displayName="A constant can be used" enabled="true" language="PHP" pluginId="com.kalessil.phpStorm.phpInspectionsEA" pluginVersion="5.0.0.0" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Suggests using PHP_SAPI, PHP_VERSION and M_PI constant instead of function calls.
&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="CascadingDirnameCallsInspection" defaultSeverity="WARNING" displayName="Cascading dirname(...) calls" enabled="true" language="PHP" pluginId="com.kalessil.phpStorm.phpInspectionsEA" pluginVersion="5.0.0.0" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Analyses nested dirname() calls and suggests using the 'levels' parameter introduced in PHP 7.0.0+
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="DirectoryConstantCanBeUsedInspection" defaultSeverity="WARNING" displayName="__DIR__ constant can be used" enabled="true" language="PHP" pluginId="com.kalessil.phpStorm.phpInspectionsEA" pluginVersion="5.0.0.0" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Analyzes code for __DIR__ or equivalent construction use (e.g. 'dirname(__FILE__)')&lt;br /&gt;
&lt;br /&gt;
This is a micro-optimization, and is thus recommended if the refactoring is risk-minimal.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="IsCountableCanBeUsedInspection" defaultSeverity="WEAK WARNING" displayName="'is_countable(...)' can be used" enabled="true" language="PHP" pluginId="com.kalessil.phpStorm.phpInspectionsEA" pluginVersion="5.0.0.0" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
The inspection reports cases when 'is_countable(...)' can be used.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ClassConstantCanBeUsedInspection" defaultSeverity="WEAK WARNING" displayName="::class can be used" enabled="true" language="PHP" pluginId="com.kalessil.phpStorm.phpInspectionsEA" pluginVersion="5.0.0.0" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
The feature documentation can be found &lt;a href="https://secure.php.net/manual/en/language.oop5.basic.php#language.oop5.basic.class.class"&gt;here&lt;/a&gt;.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PowerOperatorCanBeUsedInspection" defaultSeverity="WARNING" displayName="Power operator can be used" enabled="true" language="PHP" pluginId="com.kalessil.phpStorm.phpInspectionsEA" pluginVersion="5.0.0.0" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
It's possible to use '$base ** $power' instead of 'pow($base, $power)' since PHP 5.6.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ReturnTypeCanBeDeclaredInspection" defaultSeverity="WEAK WARNING" displayName="Return type hint can be used" enabled="true" language="PHP" pluginId="com.kalessil.phpStorm.phpInspectionsEA" pluginVersion="5.0.0.0" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Suggests defining return type hints (incl. nullable types when language level supports them).
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ShortListSyntaxCanBeUsedInspection" defaultSeverity="WEAK WARNING" displayName="Short list syntax can be used" enabled="true" language="PHP" pluginId="com.kalessil.phpStorm.phpInspectionsEA" pluginVersion="5.0.0.0" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
See &lt;a href="https://wiki.php.net/rfc/short_list_syntax"&gt;https://wiki.php.net/rfc/short_list_syntax&lt;/a&gt; for more info.&lt;br /&gt;
The inspection supports you in migrating to the feature, but IDE might mark resulted code as invalid (fixed in PHPStorm
2016.3.3).
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="DynamicCallsToScopeIntrospectionInspection" defaultSeverity="WARNING" displayName="Deprecated dynamic calls to scope introspection" enabled="true" language="PHP" pluginId="com.kalessil.phpStorm.phpInspectionsEA" pluginVersion="5.0.0.0" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a PHP 7.1 &lt;a href="http://php.net/manual/en/migration71.incompatible.php#migration71.incompatible.forbid-dynamic-calls-to-scope-introspection-functions"&gt;BC break&lt;/a&gt;.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="StrStartsWithCanBeUsedInspection" defaultSeverity="WEAK WARNING" displayName="'str_starts_with(...)' can be used" enabled="true" language="PHP" pluginId="com.kalessil.phpStorm.phpInspectionsEA" pluginVersion="5.0.0.0" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
The inspection reports cases when 'str_starts_with(...)' can be used.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="GetDebugTypeCanBeUsedInspection" defaultSeverity="WEAK WARNING" displayName="'get_debug_type(...)' can be used" enabled="true" language="PHP" pluginId="com.kalessil.phpStorm.phpInspectionsEA" pluginVersion="5.0.0.0" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
The inspection reports cases when 'get_debug_type(...)' can be used.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="InstanceofCanBeUsedInspection" defaultSeverity="WARNING" displayName="'instanceof' can be used" enabled="true" language="PHP" pluginId="com.kalessil.phpStorm.phpInspectionsEA" pluginVersion="5.0.0.0" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports cases which can be replaced with instanceof operator.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="AliasFunctionsUsageInspection" defaultSeverity="WARNING" displayName="Alias functions usage" enabled="true" language="PHP" pluginId="com.kalessil.phpStorm.phpInspectionsEA" pluginVersion="5.0.0.0" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Documentation can be found &lt;a href="https://github.com/kalessil/phpinspectionsea/blob/master/docs/language-level-migration.md#alias-functions-usage"&gt;here&lt;/a&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="GetClassUsageInspection" defaultSeverity="WARNING" displayName="'get_class(...)' usage correctness" enabled="true" language="PHP" pluginId="com.kalessil.phpStorm.phpInspectionsEA" pluginVersion="5.0.0.0" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Since PHP 7.2 the get_class(...) function doesn't accept null input.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ArrayIsListCanBeUsedInspection" defaultSeverity="WEAK WARNING" displayName="'array_is_list(...)' can be used" enabled="true" language="PHP" pluginId="com.kalessil.phpStorm.phpInspectionsEA" pluginVersion="5.0.0.0" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
The inspection reports cases when 'array_is_list(...)' can be used.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="UnsupportedEmptyListAssignmentsInspection" defaultSeverity="ERROR" displayName="Unsupported empty list assignments" enabled="true" language="PHP" pluginId="com.kalessil.phpStorm.phpInspectionsEA" pluginVersion="5.0.0.0" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
See http://php.net/manual/en/migration70.incompatible.php#migration70.incompatible.variable-handling.list
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="UnsupportedStringOffsetOperationsInspection" defaultSeverity="ERROR" displayName="Unsupported string offset operations" enabled="true" language="PHP" pluginId="com.kalessil.phpStorm.phpInspectionsEA" pluginVersion="5.0.0.0" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports BC breaks in PHP 7.1: when string to array conversion emits an exception (not reflected in changelogs) and
&lt;a href="http://php.net/manual/en/migration71.incompatible.php#migration71.incompatible.empty-string-index-operator"&gt;empty string index operation&lt;/a&gt;.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="TypesCastingCanBeUsedInspection" defaultSeverity="WEAK WARNING" displayName="Type casting can be used" enabled="true" language="PHP" pluginId="com.kalessil.phpStorm.phpInspectionsEA" pluginVersion="5.0.0.0" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Analyzes if PHP4 functions (intval, floatval, doubleval, strval) are used for type casting and
generates hints to use PHP5's type casting construction (i.e. '(type) parameter').
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ElvisOperatorCanBeUsedInspection" defaultSeverity="WEAK WARNING" displayName="Elvis operator can be used" enabled="true" language="PHP" pluginId="com.kalessil.phpStorm.phpInspectionsEA" pluginVersion="5.0.0.0" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports if it's possible to simplify ternary operator with &lt;a href="https://en.wikipedia.org/wiki/Elvis_operator"&gt;"Elvis operator"&lt;/a&gt;.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="DeprecatedConstructorStyleInspection" defaultSeverity="ERROR" displayName="Deprecated constructor style" enabled="true" language="PHP" pluginId="com.kalessil.phpStorm.phpInspectionsEA" pluginVersion="5.0.0.0" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports PHP 4-style constructor usage.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="IsIterableCanBeUsedInspection" defaultSeverity="WEAK WARNING" displayName="'is_iterable(...)' can be used" enabled="true" language="PHP" pluginId="com.kalessil.phpStorm.phpInspectionsEA" pluginVersion="5.0.0.0" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
The inspection reports cases when 'is_iterable(...)' can be used.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="StrContainsCanBeUsedInspection" defaultSeverity="WEAK WARNING" displayName="'str_contains(...)' can be used" enabled="true" language="PHP" pluginId="com.kalessil.phpStorm.phpInspectionsEA" pluginVersion="5.0.0.0" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
The inspection reports cases when 'str_contains(...)' can be used.
&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="PHPUnit" path="PHP/Php Inspections (EA Extended)"><inspection shortName="PhpUnitDeprecationsInspection" defaultSeverity="WEAK WARNING" displayName="PHPUnit: API deprecations" enabled="true" language="PHP" pluginId="com.kalessil.phpStorm.phpInspectionsEA" pluginVersion="5.0.0.0" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports deprecations, which can not be declared by regular tooling.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="UnnecessaryAssertionInspection" defaultSeverity="WEAK WARNING" displayName="PHPUnit: unnecessary assertion" enabled="true" language="PHP" pluginId="com.kalessil.phpStorm.phpInspectionsEA" pluginVersion="5.0.0.0" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports unnecessary PHPUnit assertions.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="MockingMethodsCorrectnessInspection" defaultSeverity="WARNING" displayName="PHPUnit: methods mocking issues" enabled="true" language="PHP" pluginId="com.kalessil.phpStorm.phpInspectionsEA" pluginVersion="5.0.0.0" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Analyzes PHPUnit methods mocking constructs and reports if found issues.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpUnitTestsInspection" defaultSeverity="WEAK WARNING" displayName="PHPUnit: bugs and best practices" enabled="true" language="PHP" pluginId="com.kalessil.phpStorm.phpInspectionsEA" pluginVersion="5.0.0.0" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Analyzes PHPUnit related code reporting bugs and proposing to use best practices.&lt;br /&gt;
&lt;br /&gt;
You can activate "Suggest to use assertSame" in the inspection settings for hardening types safety in your unit tests.
&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="EditorConfig" path=""><inspection shortName="EditorConfigValueCorrectness" defaultSeverity="ERROR" displayName="Invalid property value" enabled="true" language="EditorConfig" pluginId="org.editorconfig.editorconfigjetbrains" pluginVersion="233.13135.108" isGlobalTool="false">&lt;!-- Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file. --&gt;
&lt;html&gt;
&lt;body&gt;
Reports property values that do not meet value restrictions. For example, some properties may be only “true” or “false”,
others contain only integer numbers etc. If a value has a limited set of variants, use code completion to see all of them.
&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="EditorConfigEmptySection" defaultSeverity="WARNING" displayName="Empty section" enabled="true" language="EditorConfig" pluginId="org.editorconfig.editorconfigjetbrains" pluginVersion="233.13135.108" isGlobalTool="false">&lt;!-- Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file. --&gt;
&lt;html&gt;
&lt;body&gt;
Reports sections that do not contain any EditorConfig properties.
&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="EditorConfigCharClassLetterRedundancy" defaultSeverity="WARNING" displayName="Duplicate character class letter" enabled="true" language="EditorConfig" pluginId="org.editorconfig.editorconfigjetbrains" pluginVersion="233.13135.108" isGlobalTool="false">&lt;!-- Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file. --&gt;
&lt;html&gt;
&lt;body&gt;
Reports wildcard patterns in the EditorConfig section that contain a duplicate character in the character class, for example &lt;code&gt;[aa]&lt;/code&gt;.
&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="EditorConfigEmptyHeader" defaultSeverity="ERROR" displayName="Empty header" enabled="true" language="EditorConfig" pluginId="org.editorconfig.editorconfigjetbrains" pluginVersion="233.13135.108" isGlobalTool="false">&lt;!-- Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file. --&gt;
&lt;html&gt;
&lt;body&gt;
Reports sections with an empty header. Section header must contain file path globs in the format similar to one supported by &lt;code&gt;gitignore&lt;/code&gt;.
&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="EditorConfigHeaderUniqueness" defaultSeverity="WARNING" displayName="EditorConfig section is not unique" enabled="true" language="EditorConfig" pluginId="org.editorconfig.editorconfigjetbrains" pluginVersion="233.13135.108" isGlobalTool="false">&lt;!-- Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file. --&gt;
&lt;html&gt;
&lt;body&gt;
Reports sections that define the same file pattern as other sections.
&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="EditorConfigCharClassRedundancy" defaultSeverity="WARNING" displayName="Unnecessary character class" enabled="true" language="EditorConfig" pluginId="org.editorconfig.editorconfigjetbrains" pluginVersion="233.13135.108" isGlobalTool="false">&lt;!-- Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file. --&gt;
&lt;html&gt;
&lt;body&gt;
Reports character classes that consist of a single character.
Such classes can be simplified to a character, for example &lt;code&gt;[a]&lt;/code&gt;&amp;rarr;&lt;code&gt;a&lt;/code&gt;.
&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="EditorConfigDeprecatedDescriptor" defaultSeverity="WARNING" displayName="Deprecated property" enabled="true" language="EditorConfig" pluginId="org.editorconfig.editorconfigjetbrains" pluginVersion="233.13135.108" isGlobalTool="false">&lt;!-- Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file. --&gt;
&lt;html&gt;
&lt;body&gt;
Reports EditorConfig properties that are no longer supported.
&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="EditorConfigRootDeclarationUniqueness" defaultSeverity="ERROR" displayName="Extra top-level declaration" enabled="true" language="EditorConfig" pluginId="org.editorconfig.editorconfigjetbrains" pluginVersion="233.13135.108" isGlobalTool="false">&lt;!-- Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file. --&gt;
&lt;html&gt;
&lt;body&gt;
Reports multiple top-level declarations. There can be only one optional “root=true” top-level declaration in the EditorConfig file.
Using multiple top-level declarations is not allowed.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="EditorConfigPartialOverride" defaultSeverity="WEAK WARNING" displayName="Overlapping sections" enabled="true" language="EditorConfig" pluginId="org.editorconfig.editorconfigjetbrains" pluginVersion="233.13135.108" isGlobalTool="false">&lt;!-- Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file. --&gt;
&lt;html&gt;
&lt;body&gt;
Reports subsets of files specified in the current section that overlap with other subsets in other sections. For example:
&lt;code&gt;[{foo,bar}]&lt;/code&gt; and &lt;code&gt;[{foo,bas}]&lt;/code&gt; both contain “foo”.
&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="EditorConfigReferenceCorrectness" defaultSeverity="ERROR" displayName="Invalid reference" enabled="true" language="EditorConfig" pluginId="org.editorconfig.editorconfigjetbrains" pluginVersion="233.13135.108" isGlobalTool="false">&lt;!-- Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file. --&gt;
&lt;html&gt;
&lt;body&gt;
Reports identifiers that are either unknown or have a wrong type.
&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="EditorConfigPatternRedundancy" defaultSeverity="WARNING" displayName="Duplicate or redundant pattern" enabled="true" language="EditorConfig" pluginId="org.editorconfig.editorconfigjetbrains" pluginVersion="233.13135.108" isGlobalTool="false">&lt;!-- Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file. --&gt;
&lt;html&gt;
&lt;body&gt;
Reports file patterns that are redundant as there already are other patterns that define the same scope of files or even a broader one.
For example, in &lt;code&gt;[{*.java,*}]&lt;/code&gt; the first &lt;code&gt;*.java&lt;/code&gt; pattern defines a narrower scope compared to &lt;code&gt;*&lt;/code&gt;.
That is why it is redundant and can be removed.
&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="EditorConfigEncoding" defaultSeverity="WARNING" displayName="File encoding doesn't match EditorConfig charset" enabled="true" pluginId="org.editorconfig.editorconfigjetbrains" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Checks that current file encoding matches the encoding defined in "charset" property of .editorconfig file.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="EditorConfigMissingRequiredDeclaration" defaultSeverity="ERROR" displayName="Required declarations are missing" enabled="true" language="EditorConfig" pluginId="org.editorconfig.editorconfigjetbrains" pluginVersion="233.13135.108" isGlobalTool="false">&lt;!-- Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file. --&gt;
&lt;html&gt;
&lt;body&gt;
Reports properties that miss the required declarations. Refer to the documentation for more information.
&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="EditorConfigPatternEnumerationRedundancy" defaultSeverity="ERROR" displayName="Unnecessary braces" enabled="true" language="EditorConfig" pluginId="org.editorconfig.editorconfigjetbrains" pluginVersion="233.13135.108" isGlobalTool="false">&lt;!-- Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file. --&gt;
&lt;html&gt;
&lt;body&gt;
Reports pattern lists that are either empty &lt;code&gt;{}&lt;/code&gt; or contain just one pattern, for example &lt;code&gt;{foo}&lt;/code&gt; in contrast to
a list containing multiple patterns, for example &lt;code&gt;{foo,bar}&lt;/code&gt;. In this case braces are handled as a part of the name. For example,
the pattern &lt;code&gt;*.{a}&lt;/code&gt; will match the file &lt;code&gt;my.{a}&lt;/code&gt; but not &lt;code&gt;my.a&lt;/code&gt;.
&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="EditorConfigNumerousWildcards" defaultSeverity="WEAK WARNING" displayName="Too many wildcards" enabled="true" language="EditorConfig" pluginId="org.editorconfig.editorconfigjetbrains" pluginVersion="233.13135.108" isGlobalTool="false">&lt;!-- Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file. --&gt;
&lt;html&gt;
&lt;body&gt;
Reports sections that contain too many wildcards. Using a lot of wildcards may lead to performance issues.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="EditorConfigShadowedOption" defaultSeverity="WARNING" displayName="Overridden property" enabled="true" language="EditorConfig" pluginId="org.editorconfig.editorconfigjetbrains" pluginVersion="233.13135.108" isGlobalTool="false">&lt;!-- Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file. --&gt;
&lt;html&gt;
&lt;body&gt;
Reports properties that are already defined in other sections.
&lt;p&gt;For example:
&lt;pre&gt;&lt;code&gt;
[*.java]
indent_size=4
[{*.java,*.js}]
indent_size=2
&lt;/code&gt;&lt;/pre&gt;
The second section includes all &lt;code&gt;*.java&lt;/code&gt; files too but it  also redefines indent_size.
As a result the value 2 will be used for files matching &lt;code&gt;*.java&lt;/code&gt;.
&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="EditorConfigNoMatchingFiles" defaultSeverity="WARNING" displayName="No matching files" enabled="true" language="EditorConfig" pluginId="org.editorconfig.editorconfigjetbrains" pluginVersion="233.13135.108" isGlobalTool="false">&lt;!-- Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file. --&gt;
&lt;html&gt;
&lt;body&gt;
Reports sections with wildcard patterns that do not match any files under the directory in
which the &lt;code&gt;.editorconfig&lt;/code&gt; file is located.
&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="EditorConfigListAcceptability" defaultSeverity="ERROR" displayName="Unexpected value list" enabled="true" language="EditorConfig" pluginId="org.editorconfig.editorconfigjetbrains" pluginVersion="233.13135.108" isGlobalTool="false">&lt;!-- Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file. --&gt;
&lt;html&gt;
&lt;body&gt;
Reports lists of values that are used in properties in which lists are not supported. In this case, only a single value can be specified.
&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="EditorConfigKeyCorrectness" defaultSeverity="WARNING" displayName="Unknown property" enabled="true" language="EditorConfig" pluginId="org.editorconfig.editorconfigjetbrains" pluginVersion="233.13135.108" isGlobalTool="false">&lt;!-- Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file. --&gt;
&lt;html&gt;
&lt;body&gt;
Reports properties that are not supported by the IDE. Note: some “ij” domain properties may require specific language plugins.
&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="EditorConfigUnexpectedComma" defaultSeverity="ERROR" displayName="Unexpected comma" enabled="true" language="EditorConfig" pluginId="org.editorconfig.editorconfigjetbrains" pluginVersion="233.13135.108" isGlobalTool="false">&lt;!-- Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file. --&gt;
&lt;html&gt;
&lt;body&gt;
Reports commas that cannot be used in the current context. Commas are allowed only as separators for values in lists.
&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="EditorConfigRootDeclarationCorrectness" defaultSeverity="ERROR" displayName="Unexpected top-level declaration" enabled="true" language="EditorConfig" pluginId="org.editorconfig.editorconfigjetbrains" pluginVersion="233.13135.108" isGlobalTool="false">&lt;!-- Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file. --&gt;
&lt;html&gt;
&lt;body&gt;
Reports unexpected top-level declarations. Top-level declarations other than “root=true” are not allowed in the EditorConfig file.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="EditorConfigOptionRedundancy" defaultSeverity="WARNING" displayName="Redundant property" enabled="true" language="EditorConfig" pluginId="org.editorconfig.editorconfigjetbrains" pluginVersion="233.13135.108" isGlobalTool="false">&lt;!-- Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file. --&gt;
&lt;html&gt;
&lt;body&gt;
Reports properties that are redundant when another applicable section already contains the same property and value.
&lt;p&gt;
For example:
&lt;pre&gt;&lt;code&gt;
[*]
indent_size=4
[*.java]
indent_size=4
&lt;/code&gt;&lt;/pre&gt;
are both applicable to &lt;code&gt;*.java&lt;/code&gt; files and define the same &lt;code&gt;indent_size&lt;/code&gt; value.
&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="EditorConfigWildcardRedundancy" defaultSeverity="WARNING" displayName="Redundant wildcard" enabled="true" language="EditorConfig" pluginId="org.editorconfig.editorconfigjetbrains" pluginVersion="233.13135.108" isGlobalTool="false">&lt;!-- Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file. --&gt;
&lt;html&gt;
&lt;body&gt;
Reports wildcards that become redundant when the “**” wildcard is used in the same section.
&lt;p&gt;
The “**” wildcard defines a broader set of files than any other wildcard.
That is why, any other wildcard used in the same section has no affect and can be removed.
&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="EditorConfigVerifyByCore" defaultSeverity="ERROR" displayName="Invalid .editorconfig file" enabled="true" language="EditorConfig" pluginId="org.editorconfig.editorconfigjetbrains" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Verifies the whole file using the backing EditorConfig core library and reports any failures.
Any such failure would prevent EditorConfig properties from being correctly applied.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="EditorConfigPairAcceptability" defaultSeverity="ERROR" displayName="Unexpected key-value pair" enabled="true" language="EditorConfig" pluginId="org.editorconfig.editorconfigjetbrains" pluginVersion="233.13135.108" isGlobalTool="false">&lt;!-- Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file. --&gt;
&lt;html&gt;
&lt;body&gt;
Reports key-value pairs that are not allowed in the current context.
&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="EditorConfigValueUniqueness" defaultSeverity="ERROR" displayName="Non-unique list value" enabled="true" language="EditorConfig" pluginId="org.editorconfig.editorconfigjetbrains" pluginVersion="233.13135.108" isGlobalTool="false">&lt;!-- Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file. --&gt;
&lt;html&gt;
&lt;body&gt;
Reports duplicates in lists of values.
&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="EditorConfigSpaceInHeader" defaultSeverity="WEAK WARNING" displayName="Space in file pattern" enabled="true" language="EditorConfig" pluginId="org.editorconfig.editorconfigjetbrains" pluginVersion="233.13135.108" isGlobalTool="false">&lt;!-- Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file. --&gt;
&lt;html&gt;
&lt;body&gt;
Reports space characters in wildcard patterns that affect pattern matching.
If these characters are not intentional, they should be removed.
&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="EditorConfigShadowingOption" defaultSeverity="WARNING" displayName="Overriding property" enabled="true" language="EditorConfig" pluginId="org.editorconfig.editorconfigjetbrains" pluginVersion="233.13135.108" isGlobalTool="false">&lt;!-- Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file. --&gt;
&lt;html&gt;
&lt;body&gt;
Reports properties that override the same properties defined earlier in the file.
&lt;p&gt;For example:
&lt;pre&gt;&lt;code&gt;
[*.java]
indent_size=4
[{*.java,*.js}]
indent_size=2
&lt;/code&gt;&lt;/pre&gt;
The second section includes the same files as &lt;code&gt;[*.java]&lt;/code&gt; but also sets indent_size to value 2.
Thus the first declaration &lt;code&gt;indent_size=4&lt;/code&gt;will be ignored.
&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="EditorConfigUnusedDeclaration" defaultSeverity="WARNING" displayName="Unused declaration" enabled="true" language="EditorConfig" pluginId="org.editorconfig.editorconfigjetbrains" pluginVersion="233.13135.108" isGlobalTool="false">&lt;!-- Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file. --&gt;
&lt;html&gt;
&lt;body&gt;
Reports unused declarations. Such declarations can be removed.
&lt;/body&gt;
&lt;/html&gt;
</inspection></group><group name="Phing" path=""><inspection shortName="PhingDomInspection" defaultSeverity="ERROR" displayName="Phing inspection" enabled="true" language="XML" pluginId="com.intellij.phing" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports unresolved resource references in Phing build files.
&lt;/body&gt;
&lt;/html&gt;
</inspection></group><group name="Composer" path="PHP"><inspection shortName="PhpComposerExtensionStubsInspection" defaultSeverity="WARNING" displayName="Extension is missing in composer.json" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the usages of classes, functions, and constants from the PHP extensions not specified in &lt;i&gt;composer.json&lt;/i&gt;. If an extension is listed in the &lt;code&gt;require-dev&lt;/code&gt; section of &lt;i&gt;composer.json&lt;/i&gt;, the inspection reports the corresponding symbols' usages located outside of the folders marked as test roots.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpDisabledQualityToolComposerInspection" defaultSeverity="WEAK WARNING" displayName="Quality tool inspection is disabled" enabled="true" language="JSON" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Highlights the quality tools' entries in &lt;i&gt;composer.json&lt;/i&gt; in case the corresponding code inspections are disabled.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ComposerJsonFileReferencesInspection" defaultSeverity="WARNING" displayName="Unresolved file references" enabled="true" language="JSON" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports unresolved file references in composer.json.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpComposerDuplicatedRequirementInspection" defaultSeverity="WEAK WARNING" displayName="Duplicate package entries in composer.json" enabled="true" language="JSON" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports duplicate package entries in the &lt;code&gt;require&lt;/code&gt; and &lt;code&gt;require-dev&lt;/code&gt; sections of &lt;i&gt;composer.json&lt;/i&gt;.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpNotInstalledPackagesInspection" defaultSeverity="WEAK WARNING" displayName="Non-installed Composer packages" enabled="true" language="JSON" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the Composer packages that are required in &lt;i&gt;composer.json&lt;/i&gt; but are not installed.
&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Version control" path=""><inspection shortName="IgnoreFileDuplicateEntry" defaultSeverity="WARNING" displayName="Ignore file duplicates" enabled="true" language="IgnoreLang" pluginId="com.intellij" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports duplicate entries (patterns) in the ignore file (e.g. .gitignore, .hgignore).
Duplicate entries in these files are redundant and can be removed.

&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
    # Output directories
    /out/
    /target/
    /out/
&lt;/code&gt;&lt;/pre&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Unused symbols" path="PHP"><inspection shortName="PhpUnusedPrivateMethodInspection" defaultSeverity="WEAK WARNING" displayName="Unused private method" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
  Reports the private methods that are never used.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpUnused" defaultSeverity="WEAK WARNING" displayName="Unused declaration" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="true">&lt;html&gt;
&lt;body&gt;
Reports the classes, methods, functions, constants, or properties that
are not used or not reachable from entry points. It also reports all method implementations/overriders.
&lt;p&gt;Some unused members might not be reported in the code editor on the fly. Due to performance reasons, a non-private member is checked only
  when its name rarely occurs in the project.
&lt;/p&gt;
&lt;p&gt;To see all results, run the inspection in batch mode by using &lt;b&gt;Code | Inspect Code...&lt;/b&gt; or &lt;b&gt;Code | Run Inspection by
  Name...&lt;/b&gt;.&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="PhpUnusedAliasInspection" defaultSeverity="WEAK WARNING" displayName="Unused import" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
  Reports the imports that are never used.
&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="PhpUnusedPrivateFieldInspection" defaultSeverity="WEAK WARNING" displayName="Unused private property" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
  Reports the private properties that are never used.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpUnusedParameterInspection" defaultSeverity="WEAK WARNING" displayName="Unused parameter" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the parameters that are considered unused in the following cases:
  &lt;ul&gt;
    &lt;li&gt;The parameter is passed by value, and the value is not used anywhere or is overwritten immediately.&lt;/li&gt;
    &lt;li&gt;The parameter is passed by reference, and the reference is not used anywhere or is overwritten immediately.&lt;/li&gt;
  &lt;/ul&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="PhpUnusedLocalVariableInspection" defaultSeverity="WEAK WARNING" displayName="Unused local variable" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the variables that are considered unused in the following cases:
&lt;ul&gt;
  &lt;li&gt;The value of the variable is not used anywhere or is overwritten immediately.&lt;/li&gt;
  &lt;li&gt;The reference stored in the variable is not used anywhere or is overwritten immediately.
  &lt;/li&gt;
&lt;/ul&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpUnusedFieldDefaultValueInspection" defaultSeverity="WEAK WARNING" displayName="Redundant property initializer" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
  &lt;body&gt;
    Reports the fields with default initializers that are always overwritten in the class constructor.
  &lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Architecture" path="PHP/Php Inspections (EA Extended)"><inspection shortName="EmptyClassInspection" defaultSeverity="WEAK WARNING" displayName="Empty class" enabled="false" language="PHP" pluginId="com.kalessil.phpStorm.phpInspectionsEA" pluginVersion="5.0.0.0" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Documentation can be found &lt;a href="https://github.com/kalessil/phpinspectionsea/blob/master/docs/architecture.md#empty-class"&gt;here&lt;/a&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="MultipleReturnStatementsInspection" defaultSeverity="WARNING" displayName="Multiple return statements usage" enabled="false" language="PHP" pluginId="com.kalessil.phpStorm.phpInspectionsEA" pluginVersion="5.0.0.0" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Documentation can be found &lt;a href="https://github.com/kalessil/phpinspectionsea/blob/master/docs/architecture.md#multiple-return-statements-usage"&gt;here&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;
Please reference to corresponding &lt;a href="https://stackoverflow.com/questions/36707/should-a-function-have-only-one-return-statement"&gt;stackoverflow thread&lt;/a&gt;
for more details.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ClassOverridesFieldOfSuperClassInspection" defaultSeverity="WARNING" displayName="Class overrides a field of a parent class" enabled="false" language="PHP" pluginId="com.kalessil.phpStorm.phpInspectionsEA" pluginVersion="5.0.0.0" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Documentation can be found &lt;a href="https://github.com/kalessil/phpinspectionsea/blob/master/docs/architecture.md#class-overrides-a-field-of-a-parent-class"&gt;here&lt;/a&gt;&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="EfferentObjectCouplingInspection" defaultSeverity="WEAK WARNING" displayName="Efferent coupling between objects" enabled="false" language="PHP" pluginId="com.kalessil.phpStorm.phpInspectionsEA" pluginVersion="5.0.0.0" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
The Efferent Coupling or CE counts the number of software artifacts a software entity depends on.
&lt;br&gt;
&lt;a href="https://pdepend.org/documentation/software-metrics/efferent-coupling.html"&gt;CE - Efferent Coupling&lt;/a&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ClassReImplementsParentInterfaceInspection" defaultSeverity="WARNING" displayName="Class implements interfaces multiple times" enabled="true" language="PHP" pluginId="com.kalessil.phpStorm.phpInspectionsEA" pluginVersion="5.0.0.0" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Documentation can be found &lt;a href="https://github.com/kalessil/phpinspectionsea/blob/master/docs/architecture.md#class-implements-interfaces-multiple-times"&gt;here&lt;/a&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="CallableParameterUseCaseInTypeContextInspection" defaultSeverity="WARNING" displayName="Callable parameter usage violates definition" enabled="true" language="PHP" pluginId="com.kalessil.phpStorm.phpInspectionsEA" pluginVersion="5.0.0.0" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Documentation can be found &lt;a href="https://github.com/kalessil/phpinspectionsea/blob/master/docs/architecture.md#callable-parameter-usage-violates-definition"&gt;here&lt;/a&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PropertyCanBeStaticInspection" defaultSeverity="WEAK WARNING" displayName="Property could be static" enabled="false" language="PHP" pluginId="com.kalessil.phpStorm.phpInspectionsEA" pluginVersion="5.0.0.0" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports if there are class properties that appear to be static.&lt;br /&gt;&lt;br /&gt;
Field usages are not analyzed, as we are checking 'heavy' initialization only.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="BadExceptionsProcessingInspection" defaultSeverity="WEAK WARNING" displayName="Badly organized exception handling" enabled="false" language="PHP" pluginId="com.kalessil.phpStorm.phpInspectionsEA" pluginVersion="5.0.0.0" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Documentation can be found &lt;a href="https://github.com/kalessil/phpinspectionsea/blob/master/docs/architecture.md#badly-organized-exception-handling"&gt;here&lt;/a&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="LongInheritanceChainInspection" defaultSeverity="WARNING" displayName="Long inheritance chain" enabled="false" language="PHP" pluginId="com.kalessil.phpStorm.phpInspectionsEA" pluginVersion="5.0.0.0" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Documentation can be found &lt;a href="https://github.com/kalessil/phpinspectionsea/blob/master/docs/architecture.md#long-inheritance-chain"&gt;here&lt;/a&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Control Flow" path="PHP/Php Inspections (EA Extended)"><inspection shortName="DisconnectedForeachInstructionInspection" defaultSeverity="WEAK WARNING" displayName="Statement could be decoupled from foreach" enabled="true" language="PHP" pluginId="com.kalessil.phpStorm.phpInspectionsEA" pluginVersion="5.0.0.0" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Documentation can be found &lt;a href="https://github.com/kalessil/phpinspectionsea/blob/master/docs/control-flow.md#statement-could-be-decoupled-from-foreach"&gt;here&lt;/a&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="StringNormalizationInspection" defaultSeverity="WEAK WARNING" displayName="Strings normalization" enabled="true" language="PHP" pluginId="com.kalessil.phpStorm.phpInspectionsEA" pluginVersion="5.0.0.0" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Documentation can be found &lt;a href="https://github.com/kalessil/phpinspectionsea/blob/master/docs/control-flow.md#strings-normalization"&gt;here&lt;/a&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ArraySearchUsedAsInArrayInspection" defaultSeverity="WARNING" displayName="'array_search(...)' could be replaced by 'in_array(...)'" enabled="true" language="PHP" pluginId="com.kalessil.phpStorm.phpInspectionsEA" pluginVersion="5.0.0.0" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Documentation can be found &lt;a href="https://github.com/kalessil/phpinspectionsea/blob/master/docs/control-flow.md#array_search-could-be-replaced-by-in_array"&gt;here&lt;/a&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="GetTypeMissUseInspection" defaultSeverity="WARNING" displayName="'gettype(...)' could be replaced with 'is_*(...)'" enabled="true" language="PHP" pluginId="com.kalessil.phpStorm.phpInspectionsEA" pluginVersion="5.0.0.0" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Documentation can be found &lt;a href="https://github.com/kalessil/phpinspectionsea/blob/master/docs/control-flow.md#gettype-could-be-replaced-with-is_"&gt;here&lt;/a&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="NotOptimalIfConditionsInspection" defaultSeverity="WARNING" displayName="Non-optimal if conditions" enabled="true" language="PHP" pluginId="com.kalessil.phpStorm.phpInspectionsEA" pluginVersion="5.0.0.0" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Analyzes if/elseif conditions. Inspection will generate hints to review conditions with suboptimal order,
duplicates, or boolean constants.&lt;br /&gt;
&lt;br /&gt;
More documentation can be found &lt;a href="https://github.com/kalessil/phpinspectionsea/blob/master/docs/control-flow.md#non-optimal-if-conditions"&gt;here&lt;/a&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="LoopWhichDoesNotLoopInspection" defaultSeverity="WARNING" displayName="Loop which does not loop" enabled="true" language="PHP" pluginId="com.kalessil.phpStorm.phpInspectionsEA" pluginVersion="5.0.0.0" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Documentation can be found &lt;a href="https://github.com/kalessil/phpinspectionsea/blob/master/docs/control-flow.md#loop-which-does-not-loop"&gt;here&lt;/a&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ObGetCleanCanBeUsedInspection" defaultSeverity="WARNING" displayName="'ob_get_clean()' can be used" enabled="true" language="PHP" pluginId="com.kalessil.phpStorm.phpInspectionsEA" pluginVersion="5.0.0.0" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Documentation can be found &lt;a href="https://github.com/kalessil/phpinspectionsea/blob/master/docs/control-flow.md#ob_get_clean-can-be-used"&gt;here&lt;/a&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="SubStrUsedAsStrPosInspection" defaultSeverity="WEAK WARNING" displayName="'substr(...)' could be replaced with 'strpos(...)'" enabled="true" language="PHP" pluginId="com.kalessil.phpStorm.phpInspectionsEA" pluginVersion="5.0.0.0" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Documentation can be found &lt;a href="https://github.com/kalessil/phpinspectionsea/blob/master/docs/control-flow.md#substr-could-be-replaced-with-strpos"&gt;here&lt;/a&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="TernaryOperatorSimplifyInspection" defaultSeverity="WEAK WARNING" displayName="Ternary operator could be simplified" enabled="true" language="PHP" pluginId="com.kalessil.phpStorm.phpInspectionsEA" pluginVersion="5.0.0.0" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Documentation can be found &lt;a href="https://github.com/kalessil/phpinspectionsea/blob/master/docs/control-flow.md#ternary-operator-could-be-simplified"&gt;here&lt;/a&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="MultiAssignmentUsageInspection" defaultSeverity="WEAK WARNING" displayName="'list(...) = ' usage possible" enabled="true" language="PHP" pluginId="com.kalessil.phpStorm.phpInspectionsEA" pluginVersion="5.0.0.0" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Documentation can be found &lt;a href="https://github.com/kalessil/phpinspectionsea/blob/master/docs/control-flow.md#list---usage-possible"&gt;here&lt;/a&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="IfReturnReturnSimplificationInspection" defaultSeverity="WARNING" displayName="If-return-return could be simplified" enabled="true" language="PHP" pluginId="com.kalessil.phpStorm.phpInspectionsEA" pluginVersion="5.0.0.0" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Documentation can be found &lt;a href="https://github.com/kalessil/phpinspectionsea/blob/master/docs/control-flow.md#if-return-return-could-be-simplified"&gt;here&lt;/a&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="InvertedIfElseConstructsInspection" defaultSeverity="WEAK WARNING" displayName="Inverted 'if-else' constructs" enabled="false" language="PHP" pluginId="com.kalessil.phpStorm.phpInspectionsEA" pluginVersion="5.0.0.0" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Documentation can be found &lt;a href="https://github.com/kalessil/phpinspectionsea/blob/master/docs/control-flow.md#inverted-if-else-constructs"&gt;here&lt;/a&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="StringCaseManipulationInspection" defaultSeverity="WEAK WARNING" displayName="Unnecessary string case manipulation" enabled="true" language="PHP" pluginId="com.kalessil.phpStorm.phpInspectionsEA" pluginVersion="5.0.0.0" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Documentation can be found &lt;a href="https://github.com/kalessil/phpinspectionsea/blob/master/docs/control-flow.md#unnecessary-string-case-manipulation"&gt;here&lt;/a&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="CompactCanBeUsedInspection" defaultSeverity="WEAK WARNING" displayName="'compact(...)' can be used" enabled="false" language="PHP" pluginId="com.kalessil.phpStorm.phpInspectionsEA" pluginVersion="5.0.0.0" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Documentation can be found &lt;a href="https://github.com/kalessil/phpinspectionsea/blob/master/docs/control-flow.md#compact-can-be-used"&gt;here&lt;/a&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="OneTimeUseVariablesInspection" defaultSeverity="WARNING" displayName="One-time use variables" enabled="true" language="PHP" pluginId="com.kalessil.phpStorm.phpInspectionsEA" pluginVersion="5.0.0.0" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Documentation can be found &lt;a href="https://github.com/kalessil/phpinspectionsea/blob/master/docs/control-flow.md#one-time-use-variables"&gt;here&lt;/a&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="StrTrUsageAsStrReplaceInspection" defaultSeverity="WEAK WARNING" displayName="'strtr(...)' could be replaced with 'str_replace(...)'" enabled="true" language="PHP" pluginId="com.kalessil.phpStorm.phpInspectionsEA" pluginVersion="5.0.0.0" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Documentation can be found &lt;a href="https://github.com/kalessil/phpinspectionsea/blob/master/docs/control-flow.md#strtr-could-be-replaced-with-str_replace"&gt;here&lt;/a&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PdoApiUsageInspection" defaultSeverity="WEAK WARNING" displayName="PDO API usage" enabled="true" language="PHP" pluginId="com.kalessil.phpStorm.phpInspectionsEA" pluginVersion="5.0.0.0" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Documentation can be found &lt;a href="https://github.com/kalessil/phpinspectionsea/blob/master/docs/control-flow.md#pdo-api-usage"&gt;here&lt;/a&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="RedundantElseClauseInspection" defaultSeverity="WARNING" displayName="Redundant 'else' keyword" enabled="true" language="PHP" pluginId="com.kalessil.phpStorm.phpInspectionsEA" pluginVersion="5.0.0.0" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Documentation can be found &lt;a href="https://github.com/kalessil/phpinspectionsea/blob/master/docs/control-flow.md#redundant-else-keyword"&gt;here&lt;/a&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="UnSafeIsSetOverArrayInspection" defaultSeverity="WARNING" displayName="'isset(...)' usage" enabled="true" language="PHP" pluginId="com.kalessil.phpStorm.phpInspectionsEA" pluginVersion="5.0.0.0" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Analyzes 'isset(...)' function usages.&lt;br /&gt;
&lt;br /&gt;
This inspection suggests using 'null !== ...', 'array_key_exists(..., ...)' instead.
In cases when isset is applied to array-accessing expressions, this inspection checks if concatenation is 
used to generate an index.&lt;br /&gt;
&lt;br /&gt;
It should be noted that array_key_exists returns true even if array item is null; this inspection
is focused on verifying data structures' sanity and may be safely ignored in some cases.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ThrowRawExceptionInspection" defaultSeverity="WEAK WARNING" displayName="General exception is thrown" enabled="true" language="PHP" pluginId="com.kalessil.phpStorm.phpInspectionsEA" pluginVersion="5.0.0.0" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Documentation can be found &lt;a href="https://github.com/kalessil/phpinspectionsea/blob/master/docs/control-flow.md#general-exception-is-thrown"&gt;here&lt;/a&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ForeachInvariantsInspection" defaultSeverity="WARNING" displayName="Foreach usage possible" enabled="true" language="PHP" pluginId="com.kalessil.phpStorm.phpInspectionsEA" pluginVersion="5.0.0.0" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Documentation can be found &lt;a href="https://github.com/kalessil/phpinspectionsea/blob/master/docs/control-flow.md#foreach-usage-possible"&gt;here&lt;/a&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="StrlenInEmptyStringCheckContextInspection" defaultSeverity="WEAK WARNING" displayName="'strlen(...)' misused" enabled="true" language="PHP" pluginId="com.kalessil.phpStorm.phpInspectionsEA" pluginVersion="5.0.0.0" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Documentation can be found &lt;a href="https://github.com/kalessil/phpinspectionsea/blob/master/docs/control-flow.md#strlen-misused"&gt;here&lt;/a&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="IssetConstructsCanBeMergedInspection" defaultSeverity="WEAK WARNING" displayName="'isset(...)' constructs can be merged" enabled="true" language="PHP" pluginId="com.kalessil.phpStorm.phpInspectionsEA" pluginVersion="5.0.0.0" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Documentation can be found &lt;a href="https://github.com/kalessil/phpinspectionsea/blob/master/docs/control-flow.md#isset-constructs-can-be-merged"&gt;here&lt;/a&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="DegradedSwitchInspection" defaultSeverity="WEAK WARNING" displayName="Switch-case could be simplified" enabled="true" language="PHP" pluginId="com.kalessil.phpStorm.phpInspectionsEA" pluginVersion="5.0.0.0" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Documentation can be found &lt;a href="https://github.com/kalessil/phpinspectionsea/blob/master/docs/control-flow.md#switch-case-could-be-simplified"&gt;here&lt;/a&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ArrayUniqueCanBeUsedInspection" defaultSeverity="WEAK WARNING" displayName="'array_unique(...)' can be used" enabled="true" language="PHP" pluginId="com.kalessil.phpStorm.phpInspectionsEA" pluginVersion="5.0.0.0" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Documentation can be found &lt;a href="https://github.com/kalessil/phpinspectionsea/blob/master/docs/control-flow.md#array_unique-can-be-used"&gt;here&lt;/a&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Replaceable assignments" path="PHP"><inspection shortName="PhpAssignmentReplaceableWithPrefixExpressionInspection" defaultSeverity="INFORMATION" displayName="Assignment can be replaced with increment or decrement" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the assignments that can be replaced with incrementing (&lt;code&gt;++&lt;/code&gt;) or decrementing (&lt;code&gt;--&lt;/code&gt;) operations.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpAssignmentReplaceableWithOperatorAssignmentInspection" defaultSeverity="INFORMATION" displayName="Assignment can be replaced with operator assignment" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the assignments that can be replaced with combined operator assignments (for example, &lt;code&gt;+=&lt;/code&gt;).
&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Joomla!" path=""><inspection shortName="FileHeaderInspection" defaultSeverity="WEAK WARNING" displayName="Missing @copyright/@license tags" enabled="true" language="PHP" pluginId="com.jetbrains.php.joomla" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the file header DocBlocks that do not contain the &lt;code&gt;@copyright&lt;/code&gt; and &lt;code&gt;@license&lt;/code&gt; tags required by the Joomla! DocBlocks standard.
&lt;p&gt;
  See &lt;a href="https://developer.joomla.org/coding-standards/docblocks.html"&gt;Joomla! Coding Standards (developer.joomla.org)&lt;/a&gt; for details.
  &lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="MissingSinceTagDocInspection" defaultSeverity="WEAK WARNING" displayName="Missing @since tag" enabled="true" language="PHP" pluginId="com.jetbrains.php.joomla" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the class, class property, and class method DocBlocks that do not contain the &lt;code&gt;@since&lt;/code&gt; tag required by the Joomla! DocBlocks standard.

&lt;p&gt;See &lt;a href="https://developer.joomla.org/coding-standards/docblocks.html"&gt;Joomla! Coding Standards (developer.joomla.org)&lt;/a&gt; for details.
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Unit testing" path="JavaScript and TypeScript"><inspection shortName="JSTestFailedLine" defaultSeverity="WARNING" displayName="Highlight failure line in test code" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a failed method call or an assertion in a test.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="KarmaConfigFile" defaultSeverity="WARNING" displayName="Invalid Karma configuration file" enabled="true" language="JavaScript" pluginId="Karma" pluginVersion="233.13135.108" isGlobalTool="false">&lt;!--
  ~ Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file.
  --&gt;

&lt;html&gt;
&lt;body&gt;
  Reports a potential error in a file path ('basePath', 'files') for a Karma configuration file, for example,  &lt;code&gt;karma.conf.js&lt;/code&gt;.
&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Shell script" path=""><inspection shortName="ShellCheck" defaultSeverity="ERROR" displayName="ShellCheck" enabled="true" language="Shell Script" pluginId="com.jetbrains.sh" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports shell script bugs detected by the integrated &lt;a href="https://github.com/koalaman/shellcheck"&gt;ShellCheck&lt;/a&gt; static analysis tool.
&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Probable bugs" path="PHP/Php Inspections (EA Extended)"><inspection shortName="PrintfScanfArgumentsInspection" defaultSeverity="ERROR" displayName="*printf/*scanf arguments count mismatches" enabled="true" language="PHP" pluginId="com.kalessil.phpStorm.phpInspectionsEA" pluginVersion="5.0.0.0" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Analyzes printf(), sprintf(), fprintf(), sscanf(), fscanf() calls and reports issues with patterns and parameter counts.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="DateTimeSetTimeUsageInspection" defaultSeverity="ERROR" displayName="'DateTime::setTime(...)' usage correctness" enabled="true" language="PHP" pluginId="com.kalessil.phpStorm.phpInspectionsEA" pluginVersion="5.0.0.0" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Checks if the microseconds parameter specified when language level is below PHP 7.1 (causes returning false).
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="DuplicateArrayKeysInspection" defaultSeverity="WARNING" displayName="Duplicate array keys" enabled="true" language="PHP" pluginId="com.kalessil.phpStorm.phpInspectionsEA" pluginVersion="5.0.0.0" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Similar to a built-in inspection, but has improved reporting (distinguishes values match).
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="UsingInclusionOnceReturnValueInspection" defaultSeverity="ERROR" displayName="Suspicious usage of include_once/require_once return value" enabled="true" language="PHP" pluginId="com.kalessil.phpStorm.phpInspectionsEA" pluginVersion="5.0.0.0" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
On repetitive calls include_once/require_once will return true. To be on the safe side it is worth using include/require
or refactor your code using functions/methods.
&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="AutoloadingIssuesInspection" defaultSeverity="WARNING" displayName="Class autoloading correctness" enabled="true" language="PHP" pluginId="com.kalessil.phpStorm.phpInspectionsEA" pluginVersion="5.0.0.0" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Documentation can be found &lt;a href="https://github.com/kalessil/phpinspectionsea/blob/master/docs/probable-bugs.md#class-autoloading-correctness"&gt;here&lt;/a&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="NullPointerExceptionInspection" defaultSeverity="WARNING" displayName="Null reference" enabled="true" language="PHP" pluginId="com.kalessil.phpStorm.phpInspectionsEA" pluginVersion="5.0.0.0" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Documentation can be found &lt;a href="https://github.com/kalessil/phpinspectionsea/blob/master/docs/probable-bugs.md#null-pointer-exceptions-prevention"&gt;here&lt;/a&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="InfinityLoopInspection" defaultSeverity="ERROR" displayName="Infinity loop detection" enabled="true" language="PHP" pluginId="com.kalessil.phpStorm.phpInspectionsEA" pluginVersion="5.0.0.0" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
The inspection reports possible infinity loops.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="SuspiciousFunctionCallsInspection" defaultSeverity="ERROR" displayName="Suspicious function calls" enabled="true" language="PHP" pluginId="com.kalessil.phpStorm.phpInspectionsEA" pluginVersion="5.0.0.0" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
The inspection checks core API calls and reports calls with constant result (e.g. when operating on the same argument
where it supposed to be two different arguments).
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="OffsetOperationsInspection" defaultSeverity="ERROR" displayName="Array and string offset validity" enabled="false" language="PHP" pluginId="com.kalessil.phpStorm.phpInspectionsEA" pluginVersion="5.0.0.0" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Analyzes offset operations (adding to index, index-based read, write, etc.) and reports issues found.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ClassMockingCorrectnessInspection" defaultSeverity="ERROR" displayName="Class mocking correctness" enabled="true" language="PHP" pluginId="com.kalessil.phpStorm.phpInspectionsEA" pluginVersion="5.0.0.0" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports final classes mocking issues in PHPUnit/PhpSpec.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PregQuoteUsageInspection" defaultSeverity="ERROR" displayName="Proper preg_quote(...) usage" enabled="true" language="PHP" pluginId="com.kalessil.phpStorm.phpInspectionsEA" pluginVersion="5.0.0.0" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Documentation can be found &lt;a href="https://github.com/kalessil/phpinspectionsea/blob/master/docs/probable-bugs.md#proper-preg_quote-usage"&gt;here&lt;/a&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="TraitsPropertiesConflictsInspection" defaultSeverity="ERROR" displayName="Traits properties conflicts resolution" enabled="true" language="PHP" pluginId="com.kalessil.phpStorm.phpInspectionsEA" pluginVersion="5.0.0.0" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Documentation can be found &lt;a href="https://secure.php.net/manual/en/language.oop5.traits.php#language.oop5.interfaces.examples.ex1"&gt;here&lt;/a&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PassingByReferenceCorrectnessInspection" defaultSeverity="WARNING" displayName="Passing arguments by reference correctness" enabled="true" language="PHP" pluginId="com.kalessil.phpStorm.phpInspectionsEA" pluginVersion="5.0.0.0" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports feeding invalid arguments into by-reference function/method parameters.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="CompactArgumentsInspection" defaultSeverity="ERROR" displayName="'compact(...)' variables existence" enabled="true" language="PHP" pluginId="com.kalessil.phpStorm.phpInspectionsEA" pluginVersion="5.0.0.0" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Documentation can be found &lt;a href="https://github.com/kalessil/phpinspectionsea/blob/master/docs/probable-bugs.md#compact-arguments-existence"&gt;here&lt;/a&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="MissingIssetImplementationInspection" defaultSeverity="ERROR" displayName="Empty/isset results correctness" enabled="true" language="PHP" pluginId="com.kalessil.phpStorm.phpInspectionsEA" pluginVersion="5.0.0.0" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Documentation can be found &lt;a href="https://github.com/kalessil/phpinspectionsea/blob/master/docs/probable-bugs.md#emptyisset-results-correctness"&gt;here&lt;/a&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="RealpathInStreamContextInspection" defaultSeverity="WARNING" displayName="Phar-incompatible 'realpath(...)' usage" enabled="true" language="PHP" pluginId="com.kalessil.phpStorm.phpInspectionsEA" pluginVersion="5.0.0.0" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Documentation can be found &lt;a href="https://github.com/kalessil/phpinspectionsea/blob/master/docs/probable-bugs.md#phar-incompatible-realpath-usage"&gt;here&lt;/a&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="IssetArgumentExistenceInspection" defaultSeverity="WARNING" displayName="Isset operations variables existence" enabled="true" language="PHP" pluginId="com.kalessil.phpStorm.phpInspectionsEA" pluginVersion="5.0.0.0" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Checks whether the operator argument is defined at all (due to refactoring it can be not existing anymore).
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="DateIntervalSpecificationInspection" defaultSeverity="ERROR" displayName="Date interval specification validity" enabled="true" language="PHP" pluginId="com.kalessil.phpStorm.phpInspectionsEA" pluginVersion="5.0.0.0" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Validates interval specification for the \DateInterval class constructor.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="MissingArrayInitializationInspection" defaultSeverity="WARNING" displayName="Missing array initialization" enabled="true" language="PHP" pluginId="com.kalessil.phpStorm.phpInspectionsEA" pluginVersion="5.0.0.0" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Analyzes nested loops and reports if suspicious array pushes (requests adding array initialization).
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ClassConstantUsageCorrectnessInspection" defaultSeverity="ERROR" displayName="::class constant usage correctness" enabled="true" language="PHP" pluginId="com.kalessil.phpStorm.phpInspectionsEA" pluginVersion="5.0.0.0" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports issues related to PSR-11 strict class loading, caused by `::class` processing.
More details &lt;a href="https://github.com/kalessil/phpinspectionsea/blob/master/docs/probable-bugs.md#class-autoloading-correctness"&gt;here&lt;/a&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="PreloadingUsageCorrectnessInspection" defaultSeverity="WARNING" displayName="Preloading usage correctness" enabled="true" language="PHP" pluginId="com.kalessil.phpStorm.phpInspectionsEA" pluginVersion="5.0.0.0" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Analyzes preload.php files and reports require/include constructs usage. See https://bugs.php.net/bug.php?id=78918 for details.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="SuspiciousAssignmentsInspection" defaultSeverity="ERROR" displayName="Suspicious assignments" enabled="true" language="PHP" pluginId="com.kalessil.phpStorm.phpInspectionsEA" pluginVersion="5.0.0.0" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Identifies assignments immediately overriding values in non-trivial contexts.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="SwitchContinuationInLoopInspection" defaultSeverity="ERROR" displayName="Continue misbehaviour in switch" enabled="true" language="PHP" pluginId="com.kalessil.phpStorm.phpInspectionsEA" pluginVersion="5.0.0.0" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Documentation can be found &lt;a href="https://github.com/kalessil/phpinspectionsea/blob/master/docs/probable-bugs.md#continue-misbehaviour-in-switch"&gt;here&lt;/a&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="SuspiciousSemicolonInspection" defaultSeverity="ERROR" displayName="Suspicious semicolon" enabled="true" language="PHP" pluginId="com.kalessil.phpStorm.phpInspectionsEA" pluginVersion="5.0.0.0" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Semicolon following immediately by loop constructs might be a bug.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="SuspiciousLoopInspection" defaultSeverity="ERROR" displayName="Suspicious loop" enabled="true" language="PHP" pluginId="com.kalessil.phpStorm.phpInspectionsEA" pluginVersion="5.0.0.0" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Documentation can be found &lt;a href="https://github.com/kalessil/phpinspectionsea/blob/master/docs/probable-bugs.md#suspicious-loop"&gt;here&lt;/a&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="SimpleXmlLoadFileUsageInspection" defaultSeverity="ERROR" displayName="'simplexml_load_file(...)' usage correctness" enabled="true" language="PHP" pluginId="com.kalessil.phpStorm.phpInspectionsEA" pluginVersion="5.0.0.0" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports 'simplexml_load_file(...)' calls, which may be affected by &lt;a href="https://bugs.php.net/bug.php?id=62577"&gt;this PHP bug&lt;a&gt;.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="IncorrectRandomRangeInspection" defaultSeverity="ERROR" displayName="Incorrect random generation range" enabled="true" language="PHP" pluginId="com.kalessil.phpStorm.phpInspectionsEA" pluginVersion="5.0.0.0" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Documentation can be found &lt;a href="https://github.com/kalessil/phpinspectionsea/blob/master/docs/probable-bugs.md#incorrect-random-generation-range"&gt;here&lt;/a&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="StaticLambdaBindingInspection" defaultSeverity="ERROR" displayName="Static lambdas binding" enabled="true" language="PHP" pluginId="com.kalessil.phpStorm.phpInspectionsEA" pluginVersion="5.0.0.0" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports static closures, referencing '$this' (provokes a fatal error).
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="MagicMethodsValidityInspection" defaultSeverity="ERROR" displayName="Magic methods validity" enabled="true" language="PHP" pluginId="com.kalessil.phpStorm.phpInspectionsEA" pluginVersion="5.0.0.0" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Analyzes classes' magic methods and reports declaration violations.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ForgottenDebugOutputInspection" defaultSeverity="ERROR" displayName="Forgotten debug statements" enabled="true" language="PHP" pluginId="com.kalessil.phpStorm.phpInspectionsEA" pluginVersion="5.0.0.0" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Documentation can be found &lt;a href="https://github.com/kalessil/phpinspectionsea/blob/master/docs/probable-bugs.md#forgotten-debug-statements"&gt;here&lt;/a&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="SuspiciousBinaryOperationInspection" defaultSeverity="ERROR" displayName="Suspicious binary operations" enabled="true" language="PHP" pluginId="com.kalessil.phpStorm.phpInspectionsEA" pluginVersion="5.0.0.0" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
The inspection reports variety of cases like checking values being instanceof a trait, unclear and suspicious
operations priority, misplaced operators, hardcoded booleans and more cases which can contain bugs.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="CallableMethodValidityInspection" defaultSeverity="WARNING" displayName="Callable methods validity" enabled="true" language="PHP" pluginId="com.kalessil.phpStorm.phpInspectionsEA" pluginVersion="5.0.0.0" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Checks whether callback methods are invocable invoked (public and/or static).
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="MkdirRaceConditionInspection" defaultSeverity="ERROR" displayName="'mkdir(...)' race condition" enabled="true" language="PHP" pluginId="com.kalessil.phpStorm.phpInspectionsEA" pluginVersion="5.0.0.0" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Documentation can be found &lt;a href="https://github.com/kalessil/phpinspectionsea/blob/master/docs/probable-bugs.md#mkdir-race-condition"&gt;here&lt;/a&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="DateTimeConstantsUsageInspection" defaultSeverity="ERROR" displayName="DateTime constants usage validity" enabled="true" language="PHP" pluginId="com.kalessil.phpStorm.phpInspectionsEA" pluginVersion="5.0.0.0" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
From the &lt;a href="https://secure.php.net/manual/en/class.datetime.php#datetime.constants.cookie"&gt;official documentation&lt;/a&gt;:&lt;br/&gt;&lt;br/&gt;

&lt;b&gt;DateTime::ISO8601&lt;/b&gt;&lt;br/&gt;
&lt;b&gt;DATE_ISO8601&lt;/b&gt;&lt;br/&gt;&lt;br/&gt;

ISO-8601 (example: 2005-08-15T15:52:01+0000)&lt;br/&gt;

&lt;blockquote&gt;
Note: This format is not compatible with ISO-8601, but is left this way for backward compatibility reasons.
Use DateTime::ATOM or DATE_ATOM for compatibility with ISO-8601 instead.
&lt;/blockquote&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="SuspiciousReturnInspection" defaultSeverity="ERROR" displayName="Suspicious returns" enabled="true" language="PHP" pluginId="com.kalessil.phpStorm.phpInspectionsEA" pluginVersion="5.0.0.0" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports cases when a return statement might introduce bugs.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="StringsFirstCharactersCompareInspection" defaultSeverity="ERROR" displayName="Strings N-character comparison flaws" enabled="true" language="PHP" pluginId="com.kalessil.phpStorm.phpInspectionsEA" pluginVersion="5.0.0.0" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
The inspection analyzes strncmp(...) and strncasecmp(...) calls and reports incorrect length parameter values.
&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Type compatibility" path="PHP/Php Inspections (EA Extended)"><inspection shortName="TypeUnsafeComparisonInspection" defaultSeverity="WARNING" displayName="Type unsafe comparison" enabled="true" language="PHP" pluginId="com.kalessil.phpStorm.phpInspectionsEA" pluginVersion="5.0.0.0" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Analyzes comparison operators. If '... == ...', '... != ...' (equality) constructions are used,
type-enforcing identical operators are suggested instead ('... === ...', '... !== ...').&lt;br /&gt;
&lt;br /&gt;
Refactoring this might present a significant cost in terms of 
additional development and legacy code reverse engineering, so 
the cost-benefit should be weighed carefully.
&lt;br /&gt;
Documentation can be found &lt;a href="https://github.com/kalessil/phpinspectionsea/blob/master/docs/types-compatibility.md#strict-comparison"&gt;here&lt;/a&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="TypeUnsafeArraySearchInspection" defaultSeverity="WEAK WARNING" displayName="'in_array(...)', 'array_search(...)' type unsafe usage" enabled="true" language="PHP" pluginId="com.kalessil.phpStorm.phpInspectionsEA" pluginVersion="5.0.0.0" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Analyzes usages of 'array_search(..)' and 'in_array(...)'. If the 'strict' (third) parameter is missing,
refactoring will be proposed for security's sake.&lt;br /&gt;
&lt;br /&gt;
Refactoring this might present a significant cost in terms of 
additional development and legacy code reverse engineering, so 
the cost-benefit should be weighed carefully.
&lt;br /&gt;
Documentation can be found &lt;a href="https://github.com/kalessil/phpinspectionsea/blob/master/docs/types-compatibility.md#strict-type-search-in-arrays"&gt;here&lt;/a&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JsonEncodingApiUsageInspection" defaultSeverity="WEAK WARNING" displayName="JSON encoding API usage" enabled="true" language="PHP" pluginId="com.kalessil.phpStorm.phpInspectionsEA" pluginVersion="5.0.0.0" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Documentation can be found &lt;a href="https://github.com/kalessil/phpinspectionsea/blob/master/docs/types-compatibility.md#json-encoding-api-usage"&gt;here&lt;/a&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Attributes" path="PHP"><inspection shortName="PhpRedundantAttributeParenthesisInspection" defaultSeverity="WEAK WARNING" displayName="Redundant parentheses in attribute" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
  Reports empty arguments lists in attributes.
  &lt;p&gt;
    See &lt;a href="https://wiki.php.net/rfc/attributes_v2"&gt;Attributes (php.net)&lt;/a&gt; for details.
  &lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpArrayKeyDoesNotMatchArrayShapeInspection" defaultSeverity="WEAK WARNING" displayName="Array key does not match array shape " enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the array keys that do not match the keys specified via the &lt;code&gt;#[ArrayShape]&lt;/code&gt; attribute.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpOverriddenMethodExistsInspection" defaultSeverity="ERROR" displayName="Method does not override the method from its superclass" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Checks that the overridden method exists.
&lt;p&gt;
  See &lt;a href="https://wiki.php.net/rfc/marking_overriden_methods"&gt;PHP RFC: Marking overridden methods (wiki.php.net)&lt;/a&gt; for details.
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpPureFunctionMayProduceSideEffectsInspection" defaultSeverity="WEAK WARNING" displayName="Pure function may produce side effects" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the &lt;code&gt;#[Pure]&lt;/code&gt; annotations used on functions that may produce side effects.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpNoReturnAttributeCanBeAddedInspection" defaultSeverity="WEAK WARNING" displayName="NoReturn attribute can be added" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports function without &lt;code&gt;#[NoReturn]&lt;/code&gt; that are always halting their execution by calling other exitPoint functions attribute.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpExpectedValuesShouldBeUsedInspection" defaultSeverity="WEAK WARNING" displayName="Expected values should be used" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
  Reports the values in assignment and comparison expressions that should be replaced with one of the expected values (that is, the values specified via the &lt;code&gt;#[ExpectedValues]&lt;/code&gt; attribute).
  &lt;p&gt;
    See &lt;a href="https://wiki.php.net/rfc/attributes_v2"&gt;Attributes (php.net)&lt;/a&gt; for details.
  &lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpLineCommentWillBeParsedAsAttributeInspection" defaultSeverity="WARNING" displayName="Comment is parsed as attribute in PHP 8.0" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
  Reports line comments starting with &lt;code&gt;#[&lt;/code&gt;. In PHP 8.0 and later, such comments are parsed as attributes.
  &lt;p&gt;
    See &lt;a href="https://wiki.php.net/rfc/attributes_v2"&gt;Attributes (php.net)&lt;/a&gt; for details.
  &lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpClassCantBeUsedAsAttributeInspection" defaultSeverity="WEAK WARNING" displayName="Class cannot be used as attribute" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
  Reports the attributes that are resolved to a class not annotated with &lt;code&gt;#[Attribute]&lt;/code&gt;.
  &lt;p&gt;
    See &lt;a href="https://wiki.php.net/rfc/attributes_v2"&gt;Attributes (php.net)&lt;/a&gt; for details.
  &lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpAttributeIsNotRepeatableInspection" defaultSeverity="WEAK WARNING" displayName="Non-repeatable attribute" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
  Reports repeated attributes without the &lt;code&gt;Attribute::IS_REPEATABLE&lt;/code&gt; flag in their arguments declaration.
  &lt;p&gt;
    See &lt;a href="https://wiki.php.net/rfc/attributes_v2"&gt;Attributes (php.net)&lt;/a&gt; for details.
  &lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpAddOverrideAttributeInspection" defaultSeverity="INFORMATION" displayName="Mark overridden method with #[Override]" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Suggests adding the &lt;code&gt;#[Override]&lt;/code&gt; attribute to the methods that override same name methods in the parent class
or any of the implemented interfaces.
&lt;p&gt;
  The &lt;code&gt;#[Override]&lt;/code&gt; attribute is available only since PHP 8.3. See &lt;a href="https://wiki.php.net/rfc/marking_overriden_methods"&gt;PHP RFC: Marking overridden methods (wiki.php.net)&lt;/a&gt; for details.
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpImmutablePropertyIsWrittenInspection" defaultSeverity="ERROR" displayName="Immutable property written in invalid scope" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Highlights write access references to properties, for which the write access scope declared via &lt;code&gt;#[Immutable]&lt;/code&gt; is stricter than the reference scope.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpInapplicableAttributeTargetDeclarationInspection" defaultSeverity="WEAK WARNING" displayName="Non-applicable attribute target declaration" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the attributes that do not have the appropriate &lt;code&gt;Attribute::TARGET_*&lt;/code&gt; flag in their arguments declaration.
&lt;p&gt;
  See &lt;a href="https://wiki.php.net/rfc/attributes_v2"&gt;Attributes (php.net)&lt;/a&gt; for details.
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpAttributeCanBeAddedToOverriddenMemberInspection" defaultSeverity="WEAK WARNING" displayName="Attribute can be added to overriding member " enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the methods' and parameters' attributes that can be propagated to overriding methods/parameters.
&lt;p&gt;
  See &lt;a href="https://wiki.php.net/rfc/attributes_v2"&gt;Attributes (php.net)&lt;/a&gt; for details.
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpPureAttributeCanBeAddedInspection" defaultSeverity="INFORMATION" displayName="'#[Pure]' attribute can be added" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the functions that are non-trivially pure. Such functions have other functions calls in their body, but all such calls do not produce any side effects.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpArrayShapeCanBeAddedInspection" defaultSeverity="INFORMATION" displayName="'#[ArrayShape]' attribute can be added" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the methods and functions that are returning arrays with known non-trivial keys. Suggests specifying the shape of the returned array via the &lt;code&gt;#[ArrayShape]&lt;/code&gt; attribute or
an array shape in the PHPDoc comment.
&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="SQL" path=""><inspection shortName="SqlWithoutWhereInspection" defaultSeverity="WARNING" displayName="Delete or update statement without where clauses" enabled="true" language="SQL" pluginId="com.intellij.database" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports usages of DELETE or UPDATE statements without WHERE clauses.
  &lt;p&gt;Without WHERE clauses, DELETE drops all the data from the table, and UPDATE overwrites values for all the table rows.&lt;/p&gt;
&lt;p&gt;Example (MySQL):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;CREATE TABLE t1 (a TEXT, b INT, c BOOLEAN);
update t1 set  a = 'Smith';
delete from t1;&lt;/code&gt;&lt;/pre&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="SqlAmbiguousColumnInspection" defaultSeverity="WARNING" displayName="Ambiguous reference" enabled="true" language="SQL" pluginId="com.intellij.database" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports columns that have identical names but belong to different tables.
&lt;p&gt;Example (MySQL):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;CREATE TABLE foo(id INT PRIMARY KEY);
CREATE TABLE bar(id INT PRIMARY KEY);

SELECT foo.id, bar.id FROM foo, bar WHERE id &gt; 0;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;id&lt;/code&gt; column appears in &lt;code&gt;foo&lt;/code&gt; and &lt;code&gt;bar&lt;/code&gt; tables. You need to qualify the column name to
  make the query correct.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;SELECT foo.id, bar.id FROM foo, bar WHERE foo.id &gt; 0;&lt;/code&gt;&lt;/pre&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="SqlConstantConditionInspection" defaultSeverity="WARNING" displayName="Constant condition" enabled="true" language="SQL" pluginId="com.intellij.database" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports conditions in WHERE or JOIN clauses that are always TRUE or always FALSE.
&lt;p&gt;Example (MySQL):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;CREATE TABLE t1 (a TEXT, b INT, c BOOLEAN);
SELECT a FROM t1 WHERE 'Cat' = 'Cat';&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;'Cat' = 'Cat'&lt;/code&gt; is always true and will be reported.&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="SqlCaseVsCoalesceInspection" defaultSeverity="WARNING" displayName="Using CASE instead of COALESCE function and vice versa" enabled="true" language="SQL" pluginId="com.intellij.database" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports situations when CASE and COALESCE calls are interchangeable. This inspection has the following intention actions: &lt;b&gt;Replace
  with 'COALESCE' call&lt;/b&gt; and the opposite one &lt;b&gt;Replace with CASE expression&lt;/b&gt;.
&lt;p&gt;Example (MySQL):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;SELECT
  -- this CASE may be replaced by COALESCE
	CASE
		WHEN C1 IS NOT NULL THEN C1
		ELSE 0
		END
FROM dual;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In the example, the CASE statement can be replaced with &lt;code&gt;SELECT COALESCE(C1, 0)&lt;/code&gt; that produces the same output.&lt;/p&gt;
&lt;p&gt;If you prefer using CASE expressions, select the &lt;b&gt;Prefer CASE expressions over COALESCE function&lt;/b&gt; option on
the inspection page.&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="SqlDuplicateColumnInspection" defaultSeverity="WARNING" displayName="Duplicating column name in SELECT" enabled="true" language="SQL" pluginId="com.intellij.database" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports duplicated names of column aliases in SELECT lists.
&lt;p&gt;Example (Sybase ASE):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;CREATE TABLE t1 (a TEXT, b INT, c INT);

SELECT a AS x, b AS x FROM t1;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;x&lt;/code&gt; alias name is used for &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; columns. These assignments are highlighted as errors because
  you cannot use identical alias names for columns in Sybase ASE.&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="SqlAutoIncrementDuplicateInspection" defaultSeverity="WARNING" displayName="Auto-increment duplicate" enabled="true" language="SQL" pluginId="com.intellij.database" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports tables that contain two columns with an automatic increment. In MySQL, Microsoft SQL Server, and Db2 dialects, a table can
  have only one field with a auto-increment option, and this field must be a key.
&lt;p&gt;Example (MySQL):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;CREATE TABLE my_table
(
    id INT AUTO_INCREMENT,
    c2 INT AUTO_INCREMENT,
);&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The AUTO_INCREMENT constraint for &lt;code&gt;c2&lt;/code&gt; will be highlighted as &lt;code&gt;c1&lt;/code&gt; already has this constraint. To fix the warning,
  you can make &lt;code&gt;id&lt;/code&gt; a primary key and delete AUTO_INCREMENT for &lt;code&gt;c2&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;CREATE TABLE my_table
(
    id INT AUTO_INCREMENT PRIMARY KEY,
    c2 INT,
);&lt;/code&gt;&lt;/pre&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="SqlAggregatesInspection" defaultSeverity="WARNING" displayName="Aggregate-related problems" enabled="true" language="SQL" pluginId="com.intellij.database" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports invalid usages of SQL aggregate functions.
&lt;p&gt;The following situations are considered:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;p&gt;Columns that are used in HAVING and ORDER BY clauses but are missed in GROUP BY clauses.&lt;/p&gt;
    &lt;pre&gt;&lt;code&gt;CREATE TABLE foo(id INT PRIMARY KEY, a INT, b INT);
SELECT a, MAX(b) FROM foo GROUP BY a HAVING b &gt; 0;
SELECT * FROM foo GROUP BY a ORDER BY b;&lt;/code&gt;&lt;/pre&gt;
    &lt;p&gt;This rule does not apply when grouping is made by the primary key.&lt;/p&gt;
    &lt;pre&gt;&lt;code&gt;SELECT * FROM foo GROUP BY id ORDER BY b;&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;p&gt;Aggregate functions in a wrong context. Usually, you can use aggregate functions in the following contexts: a list of expressions in
    SELECT; in HAVING and ORDER BY sections; and other dialect-specific cases. The following queries will display an error.&lt;/p&gt;
    &lt;pre&gt;&lt;code&gt;SELECT a FROM foo WHERE MAX(b) &gt; 0;
SELECT a FROM foo GROUP BY MAX(a);&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;p&gt;Nested calls of aggregate functions.&lt;/p&gt;
    &lt;pre&gt;&lt;code&gt;SELECT MAX(SUM(a)) FROM foo GROUP BY a;&lt;/code&gt;&lt;/pre&gt;
    &lt;p&gt;This rule does not apply to analytic functions. The following query is valid and correct.&lt;/p&gt;
    &lt;pre&gt;&lt;code&gt;SELECT MAX(SUM(a) OVER ()) FROM foo;&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;p&gt;Usages of HAVING without aggregate functions. In this case, consider rewriting your code using the WHERE section.&lt;/p&gt;
    &lt;pre&gt;&lt;code&gt;SELECT a, MAX(b) FROM foo GROUP BY a HAVING a &gt; 0;&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="SqlUnusedSubqueryItemInspection" defaultSeverity="WARNING" displayName="Unused subquery item" enabled="true" language="SQL" pluginId="com.intellij.database" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports columns, aliases, and other subquery items that are not referenced in the outer query expression.
&lt;p&gt;Example (PostgreSQL):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;CREATE TABLE for_subquery(id INT);
SELECT a, q FROM (SELECT 1 AS a, 10 AS b, 2 + 3 AS q, id
      FROM for_subquery) x;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We reference &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;q&lt;/code&gt; aliases from a subquery. But the &lt;code&gt;b&lt;/code&gt; alias and the &lt;code&gt;id&lt;/code&gt; column are
  not referenced in the outer SELECT statement. Therefore, &lt;code&gt;b&lt;/code&gt; and &lt;code&gt;id&lt;/code&gt; are grayed out.&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="SqlDerivedTableAliasInspection" defaultSeverity="WARNING" displayName="Each derived table should have alias" enabled="true" language="SQL" pluginId="com.intellij.database" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports derived tables without aliases.
&lt;p&gt;Example (MySQL):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;CREATE TABLE table1 (id INT, name VARCHAR(20), cats FLOAT);
CREATE TABLE table2 (id INT, age INTEGER);

SELECT id AS ID, name, cats, age
FROM (SELECT table1.id, name, cats, age
FROM table1
JOIN table2 ON table1.id = table2.id);&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;According to &lt;a href="https://dev.mysql.com/doc/refman/8.0/en/derived-tables.html"&gt;Derived Tables at dev.mysql.com&lt;/a&gt;, an alias is
  mandatory. You can add the alias by using the &lt;b&gt;Introduce alias&lt;/b&gt; quick-fix.&lt;/p&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;SELECT id AS ID, name, cats, age
FROM (SELECT table1.id, name, cats, age
FROM table1
JOIN table2 ON table1.id = table2.id);&lt;/code&gt;&lt;/pre&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="SqlUnusedVariableInspection" defaultSeverity="WARNING" displayName="Unused variable" enabled="true" language="SQL" pluginId="com.intellij.database" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports unused arguments, variables, or parameters.
&lt;p&gt;Example (PostgreSQL):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;CREATE FUNCTION foo(PARAMUSED INT, PARAMUNUSED INT) RETURNS INT AS
$$
BEGIN
    RETURN PARAMUSED;
END
$$ LANGUAGE plpgsql;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;PARAMUNUSED&lt;/code&gt; parameter is not used in the function and might be deleted.&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="SqlNullComparisonInspection" defaultSeverity="WARNING" displayName="Null comparison" enabled="true" language="SQL" pluginId="com.intellij.database" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports comparisons with NULL that can be replaced with IS NULL or IS NOT NULL operators.
&lt;p&gt;Example (Microsoft SQL Server):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;CREATE TABLE foo ( id int );

SELECT * FROM foo WHERE NULL = NULL;
SELECT * FROM foo WHERE NULL != NULL;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;NULL = NULL&lt;/code&gt; can be replaced with &lt;code&gt;IS NULL&lt;/code&gt;, the &lt;code&gt;NULL != NULL&lt;/code&gt; comparison
  with &lt;code&gt;IS NOT NULL&lt;/code&gt;. To do this replacement, you can use &lt;b&gt;Use IS NULL operator&lt;/b&gt; or &lt;b&gt;Use IS NOT NULL operator&lt;/b&gt;
  quick-fixes.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;SELECT * FROM foo WHERE NULL IS NULL;
SELECT * FROM foo WHERE NULL IS NOT NULL;&lt;/code&gt;&lt;/pre&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="SqlNamedArgumentsInspection" defaultSeverity="WARNING" displayName="Named arguments should be used" enabled="false" language="SQL" pluginId="com.intellij.database" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports arguments that are used without names in routine calls. By default, this inspection is disabled.
&lt;p&gt;For more information about the difference between named and unnamed parameters, see &lt;a
    href="https://docs.microsoft.com/en-us/sql/odbc/reference/develop-app/binding-parameters-by-name-named-parameters"&gt;
    Binding Parameters by Name (Named Parameters) at docs.microsoft.com
  &lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Example (Microsoft SQL Server):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;CREATE FUNCTION foo(n INT, m INT) RETURNS INT AS
BEGIN
    RETURN n + m;
END;

CREATE PROCEDURE test AS
BEGIN
    foo n = 1, m = 2;

--- The following call misses parameter names and will be highlighted
    foo 1, 2;
END;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Parameters &lt;code&gt;1, 2&lt;/code&gt; in the &lt;code&gt;foo 1, 2;&lt;/code&gt; call are highlighted because they miss names.&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="SqlIllegalCursorStateInspection" defaultSeverity="WARNING" displayName="Illegal cursor state" enabled="true" language="SQL" pluginId="com.intellij.database" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports illegal cursor states inside SQL routines.
&lt;ul&gt;
  &lt;li&gt;A routine has CLOSE or FETCH statements but a cursor might be closed.&lt;/li&gt;
  &lt;li&gt;A routine has the OPEN statement but a cursor might be opened.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Example (Microsoft SQL Server):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;CREATE TABLE t(col INT);

CREATE PROCEDURE foo() AS
BEGIN
DECLARE my_cursor CURSOR FOR SELECT * FROM t;
DECLARE a INT;
FETCH my_cursor INTO a;
CLOSE my_cursor;
END;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;According to &lt;a href="https://docs.microsoft.com/en-us/sql/t-sql/language-elements/close-transact-sql"&gt;CLOSE (Transact-SQL) at
  docs.microsoft.com&lt;/a&gt;, CLOSE must be issued on an open cursor, and CLOSE is not allowed on cursors that have only been declared or are
  already closed. So, we need to open the cursor to fix the warning.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;CREATE PROCEDURE foo() AS
BEGIN
DECLARE my_cursor CURSOR FOR SELECT * FROM t;
DECLARE a INT;
OPEN my_cursor;
FETCH my_cursor INTO a;
CLOSE my_cursor;
END;&lt;/code&gt;&lt;/pre&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="SqlConstantExpressionInspection" defaultSeverity="WARNING" displayName="Constant expression" enabled="true" language="SQL" pluginId="com.intellij.database" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports conditions and expressions that are always true, false or null.
&lt;p&gt;Example (MySQL):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;CREATE TABLE t1 (a TEXT, b INT, c BOOLEAN);
SELECT a FROM t1 WHERE 'Cat' = 'Cat';
SELECT a FROM t1 WHERE 'Cat' = null;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;'Cat' = 'Cat'&lt;/code&gt; is always true and will be reported.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;'Cat' = null&lt;/code&gt; is always null and will be reported.&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="SqlDialectInspection" defaultSeverity="WARNING" displayName="SQL dialect detection" enabled="true" language="SQL" pluginId="com.intellij.database" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports situations when a dialect is not assigned to an SQL file.
&lt;p&gt;For example, when you open a new SQL file without assigning a dialect
  to it, you see a notification where the best matching dialect is advised. Click the &lt;b&gt;Use &amp;lt;dialect&amp;gt;&lt;/b&gt; link to use the advised
  dialect. Alternatively, click the &lt;b&gt;Change dialect to&lt;/b&gt; link to select the other dialect.
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="SqlDtInspection" defaultSeverity="WARNING" displayName="Ill-formed date/time literals" enabled="true" language="SQLDateTime" pluginId="com.intellij.database" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports errors in date and time literals. This inspection is available in MySQL, Oracle, Db2, and H2.
&lt;p&gt;Example (MySQL):&lt;/p&gt;
&lt;pre&gt;&lt;code lang="sql"&gt;SELECT TIME '10 -12:13:14' FROM dual;
SELECT TIME ' 12 : 13 : 14 ' FROM dual;
SELECT TIME '12 13 14' FROM dual;
SELECT TIME '12-13-14' FROM dual;
SELECT TIME '12.13.14' FROM dual;
SELECT TIME '12:13:' FROM dual;
SELECT TIME '12:13' FROM dual;
SELECT TIME '12:' FROM dual;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In this example, dates ignore the MySQL standard for date and time literals. Therefore, they will be highlighted.
  For more information about date and time literals in MySQL, see &lt;a
    href="https://dev.mysql.com/doc/refman/8.0/en/date-and-time-literals.html"&gt;Date and Time Literals at dev.mysql.com&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The following date and type literals are valid for MySQL.&lt;/p&gt;
&lt;pre&gt;&lt;code lang="sql"&gt;SELECT TIME '12:13:14' FROM dual;
SELECT TIME '12:13:14.555' FROM dual;
SELECT TIME '12:13:14.' FROM dual;
SELECT TIME '-12:13:14' FROM dual;
SELECT TIME '10 12:13:14' FROM dual;
SELECT TIME '-10 12:13:14' FROM dual;&lt;/code&gt;&lt;/pre&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="SqlInsertNullIntoNotNullInspection" defaultSeverity="WARNING" displayName="Insert NULL into NOT NULL column" enabled="true" language="SQL" pluginId="com.intellij.database" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports cases when you insert NULL values into columns that accept only NOT NULL values.
&lt;p&gt;Example (Microsoft SQL Server):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;CREATE TABLE br2 (
id INT NOT NULL,
col1 NVARCHAR (20) NOT NULL,
col2 NVARCHAR (20) NOT NULL,
);
--
INSERT INTO br2 (id, col1, col2)
VALUES (1, NULL, NULL);&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You cannot insert NULL values in &lt;code&gt;col1&lt;/code&gt; and &lt;code&gt;col2&lt;/code&gt; because they are defined as NOT NULL. If you run the script as
  is,
  you will receive an error. To fix this code, replace NULL in the VALUES part with some values (for example, &lt;code&gt;42&lt;/code&gt; and
  &lt;code&gt;'bird'&lt;/code&gt;).&lt;/p&gt;
&lt;pre&gt;INSERT INTO br2 (id, col1, col2)
VALUES (1, 42, 'bird');&lt;/pre&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="SqlSignatureInspection" defaultSeverity="WARNING" displayName="Function signature" enabled="true" language="SQL" pluginId="com.intellij.database" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports signature issues for built-in functions.
&lt;p&gt;The inspection will report a wrong number of arguments, invalid keywords, wrong data types, and other issues.&lt;/p&gt;
&lt;p&gt;Example (MySQL):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;CREATE TABLE foo (a INT, b INT, c INT)

SELECT IFNULL() FROM foo; -- error
SELECT IFNULL(a) FROM foo; -- error
SELECT IFNULL(a, b) FROM foo; -- OK
SELECT IFNULL(a, b, c) FROM foo; -- error&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In MySQL, the &lt;code&gt;IFNULL()&lt;/code&gt; function accepts strictly two arguments. So, only the &lt;code&gt;SELECT IFNULL(a, b) FROM foo;&lt;/code&gt;
  query is correct.&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="SqlStorageInspection" defaultSeverity="WARNING" displayName="SQL source modification detection" enabled="true" language="SQL" pluginId="com.intellij.database" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports situations when source code of a database object has been changed.
  &lt;p&gt;The inspection is triggered when you perform database or object introspection. The introspection is run when you open source code of an
  object, run statements, and perform code refactoring.
  Also, you can run introspection by right-clicking an object and selecting &lt;b&gt;Refresh&lt;/b&gt;.&lt;/p&gt;

&lt;p&gt;The inspection covers the following situations:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Object source code was changed in the database but code in the editor was not updated. Works in PostgreSQL, Microsoft SQL Server,
  Oracle, and Sybase ASE.&lt;/li&gt;
  &lt;li&gt;You changed the object source code, introspected the database, but source code has been already changed by someone else.&lt;/li&gt;
  &lt;li&gt;The database introspector was updated in the IDE and you need to download new object properties that were missing in the previous
    introspector version.&lt;/li&gt;
&lt;/ul&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="SqlRedundantCodeInCoalesceInspection" defaultSeverity="WARNING" displayName="Redundant code in COALESCE call" enabled="true" language="SQL" pluginId="com.intellij.database" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports all the arguments except for the first expression that does not evaluate to NULL in COALESCE functions.
&lt;p&gt;Example (MySQL):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;SELECT COALESCE(NULL, NULL, NULL, 42, NULL, 'string') as a;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The first NOT NULL argument is &lt;code&gt;42&lt;/code&gt;, all other arguments will be grayed out.&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="SqlSideEffectsInspection" defaultSeverity="WARNING" displayName="Statement with side effects" enabled="true" language="SQL" pluginId="com.intellij.database" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports statements that might lead to modification of a database during a read-only connection. &lt;p&gt;To enable read-only mode for a
  connection,
  right-click a data source in the &lt;b&gt;Database&lt;/b&gt; tool window (&lt;b&gt;View | Tool Windows | Database&lt;/b&gt;) and select &lt;b&gt;Properties&lt;/b&gt;.
  In the &lt;b&gt;Data Sources and Drivers&lt;/b&gt; dialog, click the &lt;b&gt;Options&lt;/b&gt; tab and select the &lt;b&gt;Read-only&lt;/b&gt; checkbox.&lt;/p&gt;
&lt;p&gt;Example (MySQL):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;CREATE TABLE foo(a INT);
INSERT INTO foo VALUES (1);&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As &lt;code&gt;CREATE TABLE&lt;/code&gt; and &lt;code&gt;INSERT INTO&lt;/code&gt; statements lead to a database modification, these statements will be highlighted
  in read-only connection mode.&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="SqlTypeInspection" defaultSeverity="WARNING" displayName="Types compatibility" enabled="true" language="SQL" pluginId="com.intellij.database" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports type-related errors.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="SqlDeprecateTypeInspection" defaultSeverity="WARNING" displayName="Deprecated type" enabled="true" language="SQL" pluginId="com.intellij.database" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports usages of types that are deprecated and might disappear in future versions of DBMS.
&lt;p&gt;Reported types:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;LONG in Oracle (see &lt;a href="https://docs.oracle.com/cd/A91202_01/901_doc/server.901/a90120/ch4_dep.htm#6690" target="_blank"&gt;Deprecated
    and Desupported Features at docs.oracle.com&lt;/a&gt;).
  &lt;/li&gt;
  &lt;li&gt;TEXT, NTEXT, and IMAGE in Microsoft SQL Server (see &lt;a
      href="https://docs.microsoft.com/en-us/sql/database-engine/deprecated-database-engine-features-in-sql-server-2016?view=sql-server-ver15"
      target="_blank"&gt;Deprecated Database Engine Features in SQL Server 2016 at docs.microsoft.com&lt;/a&gt;).
  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Example (Oracle):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;CREATE TABLE ot.foo(
a NUMBER GENERATED BY DEFAULT AS IDENTITY,
b LONG NOT NULL
);&lt;/code&gt;&lt;/pre&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="SqlCallNotationInspection" defaultSeverity="ERROR" displayName="Using of named and positional arguments" enabled="true" language="SQL" pluginId="com.intellij.database" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports calls in which positional arguments go after the named ones. Works in PostgreSQL, Oracle, and Db2.
&lt;p&gt;Example (In PostgreSQL):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;CREATE FUNCTION foo(a int, b int, c int) RETURNS int
    LANGUAGE plpgsql AS
$$
BEGIN
    RETURN a + b + c;
END
$$;
SELECT foo(a =&gt; 1, b =&gt; 2, c =&gt; 3);
  -- `3` goes after the named argument
SELECT foo(1, b =&gt; 2, 3);
  -- `1` and `3` go after the named argument
SELECT foo(b =&gt; 2, 1, 3);&lt;/code&gt;&lt;/pre&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="SqlIdentifierInspection" defaultSeverity="WARNING" displayName="Identifier should be quoted" enabled="true" language="SQL" pluginId="com.intellij.database" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports situations when you use SQL reserved keywords as identifier names in your query.
&lt;p&gt;Example (Microsoft SQL Server):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;CREATE TABLE select (identity INT IDENTITY NOT NULL, order INT NOT NULL);&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We use &lt;code&gt;select&lt;/code&gt;, &lt;code&gt;identity&lt;/code&gt;, and &lt;code&gt;order&lt;/code&gt; as table and column names.
  But they are also reserved keywords in Microsoft SQL Server.
  Therefore, in order to use them as object names in the query, you must quote these identifiers. To quote them, you can use the
  &lt;b&gt;Quote identifier&lt;/b&gt; quick-fix.&lt;/p&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;CREATE TABLE [select] ([identity] INT IDENTITY NOT NULL, [order] INT NOT NULL);&lt;/code&gt;&lt;/pre&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="SqlRedundantOrderingDirectionInspection" defaultSeverity="WARNING" displayName="Redundant ordering direction" enabled="true" language="SQL" pluginId="com.intellij.database" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports redundant ordering directions like ASC and DESC in ORDER BY clauses.
&lt;p&gt;Example (MySQL):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;CREATE TABLE foo(a INT, b INT, c INT);
SELECT * FROM foo ORDER BY a ASC, b DESC, c ASC;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The ORDER BY keyword sorts the records in the ascending order by default. So, the &lt;code&gt;ASC&lt;/code&gt; keyword for &lt;code&gt;a&lt;/code&gt; and
  &lt;code&gt;c&lt;/code&gt; columns is redundant.&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="SqlMissingColumnAliasesInspection" defaultSeverity="WARNING" displayName="Missing column aliases" enabled="false" language="SQL" pluginId="com.intellij.database" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports queries without explicit aliases in output expressions (for example, in the SELECT statement).
&lt;p&gt;Example (PostgreSQL):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;CREATE TABLE foo(a INT, b INT);

SELECT 1, a + 1 AS A2, MAX(b) AS M
FROM foo;&lt;/code&gt;&lt;/pre&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="SqlUnreachableCodeInspection" defaultSeverity="WARNING" displayName="Unreachable code" enabled="true" language="SQL" pluginId="com.intellij.database" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports unreachable statements inside SQL routines.
&lt;p&gt;Example (Microsoft SQL Server):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;CREATE FUNCTION foo() RETURNS INT AS
BEGIN
    THROW;
    RETURN 1;
END;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In Microsoft SQL Server, the &lt;code&gt;THROW&lt;/code&gt; statement raises an exception and transfers execution to the CATCH block of the TRY...CATCH
  construct. Therefore, the &lt;code&gt;RETURN 1;&lt;/code&gt; part will never be executed.&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="SqlRedundantAliasInspection" defaultSeverity="WARNING" displayName="Redundant alias expressions" enabled="true" language="SQL" pluginId="com.intellij.database" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports alias expressions that duplicate names of columns in tables and might be redundant.
&lt;p&gt;Example (PostgreSQL):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;CREATE TABLE foo(a INT, b INT);

SELECT * FROM foo foo(a, b);
SELECT * FROM foo foo(a);
SELECT * FROM foo foo(x);
SELECT * FROM foo foo(x, y);&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The first two aliases use the same column names as in the &lt;code&gt;foo&lt;/code&gt; table. They are considered redundant because they
  column names are identical.&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="SqlAddNotNullColumnInspection" defaultSeverity="WARNING" displayName="Adding not null column without default value" enabled="true" language="SQL" pluginId="com.intellij.database" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports attempts to create NOT NULL columns without DEFAULT values.
&lt;p&gt;Example (Microsoft SQL Server):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;CREATE TABLE foo (a INT, b  INT)

ALTER TABLE foo ADD c INT NOT NULL;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;By default, a column holds NULL values. In the example, we use the NOT NULL constraint that enforces a column not to accept NULL values.
  If we prohibit to use NULL values, we must set the DEFAULT value that SQL can use when we create a new record.
&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ALTER TABLE foo ADD c INT NOT NULL DEFAULT 42;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can quickly add the DEFAULT value by using the &lt;b&gt;Add DEFAULT value&lt;/b&gt; quick-fix.&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="SqlDropIndexedColumnInspection" defaultSeverity="WARNING" displayName="Index is dependent on column" enabled="true" language="SQL" pluginId="com.intellij.database" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports cases when you try to drop columns from indexed tables. This inspection is available in Microsoft SQL Server and Sybase ASE.
&lt;p&gt;Example (Microsoft SQL Server):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;CREATE TABLE test_index
(
col  INT NOT NULL,
col2 INT NOT NULL,
col3 INT NOT NULL UNIQUE,
col4 VARCHAR(200)
);

CREATE UNIQUE INDEX aaaa ON test_index (col, col2);

ALTER TABLE test_index
DROP COLUMN col;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You cannot delete the &lt;code&gt;col&lt;/code&gt; column because it is in the indexed table. To delete the column, you need to delete the
  &lt;code&gt;aaaa&lt;/code&gt; index first (for example, DROP INDEX aaaa).&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="SqlShouldBeInGroupByInspection" defaultSeverity="WARNING" displayName="Column should be in group by clause" enabled="true" language="SQL" pluginId="com.intellij.database" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports columns that are not in the GROUP BY clause or inside an aggregate function call.
&lt;p&gt;Example (Microsoft SQL Server):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;CREATE TABLE t1 (a INT, b INT);
SELECT a, b FROM t1 GROUP BY a;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you run the SELECT query, you will receive an error because Microsoft SQL Server expects the &lt;code&gt;b&lt;/code&gt; column in GROUP BY or used
  inside an aggregate function. The following two examples will fix the error.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;SELECT a, b FROM t1 GROUP BY a, b;
SELECT a, max(b) max_b FROM t1 GROUP BY a;&lt;/code&gt;&lt;/pre&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="SqlMisleadingReferenceInspection" defaultSeverity="WARNING" displayName="Misleading references" enabled="true" language="SQL" pluginId="com.intellij.database" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports ambiguous references in SQL code.
&lt;p&gt;For example, when a name refer to both a table column and a routine parameter. The execution of such code might lead to errors or unexpected
    results due to counter-intuitive resolution logic. Usually, names with a more local scope have higher priority.&lt;/p&gt;
    &lt;p&gt;Example (PostgreSQL):&lt;/p&gt;
    &lt;pre&gt;&lt;code&gt;CREATE TABLE foo
(
    id   INT,
    name VARCHAR(5)
);
CREATE FUNCTION func(name VARCHAR(5)) RETURNS INT AS
$$
DECLARE
    b INT;
BEGIN
      -- `name` is ambiguous as it is used as a column name and a parameter
    SELECT COUNT(*) INTO b FROM foo t WHERE t.name = name;
    RETURN b;
END;
$$ LANGUAGE plpgsql;&lt;/code&gt;&lt;/pre&gt;
  &lt;p&gt;In PostgreSQL, you can use the &lt;code&gt;#variable_conflict&lt;/code&gt; directives to explicitly specify a correct reference. For example,
    use &lt;code&gt;#variable_conflict use_column&lt;/code&gt; to refer to a column name, or &lt;code&gt;#variable_conflict use_variable&lt;/code&gt; to refer to a
    parameter.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;CREATE TABLE foo
(
    id   INT,
    name VARCHAR(5)
);
CREATE FUNCTION func(name VARCHAR(5)) RETURNS INT AS
$$
    #variable_conflict use_column
DECLARE
    b INT;
BEGIN
    SELECT COUNT(*) INTO b FROM foo t WHERE t.name = name;
    RETURN b;
END;
$$ LANGUAGE plpgsql;&lt;/code&gt;&lt;/pre&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="SqlRedundantLimitInspection" defaultSeverity="WARNING" displayName="Redundant row limiting in queries" enabled="true" language="SQL" pluginId="com.intellij.database" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports redundant row limiting clauses like FETCH and LIMIT in queries.
&lt;p&gt;Example (PostgreSQL):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;CREATE TABLE foo(a INT);

SELECT * FROM foo WHERE EXISTS(SELECT * FROM foo LIMIT 2);
SELECT * FROM foo WHERE EXISTS(SELECT * FROM foo FETCH FIRST 2 ROWS ONLY);&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To fix the warning, you can add OFFSET to limiting clauses. If OFFSET is missing, then LIMIT is redundant because
the usage of LIMIT does not influence the operation result of EXISTS. In case with OFFSET, we skip first &lt;code&gt;N&lt;/code&gt; rows and this will
influence the output.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;SELECT * FROM foo WHERE EXISTS(SELECT * FROM foo OFFSET 1 ROW LIMIT 2);
SELECT * FROM foo WHERE EXISTS(SELECT * FROM foo OFFSET 1 ROW FETCH FIRST 2 ROWS ONLY);&lt;/code&gt;&lt;/pre&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="SqlMultipleLimitClausesInspection" defaultSeverity="WARNING" displayName="Multiple row limiting/offset clauses in queries" enabled="true" language="SQL" pluginId="com.intellij.database" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports usages of multiple row limiting clauses in a single query.

&lt;p&gt;Example (Microsoft SQL Server):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;create table foo(a int);
select top 1 * from foo order by a offset 10 rows fetch next 20 rows only;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The SELECT TOP clause is used to specify that only 1 record must be
  returned. The FETCH clause specifies the number of rows to return after the OFFSET
  clause has been processed. But as we already have the SELECT TOP limiting clause, the FETCH clause might be redundant.
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="SqlShadowingAliasInspection" defaultSeverity="WARNING" displayName="Column is shadowed by alias" enabled="true" language="SQL" pluginId="com.intellij.database" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports SELECT aliases with names that match column names in the FROM clause.
&lt;p&gt;Example (MySQL):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;CREATE TABLE foo (a INT, b INT, c INT);
SELECT a b, c FROM foo;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;a&lt;/code&gt; column uses the &lt;code&gt;b&lt;/code&gt; alias but the &lt;code&gt;b&lt;/code&gt; name is also used by the column from the &lt;code&gt;foo&lt;/code&gt;
table.&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="SqlTransactionStatementInTriggerInspection" defaultSeverity="WARNING" displayName="Use of transaction management statements in triggers" enabled="true" language="SQL" pluginId="com.intellij.database" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports usages of transaction management statements like COMMIT or ROLLBACK in trigger bodies.
&lt;p&gt;With COMMIT or ROLLBACK statements in a trigger body, the trigger will not compile.
  The fail happens because triggers start during transactions. When the trigger starts the current transaction is still not complete. As
  COMMIT
  terminates a transaction, both statements (COMMIT and ROLLBACK) would lead to an exception.
  Changes that are executed in a trigger should be committed (or rolled back) by the owning transaction that started the trigger.&lt;/p&gt;
&lt;p&gt;Example (Oracle):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;CREATE TABLE employee_audit
(
    id          INT  NOT NULL,
    update_date DATE NOT NULL,
    old_name    VARCHAR2(100),
    new_name    VARCHAR2(100)
);

CREATE TABLE employees
(
    id   INT           NOT NULL,
    name VARCHAR2(100) NOT NULL
);

CREATE OR REPLACE TRIGGER trig_commit
    AFTER UPDATE OF name
    ON employees
    FOR EACH ROW
BEGIN
    INSERT INTO employee_audit VALUES (:old.id, SYSDATE, :old.name, :new.name);
    COMMIT;
END;

CREATE OR REPLACE TRIGGER trig_rollback
    AFTER UPDATE OF name
    ON employees
    FOR EACH ROW
BEGIN
    INSERT INTO employee_audit VALUES (:old.id, SYSDATE, :old.name, :new.name);
    ROLLBACK;
END;&lt;/code&gt;&lt;/pre&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="SqlCheckUsingColumnsInspection" defaultSeverity="WARNING" displayName="Check using clause columns" enabled="true" language="SQL" pluginId="com.intellij.database" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports columns in the USING clause that does not exist in both tables.
&lt;p&gt;Example (MySQL):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;CREATE TABLE t1 (i INT, j INT);
CREATE TABLE t2 (k INT, l INT);
SELECT * FROM t1 JOIN t2 USING (j);&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In USING clauses, a column name must be present in both tables, and the SELECT query will automatically join
  those tables by using the given column name. As we do not have the &lt;code&gt;j&lt;/code&gt; column in &lt;code&gt;t2&lt;/code&gt;, we can
  rewrite the query using ON. The ON clause can join tables where the column names do not match in both tables.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;SELECT * FROM t1 JOIN t2 ON t1.j = t2.l;&lt;/code&gt;&lt;/pre&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="SqlCurrentSchemaInspection" defaultSeverity="WARNING" displayName="Current console schema introspected" enabled="true" language="SQL" pluginId="com.intellij.database" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports schemas and databases in the current session that are not introspected.
&lt;p&gt;For example, this warning might occur when you try to create a table in the schema that is not introspected.&lt;/p&gt;
&lt;p&gt;Introspection is a method of inspecting a data source. When you perform introspection, structural information in the data source is
  inspected to detect tables, columns, functions, and other elements with their attributes.&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="SqlStringLengthExceededInspection" defaultSeverity="WARNING" displayName="Implicit string truncation" enabled="true" language="SQL" pluginId="com.intellij.database" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports variables that exceed the defined length in characters.
&lt;p&gt;Example (Microsoft SQL Server):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;CREATE PROCEDURE test() AS
BEGIN
DECLARE myVarOk VARCHAR(5) = 'abcde';
DECLARE myVarExceeded VARCHAR(5) = 'abcde12345';

SET myVarOk = 'xyz';
SET myVarExceeded = '123456789';
END;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;myVarExceeded&lt;/code&gt; variable is defined as &lt;code&gt;VARCHAR(5)&lt;/code&gt; but both assigned values (&lt;code&gt;'abcde12345'&lt;/code&gt; and
  &lt;code&gt;'123456789'&lt;/code&gt;) exceed this limitation. You can truncate assigned values or increase the defined length.
  To increase the length, use the &lt;b&gt;Increase type length&lt;/b&gt; quick-fix.
&lt;/p&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;CREATE PROCEDURE test() AS
BEGIN
DECLARE myVarOk VARCHAR(5) = 'abcde';
DECLARE myVarExceeded VARCHAR(10) = 'abcde12345';

SET myVarOk = 'xyz';
SET myVarExceeded = '123456789';
END;&lt;/code&gt;&lt;/pre&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="SqlResolveInspection" defaultSeverity="ERROR" displayName="Unresolved reference" enabled="true" language="SQL" pluginId="com.intellij.database" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports unresolved SQL references.
&lt;p&gt;Example (MySQL):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;CREATE TABLE users(id INT, name VARCHAR(40));
CREATE TABLE admins(id INT, col1 INT);

SELECT users.id, admins.id FROM admins WHERE admins.id &gt; 1;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;users.id&lt;/code&gt; column is unresolved because the &lt;code&gt;users&lt;/code&gt; table is missing in the FROM clause.&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="SqlCaseVsIfInspection" defaultSeverity="WARNING" displayName="Using CASE instead of conditional function and vice versa" enabled="true" language="SQL" pluginId="com.intellij.database" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports situations when CASE and IF are interchangeable.
&lt;p&gt;Example (MySQL):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;SELECT CASE
WHEN C1 IS NULL THEN 1
ELSE 0
END
FROM dual;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To keep your code short, you can replace the CASE structure with IF. You can do that by applying the &lt;b&gt;Replace with 'IF' call&lt;/b&gt;
  intention action. The example code will look as follows:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;SELECT IF(C1 IS NULL, 1, 0)
FROM dual;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To revert IF to CASE, click IF and apply the &lt;b&gt;Replace with CASE expression&lt;/b&gt; intention action.&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="SqlInsertIntoGeneratedColumnInspection" defaultSeverity="WARNING" displayName="Insertion into generated columns" enabled="true" language="SQL" pluginId="com.intellij.database" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports INSERT statements that assign values to generated columns. Generated columns can be read, but their values can not be directly
  written.
&lt;p&gt;Example (PostgreSQL):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;CREATE TABLE foo
(
   col1 INT,
   col2 INT GENERATED ALWAYS AS (col1 + 1) STORED
);
INSERT INTO foo(col1, col2) VALUES (1, 2);&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;You cannot insert &lt;code&gt;2&lt;/code&gt; into the &lt;code&gt;col2&lt;/code&gt; column because this column is generated.
  For this script to work, you can change &lt;code&gt;2&lt;/code&gt; to DEFAULT.&lt;/p&gt;
&lt;code&gt;INSERT INTO foo(col1, col2) VALUES (1, DEFAULT);&lt;/code&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="SqlGotoInspection" defaultSeverity="WARNING" displayName="Usages of GOTO statements" enabled="false" language="SQL" pluginId="com.intellij.database" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports usages of backward GOTO statements and GOTO statements used to exit a loop.
&lt;p&gt;The extensive use of GOTO statements is generally
  not recommended. For details, see &lt;a href="https://www.ibm.com/docs/no/db2/11.5?topic=procedures-goto-statement-in-sql"&gt;GOTO statement in
    SQL
    procedures at ibm.com&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Instead of jumping back to a previous statement using GOTO, consider using a loop.&lt;/p&gt;
&lt;p&gt;Instead of exiting the WHILE loop with GOTO, consider using other control-of-flow statements (for example, RETURN or BREAK).&lt;/p&gt;
&lt;p&gt;Example (Oracle):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;CREATE PROCEDURE test(n INT) AS
DECLARE
    x INT;
BEGIN
    x := 0;
    GOTO a;
    &amp;lt;&amp;lt;a&amp;gt;&amp;gt; x := 1;
    IF (n = 0) THEN
        GOTO a;
    END IF;
    WHILE TRUE
        LOOP
            GOTO b;
        END LOOP;
    &amp;lt;&amp;lt;b&amp;gt;&amp;gt; x := 3;
END;&lt;/code&gt;&lt;/pre&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="SqlInsertValuesInspection" defaultSeverity="WARNING" displayName="VALUES clause cardinality" enabled="true" language="SQL" pluginId="com.intellij.database" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports situations when a number of parameters in VALUES does not match a number of columns
  in a target table.
&lt;p&gt;Example (MySQL):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;CREATE TABLE foo(a INT, b INT, c INT);

INSERT INTO foo VALUES (1,2,3,4)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;foo&lt;/code&gt; table has three columns but in the INSERT INTO statement we pass four.&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="SqlRedundantElseNullInspection" defaultSeverity="WARNING" displayName="Redundant ELSE NULL clause" enabled="true" language="SQL" pluginId="com.intellij.database" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports redundant ELSE NULL clauses.
&lt;p&gt;Example (MySQL):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;SELECT CASE WHEN 2 &gt; 1 THEN 'OK' ELSE NULL END AS alias FROM foo;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;ELSE NULL&lt;/code&gt; part will never be executed and may be omitted.&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="SqlUnicodeStringLiteralInspection" defaultSeverity="WARNING" displayName="Unicode usage in SQL" enabled="true" language="SQL" pluginId="com.intellij.database" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports string literals that use national characters without the &lt;code&gt;N&lt;/code&gt; prefix.
&lt;p&gt;Without the N prefix, the string is converted to the default
  code page of the database. This default code page may not recognize certain characters. For more information, see
  &lt;a href="https://docs.microsoft.com/en-us/sql/t-sql/data-types/nchar-and-nvarchar-transact-sql" target="_blank"&gt;nchar and nvarchar
    (Transact-SQL)
    at docs.microsoft.com&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Example (Microsoft SQL Server):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;SELECT 'abcde' AS a;
SELECT N'abcde' AS b;
SELECT 'абвгд' AS c;
SELECT N'абвгд' AS d;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;SELECT 'абвгд' AS c;&lt;/code&gt; does not have the &lt;code&gt;N&lt;/code&gt; prefix, the &lt;code&gt;'абвгд'&lt;/code&gt; part will be highlighted.&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="SqlJoinWithoutOnInspection" defaultSeverity="WARNING" displayName="Unsafe 'join' clause in 'delete' statement" enabled="true" language="SQL" pluginId="com.intellij.database" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports missing conditional checks for statements that might modify the whole database.
&lt;p&gt;For example, usages of JOIN clauses inside DELETE statements without ON or WHERE. Without conditional checks on JOIN, DELETE drops
  contents of the entire table.&lt;/p&gt;
&lt;p&gt;Example (MySQL):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;CREATE TABLE foo (a INT,b INT,c INT);
CREATE TABLE bar (a INT,b INT,c INT);

DELETE table1 FROM foo table1  INNER JOIN bar table2;&lt;/code&gt;&lt;/pre&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="SqlUnusedCteInspection" defaultSeverity="WARNING" displayName="Unused common table expression" enabled="true" language="SQL" pluginId="com.intellij.database" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports unused common table expressions (CTE) inside the query.
&lt;p&gt;Example (PostgreSQL):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;CREATE TABLE foo(a INT);

WITH a AS (SELECT 1 AS x FROM foo)
SELECT 1 + 2 FROM foo;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;By using WITH, we create a temporary named result set with the name &lt;code&gt;a&lt;/code&gt;, also known as a common table expression (CTE). But
  we do not use this CTE later in the code. The unused CTE is greyed out.&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="SqlMissingReturnInspection" defaultSeverity="ERROR" displayName="Missing return statement" enabled="true" language="SQL" pluginId="com.intellij.database" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports functions that have no RETURN statements.

&lt;p&gt;Example (Oracle):&lt;/p&gt;

&lt;pre&gt;
&lt;code&gt;CREATE FUNCTION foo RETURN int AS
BEGIN
END;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;foo&lt;/code&gt; function must return the integer value but the function body returns nothing. To fix the error,
  add a RETURN statement (for example, &lt;code&gt;return 1;&lt;/code&gt;).&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;CREATE FUNCTION foo RETURN int AS
BEGIN
 RETURN 1;
END;&lt;/code&gt;&lt;/pre&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="SqlNoDataSourceInspection" defaultSeverity="WARNING" displayName="No data sources configured" enabled="true" language="SQL" pluginId="com.intellij.database" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the absence of data sources in the &lt;b&gt;Database&lt;/b&gt; tool window
  (&lt;b&gt;View | Tool Windows | Database&lt;/b&gt;).
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="SqlTriggerTransitionInspection" defaultSeverity="WARNING" displayName="Suspicious code in triggers" enabled="true" language="SQL" pluginId="com.intellij.database" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports incorrect usages of transition table variables in triggers.
&lt;p&gt;Example (HSQLDB):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;CREATE TABLE foo(a INT);

CREATE TRIGGER trg
 AFTER DELETE ON foo
BEGIN
   SELECT * FROM NEW;
END;

CREATE TRIGGER trig AFTER INSERT ON foo
   REFERENCING OLD ROW AS newrow
   FOR EACH ROW WHEN (a &gt; 1)
   INSERT INTO foo VALUES (1)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In HSQLDB, DELETE triggers may be used only with the OLD state while INSERT triggers may have only the NEW state. So, in the previous
  example, NEW in &lt;code&gt;SELECT * FROM NEW;&lt;/code&gt; will be highlighted as well as OLD in &lt;code&gt;REFERENCING OLD ROW AS newrow&lt;/code&gt;.&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Code quality tools" path="JavaScript and TypeScript"><inspection shortName="Eslint" defaultSeverity="WARNING" displayName="ESLint" enabled="false" language="JavaScript" pluginId="JavaScript" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a discrepancy detected by the &lt;a href="https://eslint.org"&gt;ESLint&lt;/a&gt; linter.
&lt;!-- tooltip end --&gt;
&lt;br/&gt;&lt;br/&gt;
The highlighting is based on the rule severity specified in the &lt;a href="https://eslint.org/docs/user-guide/configuring"&gt;ESLint configuration file&lt;/a&gt; for each individual rule.
&lt;br/&gt;&lt;br/&gt;
Clear the  'Use rule severity from the configuration file' checkbox to use the severity configured in this inspection for all ESLint rules.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JSHint" defaultSeverity="ERROR" displayName="JSHint" enabled="false" language="JavaScript" pluginId="JavaScript" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a problem detected by the &lt;a href="https://jshint.com/"&gt;JSHint&lt;/a&gt; linter.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="StandardJS" defaultSeverity="ERROR" displayName="Standard code style" enabled="false" language="JavaScript" pluginId="JavaScript" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a discrepancy detected by the &lt;a href="https://standardjs.com/"&gt;JavaScript Standard Style&lt;/a&gt; linter.
&lt;!-- tooltip end --&gt;
&lt;br/&gt;&lt;br/&gt;
The highlighting severity in the editor is based on the severity level the linter reports.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="TsLint" defaultSeverity="WARNING" displayName="TSLint" enabled="false" language="TypeScript" pluginId="tslint" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a discrepancy detected by the &lt;a href="https://github.com/palantir/tslint"&gt;TSLint&lt;/a&gt; linter.
&lt;!-- tooltip end --&gt;
&lt;br/&gt;&lt;br/&gt;
The highlighting is based on the rule severity specified in the &lt;a href="https://palantir.github.io/tslint/usage/configuration/"&gt;TSLint configuration file&lt;/a&gt; for each individual rule.
&lt;br/&gt;&lt;br/&gt;
Clear the 'Use rule severity from the configuration file' checkbox to use the severity configured in this inspection for all TSLint rules.
&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Oracle" path=""><inspection shortName="OraOverloadInspection" defaultSeverity="WARNING" displayName="Overloading errors" enabled="true" language="Oracle" pluginId="com.intellij.database" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports invalid cases of subprogram overloading in Oracle.
&lt;p&gt;Example (Oracle):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;DECLARE
    SUBTYPE fff IS BINARY_INTEGER;
    SUBTYPE ggg IS NATURAL;
    PROCEDURE foo (a IN ggg) IS BEGIN NULL; END;
    PROCEDURE foo (a IN fff) IS BEGIN NULL; END;
BEGIN
    NULL;
END;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You cannot overload subprograms which parameters differ only in subtypes. For example, you cannot overload procedures where one accepts a
  BINARY INTEGER parameter and the other accepts a NATURAL parameter. For more information about restrictions on procedure overloading,
see &lt;a href="https://docs.oracle.com/cd/B19306_01/appdev.102/b14261/subprograms.htm"&gt;Restrictions on Overloading at docs.oracle.com&lt;/a&gt;.&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="OraUnmatchedForwardDeclarationInspection" defaultSeverity="ERROR" displayName="Forward declaration without definition" enabled="true" language="Oracle" pluginId="com.intellij.database" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports declarations of procedures and functions that are missing their implementation in code.
&lt;p&gt;In Oracle, you can declare a procedure or a function without its body, and write the implementation later. The inspection will report names
of such procedures or functions that are left without implementation.&lt;/p&gt;
&lt;p&gt;Example (Oracle):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;DECLARE PROCEDURE foo(a int, b varchar2);
BEGIN
    NULL;
END;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;foo&lt;/code&gt; procedure is declared but is missing implementation. We can add the implementation to get rid of the error.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;DECLARE PROCEDURE foo(a int, b varchar2);
  PROCEDURE foo(a int, b varchar2) IS
BEGIN
    NULL;
END;
BEGIN
    NULL;
END;&lt;/code&gt;&lt;/pre&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="OraMissingBodyInspection" defaultSeverity="WARNING" displayName="Missing body for package/object type specification" enabled="true" language="Oracle" pluginId="com.intellij.database" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports package and object type specifications that are missing body declarations.
&lt;p&gt;Package specifications and object types that declare routines as well as package specifications with cursors must have body
  declarations where those routines and cursors are implemented. Absence of a body leads to a runtime error when routines or cursors are
  invoked in program code.&lt;/p&gt;
&lt;p&gt;Example (Oracle):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;CREATE OR REPLACE PACKAGE ppp IS
    FUNCTION foo(a INT) RETURN INT;
END;&lt;/code&gt;&lt;/pre&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Less" path=""><inspection shortName="LessUnresolvedVariable" defaultSeverity="WARNING" displayName="Unresolved variable" enabled="true" language="LESS" pluginId="org.jetbrains.plugins.less" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a reference to a &lt;a href="http://lesscss.org/features/#variables-feature"&gt;Less variable&lt;/a&gt; that is not resolved.
&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
* {
  margin: @unknown-var;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="LessResolvedByNameOnly" defaultSeverity="WEAK WARNING" displayName="Missing import" enabled="true" language="LESS" pluginId="org.jetbrains.plugins.less" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a reference to a variable or mixin that is declared in another file, which is not explicitly
&lt;a href="http://lesscss.org/features/#import-atrules-feature"&gt;imported&lt;/a&gt; in the current file.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
* {
  margin: @var-in-other-file;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="LessUnresolvedMixin" defaultSeverity="WARNING" displayName="Unresolved mixin" enabled="true" language="LESS" pluginId="org.jetbrains.plugins.less" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a reference to a &lt;a href="http://lesscss.org/features/#mixins-feature"&gt;Less mixin&lt;/a&gt; that is not resolved.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
* {
  .unknown-mixin();
}
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="YAML" path=""><inspection shortName="YAMLDuplicatedKeys" defaultSeverity="ERROR" displayName="Duplicated YAML keys" enabled="true" language="yaml" pluginId="org.jetbrains.plugins.yaml" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports duplicated keys in YAML files.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  same_key: some value
  same_key: another value
&lt;/code&gt;&lt;/pre&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="YAMLSchemaDeprecation" defaultSeverity="WEAK WARNING" displayName="Deprecated YAML key" enabled="true" language="yaml" pluginId="org.jetbrains.plugins.yaml" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports deprecated keys in YAML files.
&lt;p&gt;Deprecation is checked only if there exists a JSON schema associated with the corresponding YAML file.&lt;/p&gt;
&lt;p&gt;Note that the deprecation mechanism is not defined in the JSON Schema specification yet,
and this inspection uses a non-standard &lt;code&gt;deprecationMessage&lt;/code&gt; extension.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Scheme deprecation example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  {
    "properties": {
      "SomeDeprecatedProperty": {
        "deprecationMessage": "Baz",
        "description": "Foo bar"
      }
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;b&gt;The following is an example with the corresponding warning:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  SomeDeprecatedProperty: some value
&lt;/code&gt;&lt;/pre&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="YAMLRecursiveAlias" defaultSeverity="ERROR" displayName="Recursive alias" enabled="true" language="yaml" pluginId="org.jetbrains.plugins.yaml" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports recursion in YAML aliases.
&lt;p&gt;Alias can't be recursive and be used inside the data referenced by a corresponding anchor.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  some_key: &amp;some_anchor
    sub_key1: value1
    sub_key2: *some_anchor
&lt;/code&gt;&lt;/pre&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="YAMLSchemaValidation" defaultSeverity="WARNING" displayName="Validation by JSON Schema" enabled="true" language="yaml" pluginId="org.jetbrains.plugins.yaml" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports inconsistencies between a YAML file and a JSON Schema if the schema is specified.
&lt;p&gt;&lt;b&gt;Scheme example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  {
    "properties": {
      "SomeNumberProperty": {
        "type": "number"
      }
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;b&gt;The following is an example with the corresponding warning:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  SomeNumberProperty: hello world
&lt;/code&gt;&lt;/pre&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="YAMLUnusedAnchor" defaultSeverity="WARNING" displayName="Unused anchor" enabled="true" language="yaml" pluginId="org.jetbrains.plugins.yaml" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports unused anchors.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  some_key: &amp;some_anchor
    key1: value1
&lt;/code&gt;&lt;/pre&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="YAMLIncompatibleTypes" defaultSeverity="WARNING" displayName="Suspicious type mismatch" enabled="true" language="yaml" pluginId="org.jetbrains.plugins.yaml" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a mismatch between a scalar value type in YAML file and types of the values in the similar positions.

&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
myElements:
  - value1
  - value2
  - false # &amp;lt;- reported, because it is a boolean value, while other values are strings
&lt;/code&gt;&lt;/pre&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="YAMLUnresolvedAlias" defaultSeverity="ERROR" displayName="Unresolved alias" enabled="true" language="yaml" pluginId="org.jetbrains.plugins.yaml" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports unresolved aliases in YAML files.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  some_key: *unknown_alias
&lt;/code&gt;&lt;/pre&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="General" path="JavaScript and TypeScript"><inspection shortName="JSMismatchedCollectionQueryUpdate" defaultSeverity="WARNING" displayName="Mismatched query and update of collection" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a collection of fields or variables whose contents are either queried and not updated
or updated and not queried. Such mismatched queries and updates are pointless
and may indicate either dead code or a typographical error.
&lt;p&gt;
Query methods are automatically detected, based on whether they return something, or a callback is passed to them.
Use the table below to specify which methods are update methods.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JSUnresolvedReference" defaultSeverity="WEAK WARNING" displayName="Unresolved reference" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an unresolved reference in JavaScript code. In TypeScript code, a problem is reported if the part of the reference before the dot is of the type &lt;code&gt;any&lt;/code&gt;.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JSReferencingMutableVariableFromClosure" defaultSeverity="WARNING" displayName="Referencing mutable variable from closure" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports access to outer mutable variables from functions. 
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  for (var i = 1; i &amp;lt;= 3; i++) {
    setTimeout(function() {
        console.log(i); // bad
    }, 0);
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JSDeprecatedSymbols" defaultSeverity="WEAK WARNING" displayName="Deprecated symbol used" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a usage of a deprecated function variable.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ES6ClassMemberInitializationOrder" defaultSeverity="WARNING" displayName="Use of possibly unassigned property in a static initializer" enabled="true" language="ECMAScript 6" pluginId="JavaScript" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a class member initializer which references another non-hoisted class member while the latter may be not initialized yet.
&lt;br/&gt;&lt;br/&gt;
Initialization of class members happens consequently for fields, so a field cannot reference another field that is declared later.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JSCommentMatchesSignature" defaultSeverity="WARNING" displayName="Mismatched JSDoc and function signature" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports mismatch between the names and the number of parameters within a JSDoc comment and the actual parameters of a function.
Suggests updating parameters in JSDoc comment.
&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
/**
 * @param height Height in pixels
 */
function sq(height, width) {} // width is not documented
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
/**
 * @param height Height in pixels
 * @param width
 */
function sq(height, width) {}
&lt;/code&gt;&lt;/pre&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JSMethodCanBeStatic" defaultSeverity="INFORMATION" displayName="Method can be made 'static'" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a class method that can be safely made &lt;code&gt;static&lt;/code&gt;.
A method can be &lt;code&gt;static&lt;/code&gt; if it does not reference any of its class' non-static methods
and non-static fields and is not overridden in a subclass.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  Use the first checkbox below to inspect only &lt;code&gt;private&lt;/code&gt;  methods.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JSLastCommaInObjectLiteral" defaultSeverity="WARNING" displayName="Unneeded last comma in object literal" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports usages of a trailing comma in object literals.

&lt;p&gt;The warning is reported only when the JavaScript language version is set to ECMAScript 5.1.&lt;/p&gt;

&lt;p&gt;Trailing commas in object literals are allowed by the specification, however, some browsers might throw an error when a trailing comma is used.&lt;/p&gt;

&lt;p&gt;You can configure formatting options for trailing commas in &lt;b&gt;Code Style&lt;/b&gt; | &lt;b&gt;JavaScript&lt;/b&gt; or &lt;b&gt;TypeScript&lt;/b&gt; | &lt;b&gt;Punctuation&lt;/b&gt;.&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JSJoinVariableDeclarationAndAssignment" defaultSeverity="INFORMATION" displayName="Variable declaration can be merged with the first assignment to the variable" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a variable that is declared without an initializer and is used much further in the code or in a single nested scope. Suggests moving the variable closer to its usages and joining it with the initializer expression.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ES6PreferShortImport" defaultSeverity="WARNING" displayName="Import can be shortened" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an ES6 import whose &lt;code&gt;from&lt;/code&gt; part can be shortened. Suggests importing the parent directory.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JSUnfilteredForInLoop" defaultSeverity="WARNING" displayName="Unfiltered for..in loop" enabled="false" language="JavaScript" pluginId="JavaScript" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports unfiltered &lt;code&gt;for-in&lt;/code&gt; loops.
&lt;br/&gt;&lt;br/&gt;
The use of this construct results in processing not only own properties of an object but properties from its prototype as well.
It may be unexpected in some specific cases, for example, in utility methods that copy or modify all properties
or when &lt;code&gt;Object&lt;/code&gt;'s prototype may be incorrectly modified.
For example, the following code will print &lt;b&gt;42&lt;/b&gt; and &lt;b&gt;myMethod&lt;/b&gt;:
&lt;br/&gt;&lt;br/&gt;
&lt;pre&gt;&lt;code&gt;
Object.prototype.myMethod = function myMethod() {};
let a = { foo: 42 };
for (let i in a) {
  console.log(a[i]);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Suggests replacing the whole loop with a &lt;code&gt;Object.keys()&lt;/code&gt; method or adding a &lt;code&gt;hasOwnProperty()&lt;/code&gt; check. After applying the quick-fix the code looks as follows:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
for (let i in a) {
  if (a.hasOwnProperty(i)) {
    console.log(a[i]);
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JSDuplicatedDeclaration" defaultSeverity="WARNING" displayName="Duplicate declaration" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports multiple declarations in a scope.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JSAnnotator" defaultSeverity="ERROR" displayName="ECMAScript specification is not followed" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports basic syntax issues and inconsistencies with language specification, such as invalid usages of keywords, usages of incompatible numeric format, or multiple parameters to getters/setters.
&lt;br&gt;
Generally, such errors must always be reported and shouldn't be disabled.
But in some cases, such as issues due to the dynamic nature of JavaScript, the use of not yet supported language features, or bugs in IDE's checker, it may be handy to disable reporting these very basic errors.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JSNonStrictModeUsed" defaultSeverity="WARNING" displayName="Non-strict mode used" enabled="false" language="JavaScript" pluginId="JavaScript" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a JavaScript file that is not in the &lt;code&gt;strict&lt;/code&gt; mode.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JSAccessibilityCheck" defaultSeverity="WARNING" displayName="Inaccessible @private and @protected members referenced" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a reference to a JavaScript member that is marked with a &lt;code&gt;@private&lt;/code&gt; or &lt;code&gt;@protected&lt;/code&gt; tag but
does not comply with visibility rules that these tags imply.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JSXSyntaxUsed" defaultSeverity="ERROR" displayName="JSX syntax used" enabled="false" language="JavaScript" pluginId="JavaScript" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a usage of a JSX tag in JavaScript code.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JSUnresolvedExtXType" defaultSeverity="WARNING" displayName="Unresolved Ext JS xtype" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an Ext JS &lt;code&gt;xtype&lt;/code&gt; reference that doesn't have a corresponding class.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JSClosureCompilerSyntax" defaultSeverity="WARNING" displayName="Incorrect usage of JSDoc tags" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports warnings implied by &lt;em&gt;Google Closure Compiler&lt;/em&gt; annotations including correct use of &lt;code&gt;@abstract&lt;/code&gt;, &lt;code&gt;@interface&lt;/code&gt;, and &lt;code&gt;@implements&lt;/code&gt; tags.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JSCheckFunctionSignatures" defaultSeverity="WEAK WARNING" displayName="Signature mismatch" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a JavaScript call expression where the arguments do not match the signature of the referenced function, including the types of arguments and their number.
Also, reports if the overloading function doesn't match the overloaded one in terms of parameters and return types.

&lt;p&gt;TypeScript code is ignored.&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="WebpackConfigHighlighting" defaultSeverity="WARNING" displayName="Webpack config compliance with JSON Schema" enabled="true" language="JavaScript" pluginId="intellij.webpack" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Validates options in  webpack config files (which name should start with `webpack`, e.g. `webpack.config.js`)
against &lt;a href="https://github.com/webpack/webpack/blob/master/schemas/WebpackOptions.json"&gt;webpack options schema&lt;/a&gt;.
&lt;br/&gt;&lt;br/&gt;
Disable this inspection to turn off validation and code completion inside the configuration object.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JSUnnecessarySemicolon" defaultSeverity="WARNING" displayName="Unnecessary semicolon" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an unneeded semicolon.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JSValidateTypes" defaultSeverity="WEAK WARNING" displayName="Type mismatch" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports incorrect type of: 
&lt;ul&gt;
  &lt;li&gt;a parameter in a function call&lt;/li&gt;
  &lt;li&gt;a return value&lt;/li&gt;
  &lt;li&gt;an assigned expression&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;TypeScript code is ignored.&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JSPrimitiveTypeWrapperUsage" defaultSeverity="WARNING" displayName="Primitive type object wrapper used" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an improper usage of a wrapper for primitive types or a property of a primitive type being
modified, as in the latter case the assigned value will be lost.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JSFileReferences" defaultSeverity="WARNING" displayName="Unresolved file reference" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an unresolved file reference in a JavaScript file, including CommonJS and AMD modules references.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JSUnresolvedLibraryURL" defaultSeverity="WARNING" displayName="Missed locally stored library for HTTP link" enabled="true" language="HTML" pluginId="JavaScript" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a URL of an external JavaScript library that is not associated with
any locally stored file. Suggests downloading the library.
Such association enables the IDE to provide proper code completion and navigation. 
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JSXUnresolvedComponent" defaultSeverity="WEAK WARNING" displayName="Unresolved JSX component" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an unresolved reference to a JSX component.
Suggests adding a missing import statement if the referenced component is defined in the project or its dependencies or creating a new component with this name.
&lt;p&gt;The template for a new component can be modified in Editor | File and Code Templates.&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ES6ShorthandObjectProperty" defaultSeverity="INFORMATION" displayName="Property can be replaced with shorthand" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an object property that can be converted to ES6 shorthand style and provides a quick-fix to do it.
&lt;!-- tooltip end --&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
var obj = {foo:foo}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After applying the quick-fix the code looks as follows:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
var obj = {foo}
&lt;/code&gt;&lt;/pre&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JSUndeclaredVariable" defaultSeverity="WEAK WARNING" displayName="Implicitly declared global JavaScript variable" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an implicit declaration of a global variable.
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  var aaa = 1; // good
  bbb = 2; // bad, if bbb is not declared with 'var' somewhere
&lt;/code&gt;&lt;/pre&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JSJQueryEfficiency" defaultSeverity="WARNING" displayName="JQuery selector can be optimized" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a duplicated jQuery selector that can be cached or a usage of an attribute or a pseudo-selector (optional).
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JSValidateJSDoc" defaultSeverity="WARNING" displayName="Syntax errors and unresolved references in JSDoc" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a syntax discrepancy in a documentation comment.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JSLastCommaInArrayLiteral" defaultSeverity="WARNING" displayName="Unneeded last comma in array literal" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a usage of a trailing comma in an array literal.

&lt;p&gt;The warning is reported only when the JavaScript language version is set to ECMAScript 5.1.&lt;/p&gt;

&lt;p&gt;Although trailing commas in arrays are allowed by the specification, some browsers may throw an error when a trailing comma is used.&lt;/p&gt;

&lt;p&gt;You can configure formatting options for trailing commas in &lt;b&gt;Code Style&lt;/b&gt; | &lt;b&gt;JavaScript&lt;/b&gt; or &lt;b&gt;TypeScript&lt;/b&gt; | &lt;b&gt;Punctuation&lt;/b&gt;. &lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ES6DestructuringVariablesMerge" defaultSeverity="WEAK WARNING" displayName="Destructuring properties with the same key" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports multiple destructuring properties with identical keys. Suggests merging the properties.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ES6RedundantNestingInTemplateLiteral" defaultSeverity="WEAK WARNING" displayName="Redundant nesting in template literal" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports nested instances of a string or a template literal. Suggests inlining the nested instances into the containing template string.
&lt;!-- tooltip end --&gt;
&lt;p&gt;Example: &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
let a = `Hello, ${`Brave ${"New"}`} ${"World"}!`
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After applying the quick-fix the code looks as follows:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
let a = `Hello, Brave New World!`
&lt;/code&gt;&lt;/pre&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Imports and dependencies" path="JavaScript and TypeScript"><inspection shortName="JSUrlImportUsage" defaultSeverity="INFORMATION" displayName="URL import is used" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Checks used URL imports in the JavaScript language.
Suggests downloading the module for the specified remote URL.
Such association enables the IDE to provide proper code completion and navigation.
&lt;br/&gt;
&lt;br/&gt;
URLs in import specifiers are supported only for ECMAScript modules in the JavaScript language.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PackageJsonMismatchedDependency" defaultSeverity="WARNING" displayName="Mismatched dependencies in package.json" enabled="true" language="JSON" pluginId="JavaScript" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a dependency from package.json that is not installed or doesn't match the specified &lt;a href="https://docs.npmjs.com/about-semantic-versioning"&gt;version range&lt;/a&gt;.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="NpmUsedModulesInstalled" defaultSeverity="WEAK WARNING" displayName="Missing module dependency" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a module from a &lt;code&gt;require()&lt;/code&gt; call or an &lt;code&gt;import&lt;/code&gt; statement that is not installed or is not listed in package.json dependencies.
&lt;p&gt;Suggests installing the module and/or including it into package.json.&lt;/p&gt;
&lt;p&gt;For &lt;code&gt;require()&lt;/code&gt; calls, works only in the files from the scope of &lt;em&gt;Node.js Core&lt;/em&gt; JavaScript library.&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JSXNamespaceValidation" defaultSeverity="INFORMATION" displayName="Missing JSX namespace" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a usage of a JSX construction without importing namespace.
Having the namespace in the file scope ensures proper code compilation.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ES6UnusedImports" defaultSeverity="WARNING" displayName="Unused import" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a redundant &lt;code&gt;import&lt;/code&gt; statement.
This is usually the case if the imported symbols are not used in the source file.
To avoid side-effects, consider using bare import &lt;code&gt;import 'packageName'&lt;/code&gt; instead of the regular one.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="UpdateDependencyToLatestVersion" defaultSeverity="INFORMATION" displayName="Update package.json dependencies to latest versions" enabled="true" language="JSON" pluginId="JavaScript" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Suggests to upgrade your package.json dependencies to the latest versions, ignoring specified versions.
&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Internationalization" path=""><inspection shortName="NonAsciiCharacters" defaultSeverity="WARNING" displayName="Non-ASCII characters" enabled="true" pluginId="com.intellij" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports code elements that use non-ASCII symbols in an unusual context.

&lt;p&gt;Example:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Non-ASCII characters used in identifiers, strings, or comments.&lt;/li&gt;
  &lt;li&gt;Identifiers written in different languages, such as &lt;code&gt;my&lt;b&gt;С&lt;/b&gt;ollection&lt;/code&gt; with the
    letter &lt;code&gt;&lt;b&gt;C&lt;/b&gt;&lt;/code&gt; written in Cyrillic.&lt;/li&gt;
  &lt;li&gt;Comments or strings containing Unicode symbols, such as long dashes and arrows.&lt;/li&gt;
&lt;/ul&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="LossyEncoding" defaultSeverity="WARNING" displayName="Lossy encoding" enabled="true" pluginId="com.intellij" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;

Reports characters that cannot be displayed because of the current document encoding.
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;If you type international characters in a document with the &lt;b&gt;US-ASCII&lt;/b&gt; charset, some characters will be lost on save.&lt;/li&gt;
  &lt;li&gt;If you load a &lt;b&gt;UTF-8&lt;/b&gt;-encoded file using the &lt;b&gt;ISO-8859-1&lt;/b&gt; one-byte charset, some characters will be displayed incorrectly.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can fix this by changing the file encoding
either by specifying the encoding directly in the file, e.g. by editing &lt;code&gt;encoding=&lt;/code&gt; attribute in the XML prolog of XML file,
  or by changing the corresponding options in &lt;b&gt;Settings | Editor | File Encodings&lt;/b&gt;.&lt;/p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Code quality tools" path="CSS"><inspection shortName="Stylelint" defaultSeverity="ERROR" displayName="Stylelint" enabled="false" language="CSS" pluginId="JavaScript" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a discrepancy detected by the &lt;a href="http://stylelint.io"&gt;Stylelint&lt;/a&gt; linter.
&lt;!-- tooltip end --&gt;
&lt;br/&gt;&lt;br/&gt;
The highlighting is based on the rule severity specified in the &lt;a href="https://stylelint.io/user-guide/configure"&gt;Stylelint configuration file&lt;/a&gt; for each individual rule.
&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Function metrics" path="JavaScript and TypeScript"><inspection shortName="ThreeNegationsPerFunctionJS" defaultSeverity="WARNING" displayName="Function with more than three negations" enabled="false" language="JavaScript" pluginId="JavaScript" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a function with three or more negation operations (&lt;code&gt;!&lt;/code&gt; or &lt;code&gt;!=&lt;/code&gt;).
Such functions may be unnecessarily confusing.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="FunctionWithMultipleLoopsJS" defaultSeverity="WARNING" displayName="Function with multiple loops" enabled="false" language="JavaScript" pluginId="JavaScript" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a function with multiple loop statements.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ParametersPerFunctionJS" defaultSeverity="WARNING" displayName="Function with too many parameters" enabled="false" language="JavaScript" pluginId="JavaScript" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a function with too many parameters.
Such functions often indicate problems with design.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  Use the field below to specify the maximum acceptable number of parameters for a function.

&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="NestingDepthJS" defaultSeverity="WARNING" displayName="Overly nested function" enabled="false" language="JavaScript" pluginId="JavaScript" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a function whose body contains statements that are too deeply nested within other statements.
Such functions may be confusing and indicate that refactoring may be necessary.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  Use the field provided below to specify the maximum acceptable nesting depth allowed in a function.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="StatementsPerFunctionJS" defaultSeverity="WARNING" displayName="Overly long function" enabled="false" language="JavaScript" pluginId="JavaScript" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an overly long function.
Function length is calculated by counting up the number of non-empty statements in the function.
Functions that are too long are error-prone and difficult to test.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  Use the field below to specify the maximum acceptable number of statements in a function.

&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="FunctionWithMultipleReturnPointsJS" defaultSeverity="WARNING" displayName="Function with multiple return points" enabled="false" language="JavaScript" pluginId="JavaScript" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a function with multiple return points.
Such functions are hard to understand and maintain.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="CyclomaticComplexityJS" defaultSeverity="WARNING" displayName="Overly complex function" enabled="false" language="JavaScript" pluginId="JavaScript" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a function with too many branching points in a function (too high cyclomatic complexity). Such functions
may be confusing and hard to test.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  Use the field provided below to specify the maximum acceptable cyclomatic complexity for a function.

&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Potentially confusing code constructs" path="JavaScript and TypeScript"><inspection shortName="EmptyStatementBodyJS" defaultSeverity="WARNING" displayName="Statement with empty body" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an &lt;code&gt;if&lt;/code&gt;, &lt;code&gt;while&lt;/code&gt;, &lt;code&gt;for&lt;/code&gt;, or &lt;code&gt;with&lt;/code&gt; statement with an empty body. Such statements often result from typos, and may cause confusion.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  Use the checkbox below to specify whether the statements with empty block statements as bodies 
should be reported.
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ConfusingFloatingPointLiteralJS" defaultSeverity="WARNING" displayName="Confusing floating point literal" enabled="false" language="JavaScript" pluginId="JavaScript" pluginVersion="233.13135.108" isGlobalTool="false">&lt;!-- Copied from community/plugins/InspectionGadgets/src/inspectionDescriptions/ConfusingFloatingPointLiteral.html --&gt;
&lt;html&gt;
&lt;body&gt;
Reports any floating point number that does not have a decimal point, or any numbers before the decimal point,
or and numbers after the decimal point. Such literals may be confusing, and violate several coding standards.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="NegatedConditionalExpressionJS" defaultSeverity="WARNING" displayName="Negated conditional expression" enabled="false" language="JavaScript" pluginId="JavaScript" pluginVersion="233.13135.108" isGlobalTool="false">&lt;!-- Copied from community/plugins/InspectionGadgets/src/inspectionDescriptions/NegatedConditional.html --&gt;
&lt;html&gt;
&lt;body&gt;
Reports a conditional expression whose condition is negated.
Suggests flipping the order of branches in the conditional expression to increase the clarity of the statement.
Example: &lt;code&gt;!condition ? 2 : 1&lt;/code&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="CallerJS" defaultSeverity="WARNING" displayName="Use of 'caller' property" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a usage of the &lt;code&gt;caller&lt;/code&gt; property in a JavaScript function.
Using this property to access the stack frame of the calling method can be extremely confusing and result in subtle bugs.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="NestedFunctionJS" defaultSeverity="WARNING" displayName="Nested function" enabled="false" language="JavaScript" pluginId="JavaScript" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a function nested inside another function.
Although JavaScript allows functions to be nested, such constructs may be confusing.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  Use the checkbox below to ignore anonymous nested functions.
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="MagicNumberJS" defaultSeverity="WARNING" displayName="Magic number" enabled="false" language="JavaScript" pluginId="JavaScript" pluginVersion="233.13135.108" isGlobalTool="false">&lt;!-- Copied from community/plugins/InspectionGadgets/src/inspectionDescriptions/MagicNumber.html --&gt;
&lt;html&gt;
&lt;body&gt;
Reports a "magic number" that is a numeric literal used without being named by a constant declaration.
Magic numbers can result in code whose intention is unclear, and may result in errors if a magic
number is changed in one code location but remains unchanged in another. The numbers 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 100, 1000,
0.0 and 1.0 are ignored.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="BlockStatementJS" defaultSeverity="WARNING" displayName="Unnecessary block statement" enabled="false" language="JavaScript" pluginId="JavaScript" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a block statement that is not used as the body of &lt;code&gt;if&lt;/code&gt;, &lt;code&gt;for&lt;/code&gt;,
&lt;code&gt;while&lt;/code&gt;, &lt;code&gt;do&lt;/code&gt;, &lt;code&gt;with&lt;/code&gt;, or &lt;code&gt;try&lt;/code&gt; statements, or as the
body of a function declaration. Starting from ECMAScript 6, JavaScript blocks introduce new scopes for &lt;code&gt;let&lt;/code&gt; and &lt;code&gt;const&lt;/code&gt; variables,
but still free-standing block statements may be confusing and result in subtle bugs when used with &lt;code&gt;var&lt;/code&gt; variables.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="OverlyComplexBooleanExpressionJS" defaultSeverity="WARNING" displayName="Overly complex boolean expression" enabled="false" language="JavaScript" pluginId="JavaScript" pluginVersion="233.13135.108" isGlobalTool="false">&lt;!-- Copied from community/plugins/InspectionGadgets/src/inspectionDescriptions/OverlyComplexBooleanExpression.html --&gt;
&lt;html&gt;
&lt;body&gt;
Reports a boolean expression with too many terms. Such expressions may be confusing and bug-prone.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  Use the field below to specify the maximum number of terms allowed in an arithmetic expression.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="OverlyComplexArithmeticExpressionJS" defaultSeverity="WARNING" displayName="Overly complex arithmetic expression" enabled="false" language="JavaScript" pluginId="JavaScript" pluginVersion="233.13135.108" isGlobalTool="false">&lt;!-- Copied from community/plugins/InspectionGadgets/src/inspectionDescriptions/OverlyComplexArithmeticExpression.html --&gt;
&lt;html&gt;
&lt;body&gt;
Reports an arithmetic expression with too many terms. Such expressions may be confusing and bug-prone.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  Use the field below to specify the maximum number of terms allowed in an arithmetic expression.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PointlessArithmeticExpressionJS" defaultSeverity="WARNING" displayName="Pointless arithmetic expression" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an arithmetic expression that include adding or subtracting zero, multiplying by
zero or one, division by one, and shift by zero. Such expressions may result from not fully completed automated refactoring.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="NegatedIfStatementJS" defaultSeverity="WARNING" displayName="Negated 'if' statement" enabled="false" language="JavaScript" pluginId="JavaScript" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;b&gt;if&lt;/b&gt; statements which have an &lt;b&gt;else&lt;/b&gt; branch and a negated condition.
Flipping the order of the &lt;b&gt;if&lt;/b&gt; and &lt;b&gt;else&lt;/b&gt;
branches will usually increase the clarity of such statements.
&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="IncrementDecrementResultUsedJS" defaultSeverity="WARNING" displayName="Result of increment or decrement used" enabled="false" language="JavaScript" pluginId="JavaScript" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an increment (&lt;code&gt;++&lt;/code&gt;) or decrement
(&lt;code&gt;--&lt;/code&gt;) expression where the result of the assignment is
used in a containing expression. Such assignments can result in confusion due to the order
of operations, as evaluation of the assignment may affect the outer expression in unexpected
ways. Example: &lt;code&gt;var a = b++&lt;/code&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="NestedConditionalExpressionJS" defaultSeverity="WARNING" displayName="Nested conditional expression" enabled="false" language="JavaScript" pluginId="JavaScript" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a ternary conditional expression within another ternary condition.
Such nested conditionals may be extremely confusing, and best replaced by more explicit conditional
logic.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ConfusingPlusesOrMinusesJS" defaultSeverity="WARNING" displayName="Confusing sequence of '+' or '-'" enabled="false" language="JavaScript" pluginId="JavaScript" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a suspicious combination of &lt;code&gt;+&lt;/code&gt; or &lt;code&gt;-&lt;/code&gt;
characters in JavaScript code (for example, &lt;code&gt;a+++b&lt;/code&gt;.  Such sequences are confusing,
and their semantics may change through changes in the whitespace.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="DynamicallyGeneratedCodeJS" defaultSeverity="WARNING" displayName="Execution of dynamically generated code" enabled="false" language="JavaScript" pluginId="JavaScript" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a call of the &lt;code&gt;eval()&lt;/code&gt;, &lt;code&gt;setTimeout()&lt;/code&gt;,
or &lt;code&gt;setInterval()&lt;/code&gt; function or an allocation of a &lt;code&gt;Function&lt;/code&gt;
object.  These functions are used to execute arbitrary strings of JavaScript text, which often
dynamically generated.  This can be very confusing, and may be a security risk.
&lt;br/&gt;&lt;br/&gt;
Ignores the cases when a callback function is provided to these methods statically, without code generation.
&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Quality tools" path="PHP"><inspection shortName="PhpStanGlobal" defaultSeverity="WEAK WARNING" displayName="PHPStan validation" enabled="false" language="PHP" pluginId="com.intellij.php.tools.quality.phpstan" pluginVersion="233.13135.108" isGlobalTool="true">&lt;html&gt;
&lt;body&gt;
&lt;div&gt;
  Runs PHPStan to find code problems.
  &lt;br/&gt;&lt;br/&gt;
  The inspection requires PHPStan to be properly installed and set up in the IDE under
  &lt;a href="settings://settings.php.quality.tools?PHPStan"&gt;Settings | PHP | Quality Tools | PHPStan&lt;/a&gt;.
  &lt;p&gt;To learn more about installing PHPStan, see:
    &lt;a href="https://phpstan.org/user-guide/getting-started"&gt;https://phpstan.org/user-guide/getting-started&lt;/a&gt;
&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpCSFixerValidationInspection" defaultSeverity="WEAK WARNING" displayName="PHP CS Fixer validation" enabled="false" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports coding style problems detected by PHP CS Fixer.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  The inspection requires PHP CS Fixer to be properly installed and set up in the IDE under
  &lt;a href="settings://settings.php.quality.tools?CS%20Fixer"&gt;Settings | PHP | Quality Tools | PHP CS Fixer&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
  To learn more about installing PHP CS Fixer, see &lt;a href="https://github.com/FriendsOfPHP/PHP-CS-Fixer#installation"&gt;PHP-CS-Fixer installation (GitHub)&lt;/a&gt;.
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PsalmGlobal" defaultSeverity="WEAK WARNING" displayName="Psalm validation" enabled="false" language="PHP" pluginId="com.intellij.php.psalm" pluginVersion="233.13135.108" isGlobalTool="true">&lt;html&gt;
&lt;body&gt;
&lt;div&gt;
  Runs Psalm to find code problems.
  &lt;br/&gt;&lt;br/&gt;
  The inspection requires Psalm to be properly installed and set up in the IDE under
  &lt;a href="settings://settings.php.quality.tools?Psalm"&gt;Settings | PHP | Quality Tools | Psalm&lt;/a&gt;.
  &lt;p&gt;To learn more about installing Psalm, see:
    &lt;a href="https://psalm.dev/docs/running_psalm/installation/"&gt;https://psalm.dev/docs/running_psalm/installation/&lt;/a&gt;
&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="LaravelPintValidationInspection" defaultSeverity="WEAK WARNING" displayName="Laravel Pint validation" enabled="false" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the coding style problems detected by Laravel Pint.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  The inspection requires Laravel Pint to be properly installed and set up in the IDE under
  &lt;a href="settings://settings.php.quality.tools?Laravel%20Pint"&gt;Settings | PHP | Quality Tools | Laravel Pint&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
  To learn more about Laravel Pint installation, see &lt;a href="https://laravel.com/docs/10.x/pint#installation"&gt;Laravel Pint&lt;/a&gt;.
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="MessDetectorValidationInspection" defaultSeverity="WEAK WARNING" displayName="PHP Mess Detector validation" enabled="false" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports coding style problems detected by PHP Mess Detector.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  The inspection requires PHP Mess Detector to be properly installed and set up in the IDE under
  &lt;a href="settings://settings.php.quality.tools?Mess%20Detector"&gt;Settings | PHP | Quality Tools | Mess Detector&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
  To learn more about installing PHP Mess Detector, see &lt;a href="https://phpmd.org/download/index.html"&gt;PHP Mess Detector installation (phpmd.org)&lt;/a&gt; for details.
&lt;/p&gt;
&lt;p&gt;
  You can use a predefined set of rules or add your own by specifying valid &lt;i&gt;ruleset.xml&lt;/i&gt; files. See the &lt;a href="https://phpmd.org/rules/index.html"&gt;rules index (phpmd.org)&lt;/a&gt; and &lt;a href="https://phpmd.org/documentation/creating-a-ruleset.html"&gt;How to create a custom rule set (phpmd.org)&lt;/a&gt; for details.
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpCSValidationInspection" defaultSeverity="WEAK WARNING" displayName="PHP_CodeSniffer validation" enabled="false" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports coding style problems detected by PHP_CodeSniffer.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  The inspection requires PHP_CodeSniffer to be properly installed and set up in the IDE under
  &lt;a href="settings://settings.php.quality.tools?PHP_CodeSniffer"&gt;Settings | PHP | Quality Tools | PHP_CodeSniffer&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
  To learn more about installing PHP_CodeSniffer, see &lt;a
    href="https://github.com/squizlabs/PHP_CodeSniffer#installation"&gt;PHP_CodeSniffer installation (GitHub)&lt;/a&gt;.
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Invalid elements" path="CSS"><inspection shortName="CssInvalidAtRule" defaultSeverity="ERROR" displayName="Unknown at-rule" enabled="true" language="CSS" pluginId="com.intellij.css" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an unknown &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/At-rule"&gt;CSS at-rule&lt;/a&gt;.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="CssNegativeValue" defaultSeverity="ERROR" displayName="Negative property value" enabled="true" language="CSS" pluginId="com.intellij.css" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a negative value of a CSS property that is not expected to be less than zero, for example, object width or height.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="CssUnresolvedClassInComposesRule" defaultSeverity="ERROR" displayName="Unresolved class in 'composes' rule" enabled="true" language="CSS" pluginId="com.intellij.css" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a CSS class reference in the &lt;a href="https://github.com/css-modules/css-modules#composition"&gt;'composes'&lt;/a&gt;
rule that cannot be resolved to any valid target.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  .className {/* ... */}

  .otherClassName {
    composes: className;
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="CssInvalidHtmlTagReference" defaultSeverity="WARNING" displayName="Invalid type selector" enabled="true" language="CSS" pluginId="com.intellij.css" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a CSS &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Type_selectors"&gt;type selector&lt;/a&gt; that matches an unknown HTML element.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="CssUnknownTarget" defaultSeverity="ERROR" displayName="Unresolved file reference" enabled="true" language="CSS" pluginId="com.intellij.css" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an unresolved file reference, for example, an incorrect path in an &lt;code&gt;@import&lt;/code&gt; statement.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="CssUnknownUnit" defaultSeverity="ERROR" displayName="Unknown unit" enabled="true" language="CSS" pluginId="com.intellij.css" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an unknown unit.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="CssInvalidCustomPropertyAtRuleName" defaultSeverity="ERROR" displayName="Invalid @property name" enabled="true" language="CSS" pluginId="com.intellij.css" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an invalid custom property name. Custom property name should be prefixed with two dashes.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
@property invalid-property-name {
  ...
}

@property --valid-property-name {
  ...
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="CssInvalidMediaFeature" defaultSeverity="ERROR" displayName="Invalid media feature" enabled="true" language="CSS" pluginId="com.intellij.css" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an unknown &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Media_Queries/Using_media_queries"&gt;CSS media feature&lt;/a&gt;
or an incorrect media feature value.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="CssInvalidImport" defaultSeverity="WARNING" displayName="Misplaced @import" enabled="true" language="CSS" pluginId="com.intellij.css" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a misplaced &lt;code&gt;@import&lt;/code&gt; statement.
&lt;p&gt;
  According to the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/@import"&gt;specification&lt;/a&gt;,
  &lt;code&gt;@import&lt;/code&gt; rules must precede all other types of rules, except &lt;code&gt;@charset&lt;/code&gt; rules.
&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="CssUnknownProperty" defaultSeverity="WARNING" displayName="Unknown property" enabled="true" language="CSS" pluginId="com.intellij.css" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an unknown CSS property or a property used in a wrong context.
&lt;!-- tooltip end --&gt;
&lt;p&gt;Add the unknown property to the 'Custom CSS properties' list to skip validation.&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="CssInvalidFunction" defaultSeverity="ERROR" displayName="Invalid function" enabled="true" language="CSS" pluginId="com.intellij.css" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an unknown &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Functions"&gt;CSS function&lt;/a&gt; or an incorrect function parameter.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="CssInvalidCustomPropertyAtRuleDeclaration" defaultSeverity="ERROR" displayName="Invalid @property declaration" enabled="true" language="CSS" pluginId="com.intellij.css" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a missing required &lt;a href="https://developer.mozilla.org/en-US/docs/web/css/@property/syntax"&gt;syntax&lt;/a&gt;, &lt;a href="https://developer.mozilla.org/en-US/docs/web/css/@property/inherits"&gt;inherits&lt;/a&gt;, or &lt;a href="https://developer.mozilla.org/en-US/docs/web/css/@property/initial-value"&gt;initial-value&lt;/a&gt; property in a declaration of a custom property.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="CssUnresolvedCustomProperty" defaultSeverity="ERROR" displayName="Unresolved custom property" enabled="true" language="CSS" pluginId="com.intellij.css" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an unresolved reference to a &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/--*"&gt;custom property&lt;/a&gt;
among the arguments of the &lt;code&gt;var()&lt;/code&gt; function.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="CssInvalidCharsetRule" defaultSeverity="WARNING" displayName="Misplaced or incorrect @charset" enabled="true" language="CSS" pluginId="com.intellij.css" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a misplaced &lt;code&gt;@charset&lt;/code&gt; at-rule or an incorrect charset value.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="CssInvalidPropertyValue" defaultSeverity="ERROR" displayName="Invalid property value" enabled="true" language="CSS" pluginId="com.intellij.css" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an incorrect CSS property value.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="CssInvalidPseudoSelector" defaultSeverity="ERROR" displayName="Invalid pseudo-selector" enabled="true" language="CSS" pluginId="com.intellij.css" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an incorrect CSS &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes"&gt;pseudo-class&lt;/a&gt;
&lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-elements"&gt;pseudo-element&lt;/a&gt;.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="CssInvalidNestedSelector" defaultSeverity="WARNING" displayName="Invalid nested selector" enabled="false" language="CSS" pluginId="com.intellij.css" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a nested selector starting with an identifier or a functional notation.
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Probable bugs" path="JavaScript and TypeScript"><inspection shortName="JSIncompatibleTypesComparison" defaultSeverity="WEAK WARNING" displayName="Comparison of expressions having incompatible types" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a comparison with operands of incompatible types or an operand with a type without possible common values.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JSPotentiallyInvalidTargetOfIndexedPropertyAccess" defaultSeverity="WARNING" displayName="Possibly incorrect target of indexed property access" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a potentially invalid indexed property access, for example, &lt;code&gt;Array[1]&lt;/code&gt;.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JSSuspiciousNameCombination" defaultSeverity="WARNING" displayName="Suspicious variable/parameter name combination" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="233.13135.108" isGlobalTool="false">&lt;!-- Copied from community/java/java-impl/src/inspectionDescriptions/SuspiciousNameCombination.html --&gt;
&lt;html&gt;
&lt;body&gt;
Reports an assignment or a function call where the name of the target variable or the function parameter does not match the name of the value assigned to it.
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  &lt;b&gt;var&lt;/b&gt; x = 0;
  &lt;b&gt;var&lt;/b&gt; y = x;
&lt;/code&gt;&lt;/pre&gt;
or
&lt;pre&gt;&lt;code&gt;
  &lt;b&gt;var&lt;/b&gt; x = 0, y = 0;
  &lt;b&gt;var&lt;/b&gt; rc = &lt;b&gt;new&lt;/b&gt; Rectangle(y, x, 20, 20);
&lt;/code&gt;&lt;/pre&gt;
Here the inspection guesses that &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; are mixed up.
&lt;!-- tooltip end --&gt;
&lt;p&gt;Specify the names that should not be used together. An error is reported
  if a parameter name or an assignment target name contains words from one group while the name of the assigned or passed
  variable contains words from another group.&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="DivideByZeroJS" defaultSeverity="WARNING" displayName="Division by zero" enabled="false" language="JavaScript" pluginId="JavaScript" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports division by zero or a remainder by zero.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JSComparisonWithNaN" defaultSeverity="WARNING" displayName="Comparison with NaN" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a comparison with NaN. Comparisons like &lt;code&gt;expr == NaN&lt;/code&gt; or &lt;code&gt;expr === NaN&lt;/code&gt; are always evaluated to &lt;code&gt;false&lt;/code&gt;.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="InfiniteRecursionJS" defaultSeverity="WARNING" displayName="Infinite recursion" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a function which must either recurse
infinitely or throw an exception. Such functions may not return normally.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JSPotentiallyInvalidConstructorUsage" defaultSeverity="WARNING" displayName="Potentially invalid constructor usage" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a usage of a potentially invalid constructor function, for example: a function that is not a constructor after &lt;code&gt;new&lt;/code&gt;, using
a constructor's prototype or calling a constructor without &lt;code&gt;new&lt;/code&gt;. A constructor function is assumed to have an upper case name (optional) or have an explicit JSDoc &lt;code&gt;@constructor&lt;/code&gt; tag.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JSSuspiciousEqPlus" defaultSeverity="WARNING" displayName="Suspicious '=+' assignment" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an assignment in the form &lt;code&gt;a =+ b&lt;/code&gt;.
Suggests replacing with &lt;code&gt;a += b&lt;/code&gt;.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ObjectAllocationIgnoredJS" defaultSeverity="WARNING" displayName="Result of object allocation ignored" enabled="false" language="JavaScript" pluginId="JavaScript" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports object allocation where the result of the allocated object is ignored, for example, &lt;code&gt;new Error();&lt;/code&gt; as a statement, without any assignment.
Such allocation expressions may  indicate an odd object initialization strategy. 
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ForLoopThatDoesntUseLoopVariableJS" defaultSeverity="WARNING" displayName="'for' loop where update or condition does not use loop variable" enabled="false" language="JavaScript" pluginId="JavaScript" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a &lt;code&gt;for&lt;/code&gt; loop where the condition or update does not use the &lt;code&gt;for&lt;/code&gt; loop variable.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JSEqualityComparisonWithCoercion" defaultSeverity="WARNING" displayName="Equality operator may cause type coercion" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a usage of an equality operator that may cause unexpected type coercions.
Suggests replacing  &lt;code&gt;==&lt;/code&gt; and &lt;code&gt;!=&lt;/code&gt; with type-safe equality operators &lt;code&gt;===&lt;/code&gt; and &lt;code&gt;!==&lt;/code&gt;.
&lt;p&gt;Depending on the option selected, one of the following cases will be reported:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
    All usages of &lt;code&gt;==&lt;/code&gt; and &lt;code&gt;!=&lt;/code&gt; operators.
  &lt;/li&gt;
  &lt;li&gt;
    All usages except comparison with null. Some code styles allow using &lt;code&gt;x == null&lt;/code&gt; as a replacement for
    &lt;code&gt;x === null || x === undefined&lt;/code&gt;.
  &lt;/li&gt;
  &lt;li&gt;
    Only suspicious expressions, such as: &lt;code&gt;==&lt;/code&gt; or &lt;code&gt;!=&lt;/code&gt; comparisons
    with &lt;code&gt;0&lt;/code&gt;, &lt;code&gt;''&lt;/code&gt;,
    &lt;code&gt;null&lt;/code&gt;, &lt;code&gt;true&lt;/code&gt;,
    &lt;code&gt;false&lt;/code&gt;, or &lt;code&gt;undefined&lt;/code&gt;.
  &lt;/li&gt;
&lt;/ul&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JSVoidFunctionReturnValueUsed" defaultSeverity="WARNING" displayName="Void function return value used" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a return value of a function that doesn't return anything.
Calling of such functions always produces an &lt;code&gt;undefined&lt;/code&gt; value and such assignment may indicate an error. &lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
let a = console.log('foo');
&lt;/code&gt;&lt;/pre&gt;
&lt;br/&gt;
The following usages are ignored:
&lt;ul&gt;
  &lt;li&gt;Inside a return statement&lt;/li&gt;
  &lt;li&gt;In some binary operations&lt;/li&gt;
  &lt;li&gt;For overridden non-void functions&lt;/li&gt;
&lt;/ul&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JSPotentiallyInvalidUsageOfThis" defaultSeverity="WARNING" displayName="Potentially invalid reference to 'this' from closure" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a &lt;code&gt;this&lt;/code&gt; in closure that is used for referencing properties of outer context. &lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
function Outer() {
  this.outerProp = 1;
  function inner() {
    // bad, because 'outerProp' of Outer
    // won't be updated here
    // on calling 'new Outer()' as may be expected
    this.outerProp = 2;
  }
  inner();
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JSPotentiallyInvalidUsageOfClassThis" defaultSeverity="WARNING" displayName="Potentially invalid reference to 'this' of a class from closure" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an attempt to reference a member of an ECMAScript class via the &lt;code&gt;this.&lt;/code&gt; qualifier in a nested function that is not a lambda.&lt;br/&gt;
&lt;code&gt;this&lt;/code&gt; in a nested function that is not a lambda is the function's own &lt;code&gt;this&lt;/code&gt; and doesn't relate to the outer class.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JSTypeOfValues" defaultSeverity="WARNING" displayName="'typeof' comparison with non-standard value" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a comparison of a &lt;code&gt;typeof&lt;/code&gt; expression with a literal string which is not one of the standard types: &lt;code&gt;undefined&lt;/code&gt;, &lt;code&gt;object&lt;/code&gt;, &lt;code&gt;boolean&lt;/code&gt;, &lt;code&gt;number&lt;/code&gt;, &lt;code&gt;string&lt;/code&gt;, &lt;code&gt;function&lt;/code&gt;, or &lt;code&gt;symbol&lt;/code&gt;.
Such comparisons always return &lt;code&gt;false&lt;/code&gt;.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ES6BindWithArrowFunction" defaultSeverity="WARNING" displayName="Suspicious usage of 'bind' with arrow function" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports  &lt;code&gt;bind&lt;/code&gt; used together with an arrow function.&lt;br/&gt;
Because arrow functions use lexical &lt;code&gt;this&lt;/code&gt;,  a &lt;code&gt;bind&lt;/code&gt; call will have no effect on them.&lt;br/&gt;
See &lt;a href="https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Functions/Arrow_functions#Lexical_this"&gt;here&lt;/a&gt; for details.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JSConsecutiveCommasInArrayLiteral" defaultSeverity="WARNING" displayName="Consecutive commas in array literal" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a consecutive comma in an array literal. The skipped element accepts the &lt;code&gt;undefined&lt;/code&gt; value,
but it could be done unintentionally, for example, when commas are at the end of one line and at the beginning of the next one.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="InfiniteLoopJS" defaultSeverity="WARNING" displayName="Infinite loop statement" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a &lt;code&gt;for&lt;/code&gt;, &lt;code&gt;while&lt;/code&gt;, or &lt;code&gt;do&lt;/code&gt; statement which
can only exit by throwing an exception. Such statements often indicate coding errors.
&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="General" path="PHP"><inspection shortName="PhpStaticAsDynamicMethodCallInspection" defaultSeverity="WEAK WARNING" displayName="Static method called as dynamic" enabled="false" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports dynamic calls to static class methods.
&lt;!-- tooltip end --&gt;
&lt;p&gt;If the target has the magic method &lt;code&gt;__call&lt;/code&gt;, a separate inspection severity and highlighting level can be set.&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpHierarchyChecksInspection" defaultSeverity="ERROR" displayName="Class hierarchy checks" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Checks the classes' hierarchy: abstract methods implementation, the compatibility of implementing/overriding methods with their declarations in parent classes, and properties' types redeclarations.
  &lt;p&gt;All reported violations result in PHP fatal errors. It is not recommended disabling or suppressing this inspection.&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpParameterNameChangedDuringInheritanceInspection" defaultSeverity="WEAK WARNING" displayName="Parameter's name changed during inheritance" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
  &lt;body&gt;
    Reports the methods' parameters whose names differ from the same parameters defined in parent methods. Starting with PHP 8.0, such code can cause runtime errors.
  &lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpUnpackingArraysWithStringKeysInspection" defaultSeverity="ERROR" displayName="Unpacking arrays with string keys is forbidden for PHP &lt; 8.1" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports array unpacking with string keys in PHP &lt; 8.1
&lt;p&gt;
  See &lt;a href="https://wiki.php.net/rfc/array_unpacking_string_keys"&gt;Array unpacking with string keys&lt;/a&gt; for details.
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpReadonlyPropertyWrittenOutsideDeclarationScopeInspection" defaultSeverity="ERROR" displayName="Write access to 'readonly' property outside of declaration scope" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the write accesses to &lt;code&gt;readonly&lt;/code&gt; properties that are made outside the declaration scope. A declaration scope effectively means
non-static methods of the class in which a property is declared.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  See &lt;a href="https://wiki.php.net/rfc/readonly_properties_v2"&gt;Readonly properties (php.net)&lt;/a&gt; for details.
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpClassImplementsSolelyTraversableInspection" defaultSeverity="ERROR" displayName="Class can't implement Traversable directly" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the classes that are implementing the &lt;code&gt;Traversable&lt;/code&gt; interface alone, not as part of &lt;code&gt;Iterator&lt;/code&gt; or &lt;code&gt;IteratorAggregate&lt;/code&gt; interfaces.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  The &lt;code&gt;Traversable&lt;/code&gt; interface is an internal engine interface; it cannot be implemented in PHP scripts. See &lt;a href="https://www.php.net/manual/en/class.traversable.php"&gt;The Traversable interface (php.net)&lt;/a&gt; for details.
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpSymfonyAnnotationToAttributeInspection" defaultSeverity="INFORMATION" displayName="Symfony annotation can be replaced with attribute" enabled="true" language="PHP" pluginId="com.intellij" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Suggests replacing Symfony annotations with attributes.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpArgumentWithoutNamedIdentifierInspection" defaultSeverity="INFORMATION" displayName="Argument without name identifier" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports arguments without name identifiers.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpDeprecatedSerializableUsageInspection" defaultSeverity="WARNING" displayName="Deprecated 'Serializable' interface usage" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the usages of deprecated &lt;code&gt;Serializable&lt;/code&gt; interface.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  Starting from PHP 8.1, classes that are non-abstract, implement &lt;code&gt;Serializable&lt;/code&gt;, and do not implement &lt;code&gt;__serialize()&lt;/code&gt;
  and &lt;code&gt;__unserialize()&lt;/code&gt; will throw a deprecation warning.
&lt;/p&gt;
&lt;p&gt;
  See &lt;a href="https://wiki.php.net/rfc/custom_object_serialization"&gt;Phasing out Serializable (php.net)&lt;/a&gt; for details.
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpPromotedFieldUsageInspection" defaultSeverity="INFORMATION" displayName="Promoted property usage" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports properties declared through promoted constructor parameters.
&lt;p&gt;
  Using promoted properties is only possible since PHP 8.0. In earlier PHP versions, it leads to a parse error.
&lt;/p&gt;
&lt;p&gt;
  See &lt;a href="https://wiki.php.net/rfc/constructor_promotion"&gt;Constructor Property Promotion (php.net)&lt;/a&gt; for details.
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpNModifierCanBeReplacedWithNonCapturingGroupInspection" defaultSeverity="INFORMATION" displayName="'n' modifier can be replaced with non-capturing groups" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;code&gt;n&lt;/code&gt; PCRE modifier, that can be replaced with usage of non-capturing groups instead of capturing in regexp pattern.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpNamedArgumentUsageInspection" defaultSeverity="INFORMATION" displayName="Argument with name identifier" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;Reports arguments with name identifiers.&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpLanguageLevelInspection" defaultSeverity="ERROR" displayName="Language level" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
  Reports the language features used in source code that are not supported for the selected language level.
  &lt;p&gt;For example, union types can be used only in PHP 8.0 and later.&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpSecondWriteToReadonlyPropertyInspection" defaultSeverity="ERROR" displayName="Second write to 'readonly' property" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports reassignments of &lt;code&gt;readonly&lt;/code&gt; properties. Such properties cannot be modified after initialization.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  See &lt;a href="https://wiki.php.net/rfc/readonly_properties_v2"&gt;Readonly properties (php.net)&lt;/a&gt; for details.
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpTooLongMemberReferenceChainInspection" defaultSeverity="WEAK WARNING" displayName="Member reference chain is too long to analyze" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports method reference chains that are too long for IDE to analyze.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpNestedTernaryExpressionUsageInspection" defaultSeverity="ERROR" displayName="Nested ternary operator usage" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports nested ternary expressions, which are deprecated starting from PHP 7.4.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpDeprecationInspection" defaultSeverity="WEAK WARNING" displayName="Deprecated" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the usages of deprecated entities.
&lt;p&gt;
  In most cases, such usages should be removed or replaced with other constructs.
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpSuperClassIncompatibleWithInterfaceInspection" defaultSeverity="ERROR" displayName="Method declaration in parent class is incompatible with implemented interface" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
  Reports the methods declarations in parent classes that are incompatible with implemented interfaces.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpArrayIndexImmediatelyRewrittenInspection" defaultSeverity="WARNING" displayName="Array index is immediately rewritten " enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the write expressions on array indexes which are immediately overwritten before being accessed.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpAccessStaticViaInstanceInspection" defaultSeverity="WEAK WARNING" displayName="Class static member accessed via instance" enabled="false" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports references to static methods and fields via a class instance rather than the class itself.
&lt;p&gt;Even though referring to static members via instance variables is allowed by PHP,
  this makes the code confusing, as the reader may think that the result of the method depends on the instance.&lt;/p&gt;
&lt;p&gt;The quick-fix replaces the instance variable with the class name.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  class StaticClass {
    public static function someStaticFunction(): int
    {
        return 3;
    }

  }

  $var = new StaticClass
  $var::someStaticFunction();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  StaticClass::someStaticFunction()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpInternalEntityUsedInspection" defaultSeverity="WEAK WARNING" displayName="Usage of internal entity" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
  Reports the usages of the entities that are marked as &lt;code&gt;@internal&lt;/code&gt; and are located in different source roots. The usages located in the same source root are not reported.
  &lt;p&gt;
    In most cases, the reported usages should be removed or replaced with other constructs.
  &lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpDeprecatedImplodeUsageInspection" defaultSeverity="WARNING" displayName="Deprecated 'implode/join' usage" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports deprecated usage of the &lt;code&gt;implode&lt;/code&gt; and &lt;code&gt;join&lt;/code&gt; functions.
&lt;!-- tooltip end --&gt;
&lt;p&gt;Starting from PHP 7.4, using &lt;code&gt;implode&lt;/code&gt; and &lt;code&gt;join&lt;/code&gt; with an array as the first argument and a string as the second argument is deprecated.&lt;/p&gt;
&lt;p&gt;
  See &lt;a href="https://wiki.php.net/rfc/deprecations_php_7_4#implode_parameter_order_mix"&gt;Deprecations for PHP 7.4 (php.net)&lt;/a&gt; for details.
&lt;/p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpIgnoredClassAliasDeclaration" defaultSeverity="WEAK WARNING" displayName="Ignored class alias declaration" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the class alias declarations that are ignored by the IDE because the actual class declaration with the same FQN exists.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  The inspection is intended to clarify the IDE’s behavior in the cases when both the class and the class alias declarations are present.
  When several declarations with the same FQN exist, the IDE usually fails to choose a single one between them.
  This leads to incorrect code completion, erroneous type inference, and so on. Since the class declaration prevails
  over the class alias declaration, the latter becomes redundant and therefore ignored by the IDE.
&lt;/p&gt;
&lt;p&gt;
  Note that ignoring class alias declarations does not affect the behavior of the PHP interpreter.
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpElementIsNotAvailableInCurrentPhpVersionInspection" defaultSeverity="ERROR" displayName="Element is not available in configured PHP version" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the usages of entities which were introduced in PHP version later than configured one.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpDeprecatedStdLibCallInspection" defaultSeverity="WARNING" displayName="Deprecated Standard Library call" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the calls to Standard PHP Library functions that are deprecated starting from PHP 8.1.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  The following calls are reported:
&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;code&gt;key()&lt;/code&gt;, &lt;code&gt;current()&lt;/code&gt;, &lt;code&gt;next()&lt;/code&gt;, &lt;code&gt;prev()&lt;/code&gt;, and &lt;code&gt;reset()&lt;/code&gt; calls with objects as arguments.
  &lt;/li&gt;
  &lt;li&gt;
    &lt;code&gt;mb_check_encoding()&lt;/code&gt; calls without arguments.
  &lt;/li&gt;
  &lt;li&gt;
    &lt;code&gt;get_class()&lt;/code&gt;, &lt;code&gt;get_parent_class()&lt;/code&gt; and &lt;code&gt;get_called_class()&lt;/code&gt; calls without arguments.
  &lt;/li&gt;
  &lt;li&gt;
    &lt;code&gt;IntlCalendar::roll()&lt;/code&gt; calls with a Boolean passed as the &lt;code&gt;$value&lt;/code&gt; argument.
  &lt;/li&gt;
  &lt;li&gt;
    &lt;code&gt;ctype_*()&lt;/code&gt; calls with non-string arguments.
  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
  See &lt;a href="https://wiki.php.net/rfc/deprecations_php_8_1"&gt;PHP RFC: Deprecations for PHP 8.1&lt;/a&gt; for details.
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpFieldImmediatelyRewrittenInspection" defaultSeverity="WARNING" displayName="Property is immediately rewritten " enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the write expressions on properties which are immediately overwritten before being accessed.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpIncorrectMagicMethodSignatureInspection" defaultSeverity="ERROR" displayName="Incorrect magic method signature" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
  Reports incompatible magic methods signatures.
&lt;p&gt;
  See &lt;a href="https://wiki.php.net/rfc/magic-methods-signature"&gt;RFC: Ensure correct signatures of magic methods (php.net)&lt;/a&gt; for details.
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpDeprecatedPartiallySupportedCallableInspection" defaultSeverity="WARNING" displayName="Deprecated partially supported callables" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports deprecated usage of callables that are supported by &lt;code&gt;call_user_func($callable)&lt;/code&gt;, but not by &lt;code&gt;$callable()&lt;/code&gt;.
&lt;!-- tooltip end --&gt;
&lt;p&gt;Starting from PHP 8.2, the following callables are deprecated:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;"self::method"&lt;/code&gt;
&lt;code&gt;"parent::method"&lt;/code&gt;
&lt;code&gt;"static::method"&lt;/code&gt;
&lt;code&gt;["self", "method"]&lt;/code&gt;
&lt;code&gt;["parent", "method"]&lt;/code&gt;
&lt;code&gt;["static", "method"]&lt;/code&gt;
&lt;code&gt;["Foo", "Bar::method"]&lt;/code&gt;
&lt;code&gt;[new Foo, "Bar::method"]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
  See &lt;a href="https://wiki.php.net/rfc/deprecate_partially_supported_callables"&gt;Deprecate partially supported callables (php.net)&lt;/a&gt; for details.
&lt;/p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpDeprecatedDollarBraceStringInterpolationInspection" defaultSeverity="WARNING" displayName="Deprecated '${' string interpolation" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;code&gt;${var}&lt;/code&gt; and &lt;code&gt;${expr}&lt;/code&gt; interpolations in strings. Such interpolations are deprecated starting from PHP 8.2.
&lt;p&gt;
  See &lt;a href="https://wiki.php.net/rfc/deprecate_dollar_brace_string_interpolation"&gt;Deprecate ${} string interpolation (php.net)&lt;/a&gt; for details.
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpDynamicAsStaticMethodCallInspection" defaultSeverity="WARNING" displayName="Dynamic method called as static" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports static calls to dynamic class methods.
  &lt;!-- tooltip end --&gt;
  &lt;p&gt;For classes having the magic method &lt;code&gt;__callStatic&lt;/code&gt;, a separate inspection severity and highlighting level can be set.&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpDisabledExtensionStubsInspection" defaultSeverity="INFORMATION" displayName="Disabled extension stubs" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the usages of classes, functions, and constants, for which the stubs for the corresponding PHP interpreter extensions are disabled.
&lt;p&gt;
  You can configure the set of stubs under
  &lt;a href="settings://reference.webide.settings.project.settings.php?PHP%20Runtime"&gt;Settings | PHP | PHP Runtime&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
  See &lt;a href="https://blog.jetbrains.com/phpstorm/2018/03/how-to-provide-stubs-for-phpstorm/"&gt;PhpStorm stubs (blog.jetbrains.com/phpstorm)&lt;/a&gt; for details.
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpCurlyBraceAccessSyntaxUsageInspection" defaultSeverity="ERROR" displayName="Curly brace access syntax usage" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the usages of curly brace syntax for accessing array elements and string offsets.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpInvalidMagicMethodModifiersInspection" defaultSeverity="WARNING" displayName="Invalid magic method modifiers" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
  Reports the magic methods that are not declared as public or are declared as static.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpDoctrineAnnotationToAttributeInspection" defaultSeverity="INFORMATION" displayName="Doctrine annotation can be replaced with attribute" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Suggests replacing Doctrine annotations with attributes.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpNamedArgumentMightBeUnresolvedInspection" defaultSeverity="WEAK WARNING" displayName="Named argument may be unresolved" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
  Reports the named arguments in method calls that might be unresolved depending on a specific class instance within the hierarchy.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpDocFinalChecksInspection" defaultSeverity="WEAK WARNING" displayName="Overriding method/extending class marked as '@final'" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports override of method or extending of class with &lt;code&gt;@final&lt;/code&gt; in the PHPDoc.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpDeprecatedAssertDeclarationInspection" defaultSeverity="ERROR" displayName="Deprecated 'assert()' function declaration" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the &lt;code&gt;assert()&lt;/code&gt; function declarations.
&lt;ul&gt;
  &lt;li&gt;Declaring the &lt;code&gt;assert()&lt;/code&gt; function is global namespace is forbidden.&lt;/li&gt;
  &lt;li&gt;Starting from PHP 7.3, declaring the &lt;code&gt;assert()&lt;/code&gt; function in non-global namespace is deprecated.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
  See &lt;a href="https://www.php.net/manual/en/function.assert.php"&gt;assert (php.net)&lt;/a&gt; for details.
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpIncludeInspection" defaultSeverity="WEAK WARNING" displayName="Unresolved include" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
  Reports non-resolved &lt;code&gt;include&lt;/code&gt;, &lt;code&gt;include_once&lt;/code&gt;, &lt;code&gt;require&lt;/code&gt;, and &lt;code&gt;require_once&lt;/code&gt; expressions.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpDeprecatedCastInspection" defaultSeverity="WEAK WARNING" displayName="Deprecated cast" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports deprecated cast expressions:
&lt;ul&gt;
  &lt;li&gt;
    &lt;code&gt;(unset)&lt;/code&gt; cast expressions, which are deprecated in PHP 7.2 and later.
  &lt;/li&gt;
  &lt;li&gt;
    &lt;code&gt;(real)&lt;/code&gt; cast expressions, which are deprecated in PHP 7.4 and later.
  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
  See &lt;a href="https://www.php.net/manual/en/migration72.deprecated.php#migration72.deprecated.unset-cast"&gt;Deprecated features in PHP 7.2.x (php.net)&lt;/a&gt; and &lt;a href="https://wiki.php.net/rfc/deprecations_php_7_4#the_real_type"&gt;Deprecations for PHP 7.4 (php.net)&lt;/a&gt; for details.
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpPropertyCanBeReadonlyInspection" defaultSeverity="WEAK WARNING" displayName="Property can be 'readonly'" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the private promoted properties that are never written to. In PHP 8.1 and later, such properties can be declared &lt;code&gt;readonly&lt;/code&gt;.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  See &lt;a href="https://wiki.php.net/rfc/readonly_properties_v2"&gt;Readonly properties (php.net)&lt;/a&gt; for details.
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpFieldCanBePromotedInspection" defaultSeverity="INFORMATION" displayName="Property can be promoted" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the properties that can be replaced with promoted versions.
&lt;p&gt;
  See &lt;a href="https://wiki.php.net/rfc/constructor_promotion"&gt;Constructor Property Promotion (php.net)&lt;/a&gt; for details.
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpDeprecatedAutoloadDeclarationInspection" defaultSeverity="WARNING" displayName="Deprecated '__autoload()' function declaration" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the &lt;code&gt;__autoload()&lt;/code&gt; function declarations.
&lt;ul&gt;
  &lt;li&gt;Starting from PHP 7.4, declaring &lt;code&gt;__autoload()&lt;/code&gt; functions is deprecated.&lt;/li&gt;
  &lt;li&gt;Starting from PHP 8.0, declaring &lt;code&gt;__autoload()&lt;/code&gt; functions is forbidden.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
  See &lt;a href="https://www.php.net/manual/en/function.autoload.php"&gt;__autoload (php.net)&lt;/a&gt; for details.
&lt;/p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="PHPUnit" path="PHP"><inspection shortName="PhpUnitCoversByAccessModifierIsDeprecatedInspection" defaultSeverity="WEAK WARNING" displayName="Deprecated @covers/@uses by access modifier annotation" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the &lt;code&gt;@covers&lt;/code&gt; and &lt;code&gt;@uses&lt;/code&gt; PHPUnit doc tags that are using &lt;code&gt;ClassName::&amp;lt;*&amp;gt;&lt;/code&gt;. Such annotations won't be supported in PHPUnit 10 and later.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpUnitAssertCanBeReplacedWithEmptyInspection" defaultSeverity="WEAK WARNING" displayName="Assertion can be replaced with 'assertEmpty/assertNotEmpty'" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the &lt;code&gt;assertTrue&lt;/code&gt;/&lt;code&gt;assertFalse&lt;/code&gt; usages that can be replaced with &lt;code&gt;assertEmpty&lt;/code&gt;/&lt;code&gt;assertNotEmpty&lt;/code&gt; in PHPUnit tests.
&lt;p&gt;
  See &lt;a href="https://phpunit.readthedocs.io/en/stable/assertions.html#assertempty"&gt;assertEmpty (phpunit.readthedocs.io)&lt;/a&gt; for details.
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpUnitDeprecatedCallsIn10VersionInspection" defaultSeverity="WARNING" displayName="Method is deprecated in PHPUnit 10" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the calls to the PHPUnit assertion methods that are removed in PHPUnit 10.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpUnitAssertCountInspection" defaultSeverity="WEAK WARNING" displayName="Usage 'assertCount/assertSameSize' methods instead of assertEquals" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports alternative usage of the &lt;code&gt;assertEquals&lt;/code&gt; and &lt;code&gt;assertNotEquals&lt;/code&gt; methods with &lt;code&gt;count&lt;/code&gt; function as a parameter

&lt;p&gt;
See &lt;a href="https://phpunit.readthedocs.io/en/stable/assertions.html#assertcount"&gt;Usage of the assertCount&lt;/a&gt; for details.
&lt;/p&gt;
&lt;p&gt;
See &lt;a href="https://hotexamples.com/examples/-/PHPUnit_Framework_Assert/assertSameSize/php-phpunit_framework_assert-assertsamesize-method-examples.html"&gt;Usage of the assertSameSize&lt;/a&gt; for details.
&lt;/p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpUnitAssertFileEqualsInspection" defaultSeverity="WEAK WARNING" displayName="Deprecated 'assertFileEquals/assertStringEqualsFile' usage" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the deprecated usages of the &lt;code&gt;assertFileEquals&lt;/code&gt;, &lt;code&gt;assertFileNotEquals&lt;/code&gt;, &lt;code&gt;assertStringEqualsFile&lt;/code&gt;, and &lt;code&gt;assertStringNotEqualsFile&lt;/code&gt; functions with the &lt;code&gt;$canonicalize&lt;/code&gt; and &lt;code&gt;$ignoreCase&lt;/code&gt; parameters.
&lt;!-- tooltip end --&gt;
&lt;p&gt;The optional &lt;code&gt;$canonicalize&lt;/code&gt; and &lt;code&gt;$ignoreCase&lt;/code&gt; parameters
  of the &lt;code&gt;assertFileEquals&lt;/code&gt; and &lt;code&gt;assertFileNotEquals&lt;/code&gt; functions are deprecated and will be removed in PHPUnit 9.&lt;/p&gt;
&lt;p&gt;
  See &lt;a href="https://phpunit.readthedocs.io/en/stable/assertions.html#assertfileequals"&gt;Usage of the assertFileEquals function (phpunit.readthedocs.io)&lt;/a&gt; or &lt;a href="https://phpunit.readthedocs.io/en/stable/assertions.html#assertstringequalsfile"&gt;Usage of the assertFileEquals function (phpunit.readthedocs.io)&lt;/a&gt; for details.
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpUnitExpectedExceptionDocTagIsDeprecatedInspection" defaultSeverity="WEAK WARNING" displayName="Deprecated exception handling via doc tags" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the usages of the following deprecated PHPUnit doc tags:
&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;@expectedException&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;@expectedExceptionMessage&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;@expectedExceptionCode&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;@expectedExceptionMessageRegExp&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpUnitInvalidMockingEntityInspection" defaultSeverity="ERROR" displayName="Invalid PHPUnit mocking target" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the methods and classes that are incorrectly mocked in PHPUnit tests.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  The following entities are reported:
&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
    Enums and &lt;code&gt;final&lt;/code&gt; classes
  &lt;/li&gt;
  &lt;li&gt;
    &lt;code&gt;private&lt;/code&gt;, &lt;code&gt;static&lt;/code&gt;, or &lt;code&gt;final&lt;/code&gt; methods
  &lt;/li&gt;
  &lt;li&gt;
    Duplicate methods provided in the mocked methods lists via &lt;code&gt;addMethods()&lt;/code&gt;, &lt;code&gt;onlyMethods()&lt;/code&gt;, &lt;code&gt;setMethods()&lt;/code&gt;, and so on.
  &lt;/li&gt;
&lt;/ul&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpUnitDeprecatedDataProviderSignatureInspection" defaultSeverity="WEAK WARNING" displayName="Deprecated usage of data provider since PHPUnit 10" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
  Reports the references to functions/methods in the &lt;code&gt;@dataProvider&lt;/code&gt; PHPDoc tag that are resolved to non-static or non-public methods.

  Usage of these methods as PHPUnit data providers is deprecated starting from PHPUnit 10.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpUnitAssertEqualsCanBeReplacedWithAssertTrueOrFalseInspection" defaultSeverity="WEAK WARNING" displayName="Assertion can be replaced with 'assertTrue/assertFalse'" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the &lt;code&gt;assertEquals()&lt;/code&gt; calls with the &lt;code&gt;true&lt;/code&gt;/&lt;code&gt;false&lt;/code&gt; arguments in PHPUnit tests.
Such usages can be replaced with &lt;code&gt;assertTrue()&lt;/code&gt;/&lt;code&gt;assertFalse()&lt;/code&gt; calls.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpMockeryInvalidMockingMethodInspection" defaultSeverity="ERROR" displayName="Invalid Mockery mocking target" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the methods and classes that are incorrectly mocked in Mockery tests.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  The following entities are reported:
&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;code&gt;private&lt;/code&gt; methods
  &lt;/li&gt;
  &lt;li&gt;
    &lt;code&gt;protected&lt;/code&gt; methods without appropriate &lt;code&gt;\Mockery\Mock::shouldAllowMockingProtectedMethods&lt;/code&gt; call
  &lt;/li&gt;
&lt;/ul&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpUnitAssertTrueWithIncompatibleTypeArgumentInspection" defaultSeverity="WARNING" displayName="'assertTrue()' with incompatible argument type" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the PHPUnit &lt;code&gt;assertTrue()&lt;/code&gt; calls whose arguments are of incompatible types. Since the &lt;code&gt;assertTrue()&lt;/code&gt; method relies on strict types comparison with &lt;code&gt;true&lt;/code&gt;, such assertions will always fail.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpUnitAssertCanBeReplacedWithFailInspection" defaultSeverity="WEAK WARNING" displayName="Assertion can be replaced with 'fail'" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the &lt;code&gt;assertTrue()&lt;/code&gt;/&lt;code&gt;assertFalse()&lt;/code&gt; calls with the &lt;code&gt;false&lt;/code&gt;/&lt;code&gt;true&lt;/code&gt; arguments in PHPUnit tests. Such usages can be replaced with &lt;code&gt;fail()&lt;/code&gt; calls to indicate that a test is expected to fail.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpUnitDeprecatedExpectExceptionInspection" defaultSeverity="WEAK WARNING" displayName="Deprecated expectException usage" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports deprecated usages of &lt;code&gt;expectException()&lt;/code&gt;.
&lt;p&gt;
  Support for using the &lt;code&gt;expectException()&lt;/code&gt; method with
  &lt;code&gt;\PHPUnit\Framework\Error\Deprecated&lt;/code&gt;,
  &lt;code&gt;\PHPUnit\Framework\Error\Error&lt;/code&gt;,
  &lt;code&gt;\PHPUnit\Framework\Error\Notice&lt;/code&gt;, and
  &lt;code&gt;\PHPUnit\Framework\Error\Warning&lt;/code&gt; is deprecated and will be removed in PHPUnit 10.
&lt;/p&gt;
&lt;p&gt;
  Instead, the &lt;code&gt;expectDeprecation()&lt;/code&gt;, &lt;code&gt;expectError()&lt;/code&gt;, &lt;code&gt;expectNotice()&lt;/code&gt;, and
  &lt;code&gt;expectWarning()&lt;/code&gt; methods should be used.
&lt;/p&gt;

&lt;p&gt;
  See &lt;a href="https://phpunit.readthedocs.io/en/stable/writing-tests-for-phpunit.html#testing-php-errors-warnings-and-notices"&gt;Testing PHP Errors, Warnings, and Notices (phpunit.readthedocs.io)&lt;/a&gt; for details.
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpUnitUndefinedDataProviderInspection" defaultSeverity="WARNING" displayName="Undefined PHPUnit data provider" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
  Reports the references to functions/methods in the &lt;code&gt;@dataProvider&lt;/code&gt; PHPDoc tag that are not resolved.

  &lt;p&gt;Note that when resolving &lt;code&gt;dataProvider&lt;/code&gt;, PHPUnit doesn't take &lt;code&gt;use&lt;/code&gt; statements into account.&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpUnitMissingTargetForTestInspection" defaultSeverity="INFORMATION" displayName="Missing target element for PHPUnit test" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
  Reports the test classes and methods, for which no corresponding production classes or methods were found.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpUnitAssertArrayHasKeyInspection" defaultSeverity="WEAK WARNING" displayName="Method 'assertArrayHasKey/assertArrayNotHasKey' can be used instead" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the &lt;code&gt;assertTrue()&lt;/code&gt; and &lt;code&gt;assertNotTrue()&lt;/code&gt; methods calls that are provided with an &lt;code&gt;array_key_exists()&lt;/code&gt; call
as an argument. Such calls can be replaced with calls to the dedicated &lt;code&gt;assertArrayHasKey()&lt;/code&gt; method.

&lt;p&gt;
  See &lt;a href="https://phpunit.readthedocs.io/en/stable/assertions.html#assertarrayhaskey"&gt;assertArrayHasKey (phpunit.readthedocs.io)&lt;/a&gt; for details.
&lt;/p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpUnitAssertContainsInspection" defaultSeverity="WEAK WARNING" displayName="Deprecated 'assertContains/assertNotContains' usage" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the deprecated &lt;code&gt;assertContains()&lt;/code&gt; and &lt;code&gt;assertNotContains()&lt;/code&gt; calls with the string &lt;code&gt;$needle&lt;/code&gt; and &lt;code&gt;$ignoreCase&lt;/code&gt; arguments.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  The string &lt;code&gt;$needle&lt;/code&gt; and optional boolean &lt;code&gt;$ignoreCase&lt;/code&gt; parameters
  of the &lt;code&gt;assertContains()&lt;/code&gt; and &lt;code&gt;assertNotContains()&lt;/code&gt; functions are deprecated and removed in PHPUnit 9. For assertions that operate on strings, the specific
  &lt;code&gt;assertStringContainsString()&lt;/code&gt;, &lt;code&gt;assertStringContainsStringIgnoringCase()&lt;/code&gt;, &lt;code&gt;assertStringNotContainsString()&lt;/code&gt;, and
  &lt;code&gt;assertStringNotContainsStringIgnoringCase()&lt;/code&gt; methods should be used.
&lt;/p&gt;
&lt;p&gt;
  See &lt;a href="https://phpunit.readthedocs.io/en/stable/assertions.html"&gt;Usage of the assertEquals function (phpunit.readthedocs.io)&lt;/a&gt; for details.
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpUnitTestFailedLineInspection" defaultSeverity="WARNING" displayName="Failed line in test" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports failed method calls or assertions in tests. It helps detect the failed line in code faster and start debugging it immediately.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  function test() {
      $this-&gt;assertEquals(1,2); //highlighted
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpUnitAssertEqualsInspection" defaultSeverity="WEAK WARNING" displayName="Deprecated 'assertEquals/assertNotEquals' usage" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports deprecated usages of the &lt;code&gt;assertEquals&lt;/code&gt; and &lt;code&gt;assertNotEquals&lt;/code&gt; functions with &lt;code&gt;$delta&lt;/code&gt;, &lt;code&gt;$maxDepth&lt;/code&gt;,
&lt;code&gt;$canonicalize&lt;/code&gt;, and &lt;code&gt;$ignoreCase&lt;/code&gt; parameters.
&lt;!-- tooltip end --&gt;
&lt;p&gt;The optional &lt;code&gt;$delta&lt;/code&gt;, &lt;code&gt;$maxDepth&lt;/code&gt;, &lt;code&gt;$canonicalize&lt;/code&gt;, and &lt;code&gt;$ignoreCase&lt;/code&gt; parameters
  of the &lt;code&gt;assertEquals&lt;/code&gt; and &lt;code&gt;assertNotEquals&lt;/code&gt; functions are deprecated and will be removed in PHPUnit 9.&lt;/p&gt;
&lt;p&gt;
  See &lt;a href="https://phpunit.readthedocs.io/en/stable/assertions.html#assertequals"&gt;Usage of the assertEquals function (phpunit.readthedocs.io)&lt;/a&gt; for details.
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpUnitAnnotationToAttributeInspection" defaultSeverity="INFORMATION" displayName="PHPUnit annotation can be replaced with attribute" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Suggests replacing PHPUnit annotations with attributes.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpUnitMisorderedAssertEqualsArgumentsInspection" defaultSeverity="WEAK WARNING" displayName="Misordered PHPUnit equality assertion method arguments" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the calls to PHPUnit equality assertion methods (such as &lt;code&gt;assertEquals()&lt;/code&gt;, &lt;code&gt;assertNotEquals()&lt;/code&gt;, &lt;code&gt;assertSame()&lt;/code&gt;, and so on) that have a non-literal as the expected result
argument and a literal as the actual result argument. Such calls will behave fine for assertions that pass, but may produce confusing error
reports if their expected and actual arguments differ.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  See &lt;a href="https://phpunit.readthedocs.io/en/stable/assertions.html#assertequals"&gt;assertEquals&lt;/a&gt; for details.
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpUnitCoversFunctionWithoutScopeResolutionOperatorInspection" defaultSeverity="WEAK WARNING" displayName="Covered function reference is provided without ‘::’" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the references to functions/methods in the &lt;code&gt;@covers&lt;/code&gt; PHPDoc tags that are not prepended with the scope resolution operator (&lt;code&gt;::&lt;/code&gt;).
&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Code smell" path="PHP"><inspection shortName="PhpMatchExpressionWithOnlyDefaultArmInspection" defaultSeverity="WEAK WARNING" displayName="'match' expression has only default arm and should be simplified" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the &lt;code&gt;match&lt;/code&gt; expressions only containing a &lt;code&gt;default&lt;/code&gt; arm. Such expressions are redundant and should be simplified.
&lt;p&gt;
  See &lt;a href="https://wiki.php.net/rfc/match_expression_v2"&gt;Match expression (php.net)&lt;/a&gt; for details.
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpForeachOverSingleElementArrayLiteralInspection" defaultSeverity="WEAK WARNING" displayName="Foreach over array literal with single element" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the &lt;code&gt;foreach&lt;/code&gt; statements that iterate over an array literal containing a single element.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpDuplicateCatchBodyInspection" defaultSeverity="WEAK WARNING" displayName="Duplicate branch in 'catch' statement" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;code&gt;catch&lt;/code&gt; statements with duplicated bodies.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpPregMatchRedundantClosureInspection" defaultSeverity="WEAK WARNING" displayName="Redundant closure '.*'" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports redundant leading and trailing '.*' in pattern for `preg_match` function.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpUnnecessaryStaticReferenceInspection" defaultSeverity="WEAK WARNING" displayName="Redundant 'static' in final class" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;code&gt;static&lt;/code&gt; usages inside final class
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpArrayIsAlwaysEmptyInspection" defaultSeverity="WEAK WARNING" displayName="Array is always empty at the point of access" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the iterated/accessed arrays that are known to be empty at the point of access.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpBooleanCanBeSimplifiedInspection" defaultSeverity="WEAK WARNING" displayName="Boolean expression can be simplified" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the boolean expressions that contain the &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt; literals and can be simplified.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpRedundantDefaultBreakContinueArgumentInspection" defaultSeverity="WEAK WARNING" displayName="Redundant 'continue/break' argument" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the redundant &lt;code&gt;1&lt;/code&gt; argument of &lt;code&gt;continue&lt;/code&gt; and &lt;code&gt;break&lt;/code&gt; statements. Since this argument is optional and its default value is &lt;code&gt;1&lt;/code&gt;, such usages can be omitted.

&lt;p&gt;
  See &lt;a href="https://www.php.net/manual/en/control-structures.continue.php"&gt;continue (php.net)&lt;/a&gt; and &lt;a href="https://www.php.net/manual/en/control-structures.break.php"&gt;break (php.net)&lt;/a&gt; for details.
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpUnnecessaryLocalVariableInspection" defaultSeverity="WEAK WARNING" displayName="Unnecessary local variable" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the local variables that are used in exit statements, such as &lt;code&gt;throw&lt;/code&gt;, &lt;code&gt;return&lt;/code&gt;, or &lt;code&gt;yield&lt;/code&gt;, immediately after assignment.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpTernaryExpressionCanBeReducedToShortVersionInspection" defaultSeverity="WEAK WARNING" displayName="Ternary expression can be replaced with short version" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the &lt;code&gt;?:&lt;/code&gt; ternary expressions in which the condition and the &lt;code&gt;true&lt;/code&gt; statement are matching.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpArrayUsedOnlyForWriteInspection" defaultSeverity="WEAK WARNING" displayName="Array used only with write access" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
  Reports local arrays that are only updated, but never queried.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpPregSplitWithoutRegExpInspection" defaultSeverity="WEAK WARNING" displayName="'preg_split' can be replaced with 'explode'" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;code&gt;preg_split()&lt;/code&gt; calls that can be replaced with &lt;code&gt;explode()&lt;/code&gt;.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpNestedMinMaxCallInspection" defaultSeverity="WEAK WARNING" displayName="Nested 'min/max' call" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports nested &lt;code&gt;min&lt;/code&gt;/&lt;code&gt;max&lt;/code&gt; calls. Since the &lt;code&gt;min&lt;/code&gt;/&lt;code&gt;max&lt;/code&gt; functions accept any number of arguments, such nested calls are redundant.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpTooManyParametersInspection" defaultSeverity="WEAK WARNING" displayName="Too many parameters in function declaration" enabled="false" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the function/method declarations with the number of parameters exceeding the specified limit.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpSwitchStatementWitSingleBranchInspection" defaultSeverity="WEAK WARNING" displayName="'switch' with single 'case'" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the &lt;code&gt;switch&lt;/code&gt; statements that only contain a single &lt;code&gt;case&lt;/code&gt; statement. Such &lt;code&gt;switch&lt;/code&gt; statements can be converted into &lt;code&gt;if&lt;/code&gt; statements.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpIfCanBeMergedWithSequentialConditionInspection" defaultSeverity="INFORMATION" displayName="'if' can be merged with subsequent condition" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the &lt;code&gt;if&lt;/code&gt; statements that are followed by &lt;code&gt;elseif&lt;/code&gt; or other &lt;code&gt;if&lt;/code&gt; statements having the same bodies. Such statements can be merged together.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpUnnecessarySemicolonInspection" defaultSeverity="WEAK WARNING" displayName="Unnecessary semicolon" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports unnecessary semicolons.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpOverridingMethodVisibilityInspection" defaultSeverity="WEAK WARNING" displayName="Method visibility should not be overridden" enabled="false" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Checks that the methods don't override visibility.
&lt;p&gt;
  Overriding a &lt;code&gt;protected&lt;/code&gt; method with a &lt;code&gt;public&lt;/code&gt; method in a child class makes this method accessible from everywhere.
  This violates the encapsulation principle and is considered bad practice.
&lt;/p&gt;
&lt;p&gt;
  See &lt;a href="https://www.php.net/manual/en/language.oop5.visibility.php#language.oop5.visiblity-methods"&gt;Method Visibility (php.net)&lt;/a&gt; for details.
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpPointlessBooleanExpressionInConditionInspection" defaultSeverity="WEAK WARNING" displayName="Pointless boolean expression inside 'if' condition" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the boolean expressions inside &lt;code&gt;if&lt;/code&gt; conditions that contain &lt;code&gt;$expr == true&lt;/code&gt; or &lt;code&gt;$expr == false&lt;/code&gt;. Such expressions can be simplified to &lt;code&gt;if($expr)&lt;/code&gt; and &lt;code&gt;if(!expr)&lt;/code&gt;.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpFuncGetArgCanBeReplacedWithParamInspection" defaultSeverity="WEAK WARNING" displayName="'func_get_arg()' call can be replaced with parameter access" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the &lt;code&gt;func_get_arg()&lt;/code&gt; calls that can be replaced with direct parameter access.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpUsageOfSilenceOperatorInspection" defaultSeverity="WEAK WARNING" displayName="Usage of a silence operator" enabled="false" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the usages of the silence operator (&lt;code&gt;@&lt;/code&gt;), which is highly discouraged.
&lt;p&gt;See &lt;a href="https://www.php.net/manual/en/language.operators.errorcontrol.php"&gt;Error Control Operators (php.net)&lt;/a&gt; for details.
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpUnnecessaryBoolCastInspection" defaultSeverity="WEAK WARNING" displayName="Redundant cast to boolean" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the &lt;code&gt;(bool)&lt;/code&gt;/&lt;code&gt;(boolean)&lt;/code&gt; casts and &lt;code&gt;boolval()&lt;/code&gt; calls that are redundant since casting to &lt;code&gt;bool&lt;/code&gt; is performed implicitly.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpMethodParametersCountMismatchInspection" defaultSeverity="WEAK WARNING" displayName="Parameters number mismatch declaration" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the function/method calls that take more parameters than specified in their declaration.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpLoopCanBeReplacedWithStdFunctionCallsInspection" defaultSeverity="WEAK WARNING" displayName="Loop can be replaced with 'in_array()' or 'array_key_exists()' call" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html xmlns="http://www.w3.org/1999/html"&gt;
&lt;body&gt;
Reports the &lt;code&gt;foreach&lt;/code&gt; loops that can be safely replaced with &lt;code&gt;in_array()&lt;/code&gt; or &lt;code&gt;array_key_exists()&lt;/code&gt; calls.
&lt;p&gt;
  See &lt;a href="https://www.php.net/manual/en/function.in-array"&gt;in_array (php.net)&lt;/a&gt; and &lt;a href="https://www.php.net/manual/en/function.array-key-exists"&gt;array_key_exists (php.net)&lt;/a&gt; for details.
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpConcatenationWithEmptyStringCanBeInlinedInspection" defaultSeverity="WEAK WARNING" displayName="Concatenation to empty string can be merged with assignment" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the &lt;code&gt;.=&lt;/code&gt; concatenation assignments performed right after assignment to an empty string literal. Such assignments can be merged together.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpIdempotentOperationInspection" defaultSeverity="WEAK WARNING" displayName="Idempotent operation in binary expression" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the binary expression operands that do not change the expression result (such as &lt;code&gt;+ 0&lt;/code&gt; or &lt;code&gt;. ""&lt;/code&gt;) and are therefore redundant.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpTernaryExpressionCanBeReplacedWithConditionInspection" defaultSeverity="WEAK WARNING" displayName="Ternary expression can be replaced with condition" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the ternary expressions specified as &lt;code&gt;condition ? true : false&lt;/code&gt; that can be safely replaced with just &lt;code&gt;condition&lt;/code&gt;.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpArrayAccessCanBeReplacedWithForeachValueInspection" defaultSeverity="WEAK WARNING" displayName="Array access can be replaced with 'foreach' value" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the array access expressions inside &lt;code&gt;foreach&lt;/code&gt; loops that can be replaced with a &lt;code&gt;foreach&lt;/code&gt; value.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpArraySearchInBooleanContextInspection" defaultSeverity="WEAK WARNING" displayName="'array_search()' can be replaced with 'in_array()' call" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the &lt;code&gt;array_search()&lt;/code&gt; calls that are only used for checking whether an element exists in array, that is, the expressions like &lt;code&gt;if (array_search($a, $b) === false) {}&lt;/code&gt;. Such calls can be safely replaced with &lt;code&gt;in_array()&lt;/code&gt; calls.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpPropertyOnlyWrittenInspection" defaultSeverity="WARNING" displayName="Property usages have same access" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the private properties that are:
&lt;ul&gt;
  &lt;li&gt;written but never read&lt;/li&gt;
  &lt;li&gt;read but never written&lt;/li&gt;
&lt;/ul&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpModuloByOneInspection" defaultSeverity="WEAK WARNING" displayName="Modulo operation with '1' as operand" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the modulo expressions &lt;code&gt;%&lt;/code&gt; that always evaluate to &lt;code&gt;0&lt;/code&gt; or &lt;code&gt;1&lt;/code&gt;.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpRedundantMethodOverrideInspection" defaultSeverity="WEAK WARNING" displayName="Redundant method override" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the overriding methods that only consist of a single call to the parent method.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpPrivateFieldCanBeLocalVariableInspection" defaultSeverity="WEAK WARNING" displayName="Private property can be local" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the private properties that are used only in a single method. Such properties can be replaced with local variables.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpDefineConstantNameStartsWithLeadingSlashInspection" defaultSeverity="WARNING" displayName="Constant name defined with a leading slash" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the &lt;code&gt;define&lt;/code&gt; constructs in which the constant's FQN starts with a leading slash. Such constants will not be correctly registered by PHP.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpLoopCanBeReplacedWithImplodeInspection" defaultSeverity="WEAK WARNING" displayName="Loop can be replaced with 'implode()'" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the &lt;code&gt;foreach&lt;/code&gt; loops that can be safely replaced with &lt;code&gt;implode()&lt;/code&gt; calls.
&lt;p&gt;
  See &lt;a href="https://www.php.net/manual/en/function.implode.php"&gt;implode (php.net)&lt;/a&gt; for details.
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpPregReplaceWithEmptyReplacementInspection" defaultSeverity="WEAK WARNING" displayName="'preg_replace()' can be replaced with '(l|r)trim' call" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the &lt;code&gt;preg_replace()&lt;/code&gt; calls with empty &lt;code&gt;replacement&lt;/code&gt;.
Such calls can be replaced with &lt;code&gt;(l|r)trim&lt;/code&gt; calls.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpRedundantOptionalArgumentInspection" defaultSeverity="WEAK WARNING" displayName="Redundant optional argument" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports redundant arguments that match the corresponding default values for optional parameters.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpConditionCanBeReplacedWithMinMaxCallInspection" defaultSeverity="WEAK WARNING" displayName="Condition can be replaced with 'min()'/'max()' call" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the conditions that perform manual min/max calculation instead of calling &lt;code&gt;min&lt;/code&gt;/&lt;code&gt;max&lt;/code&gt; functions.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpUnnecessaryStringCastInspection" defaultSeverity="WEAK WARNING" displayName="Redundant cast to string" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the &lt;code&gt;(string)&lt;/code&gt; casts and &lt;code&gt;strval()&lt;/code&gt; calls that are redundant since casting to string is performed implicitly.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpRedundantArrayCallInForeachIteratedValueInspection" defaultSeverity="WEAK WARNING" displayName="Redundant 'array_values' call on a value iterated in 'foreach'" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the &lt;code&gt;array_values()&lt;/code&gt; calls inside &lt;code&gt;foreach&lt;/code&gt; loops in which the iterated value is used without a key. Such calls are redundant and can be safely removed.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpPregMatchWithoutEffectiveRegexpInspection" defaultSeverity="WEAK WARNING" displayName="'preg_match' can be replaced with 'str_contains'" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the &lt;code&gt;preg_match()&lt;/code&gt; calls with &lt;code&gt;pattern&lt;/code&gt; arguments that don't use any regexp facilities.
Such calls can be replaced with &lt;code&gt;str_starts_with()&lt;/code&gt;, &lt;code&gt;str_ends_with()&lt;/code&gt; or &lt;code&gt;str_contains()&lt;/code&gt; calls.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpUnnecessarySpreadOperatorForFunctionCallArgumentInspection" defaultSeverity="WEAK WARNING" displayName="Unnecessary spread operator for function call argument" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the usages of the spread operator (&lt;code&gt;...&lt;/code&gt;) on array literals in function call arguments that may be safely unwrapped.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpArrayIndexResetIsUnnecessaryInspection" defaultSeverity="WEAK WARNING" displayName="Array internal pointer reset is unnecessary" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the &lt;code&gt;reset($array)&lt;/code&gt; calls on arrays whose internal pointer is already set on the first element. Such calls are redundant and can be safely removed.
&lt;p&gt;
  See &lt;a href="https://www.php.net/manual/en/function.reset.php"&gt;reset (php.net)&lt;/a&gt; for details.
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpExceptionImmediatelyRethrownInspection" defaultSeverity="WEAK WARNING" displayName="Exception is immediately rethrown" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the &lt;code&gt;catch&lt;/code&gt; statements that only rethrow a caught exception, which is located in a class hierarchy different from the subsequent exception types.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpPregMatchReplaceWithComparisonInspection" defaultSeverity="WEAK WARNING" displayName="'preg_match()' can be replaced with comparison" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the &lt;code&gt;preg_match()&lt;/code&gt; calls that are provided with a string argument starting with &lt;code&gt;^&lt;/code&gt; (Start of String anchor) and ending with &lt;code&gt;$&lt;/code&gt; (End of String anchor). Such calls can be replaced with a comparison operation.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpUselessTrailingCommaInspection" defaultSeverity="WEAK WARNING" displayName="Useless trailing comma" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the trailing commas in parameters lists and closures' &lt;code&gt;use&lt;/code&gt; lists that do not bring any benefit.
&lt;ul&gt;
  &lt;li&gt;In a single-line list, a trailing comma is redundant and can be removed.&lt;/li&gt;
  &lt;li&gt;In a multiline list, if no line break is provided after a trailing comma, it becomes impossible to easily add, remove, or move
    lines.
  &lt;/li&gt;
&lt;/ul&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpToStringMayProduceExceptionInspection" defaultSeverity="WARNING" displayName="'__toString' may throw an exception" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the usages of &lt;code&gt;__toString&lt;/code&gt; that may throw an exception, which is not allowed for PHP language level lower than 7.4.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpAccessingStaticMembersOnTraitInspection" defaultSeverity="WEAK WARNING" displayName="Accessing static trait members" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the static member access expressions used on traits. Such direct access is deprecated starting from PHP 8.1. Instead, static members should be accessed on the class that uses the trait.
&lt;p&gt;
  See &lt;a href="https://wiki.php.net/rfc/deprecations_php_8_1#accessing_static_members_on_traits"&gt;Deprecations for PHP 8.1: Accessing static members on traits (php.net)&lt;/a&gt; for details.
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpFormatCallWithSingleArgumentInspection" defaultSeverity="WEAK WARNING" displayName="Format function call with single argument" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the &lt;code&gt;sprintf()&lt;/code&gt; and &lt;code&gt;vsprintf()&lt;/code&gt; calls with a single argument. Such calls produce no effect and can be safely unwrapped, that is, replaced with the argument itself.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpInvalidInstanceofInspection" defaultSeverity="WARNING" displayName="Argument of 'instanceof' should be only objects or strings" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
  &lt;body&gt;
    Reports arguments of 'instanceof' that are not objects or strings
  &lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpReturnValueOfMethodIsNeverUsedInspection" defaultSeverity="WEAK WARNING" displayName="Method's return value is never used" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
  Reports the private methods returning the values that are not used.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpNestedDirNameCallsCanBeReplacedWithLevelParameterInspection" defaultSeverity="WEAK WARNING" displayName="Nested 'dirname()' call can be replaced with 'levels' parameter usage" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the nested &lt;code&gt;dirname()&lt;/code&gt; calls that can be omitted by using the &lt;code&gt;levels&lt;/code&gt; parameter instead.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpLoopCanBeReplacedWithStrRepeatInspection" defaultSeverity="WEAK WARNING" displayName="Loop can be replaced with 'str_repeat'" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the &lt;code&gt;for&lt;/code&gt; loops that can be safely replaced with &lt;code&gt;str_repeat()&lt;/code&gt; calls.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpArrayToStringConversionInspection" defaultSeverity="WARNING" displayName="Array to string conversion" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports array to string conversions, that is, the arrays that are provided in the contexts where a string is expected.
&lt;p&gt;
  Prior to PHP 8.0, this would lead to a &lt;code&gt;E_NOTICE&lt;/code&gt; level error. In PHP 8.0, an &lt;code&gt;E-WARNING&lt;/code&gt; is emitted.
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpInconsistentReturnPointsInspection" defaultSeverity="WARNING" displayName="Inconsistent return points" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports inconsistencies in function/method exit points.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
The following types of inconsistencies are reported:
&lt;/p&gt;
  &lt;ul&gt;
    &lt;li&gt;The function/method contains the &lt;code&gt;return&lt;/code&gt; statements both with and without arguments.&lt;/li&gt;
    &lt;li&gt;The function/method may return a value or otherwise end its execution without returning anything.&lt;/li&gt;
  &lt;/ul&gt;
&lt;p&gt;
Technically these are not errors, but practically they usually indicate a programming mistake.
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="PhpDuplicateOperandInComparisonInspection" defaultSeverity="WEAK WARNING" displayName="Duplicate operand in comparison" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports duplicate operands in binary expressions (&lt;code&gt;+&lt;/code&gt;, &lt;code&gt;-&lt;/code&gt;, &lt;code&gt;*&lt;/code&gt;, &lt;code&gt;/&lt;/code&gt;, &lt;code&gt;&amp;&amp;&lt;/code&gt;, &lt;code&gt;||&lt;/code&gt;, and
&lt;code&gt;.&lt;/code&gt;) that are in turn used inside comparison expressions. Such operands do not affect the comparison result and can be safely removed.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpSameParameterValueInspection" defaultSeverity="WEAK WARNING" displayName="Parameter's value is always the same" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the parameters in private methods that have the same value across all method calls.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpParameterByRefIsNotUsedAsReferenceInspection" defaultSeverity="WEAK WARNING" displayName="Unnecessary pass-by-ref" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the variables that are passed by reference to a function/method but are not modified in the function/method body. In such cases, the &lt;code&gt;&amp;&lt;/code&gt; in parameter's declaration can be safely removed.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  See &lt;a href="https://www.php.net/manual/en/language.references.pass.php"&gt;Passing by Reference (php.net)&lt;/a&gt; for details.
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpArrayPushWithOneElementInspection" defaultSeverity="WEAK WARNING" displayName="'array_push()' with single element" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the &lt;code&gt;array_push()&lt;/code&gt; calls that are used to add a single element to an array. In such cases, it is recommended to use &lt;code&gt;$array[] =&lt;/code&gt; instead, which adds no overhead of calling a function.
&lt;p&gt;
  See &lt;a href="https://www.php.net/manual/en/function.array-push.php"&gt;array_push (php.net)&lt;/a&gt; for details.
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpContinueTargetingSwitchInspection" defaultSeverity="WEAK WARNING" displayName="'continue' is targeting 'switch' statement" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the &lt;code&gt;continue&lt;/code&gt; statements that are targeting &lt;code&gt;switch&lt;/code&gt; statements. In PHP 7.3 and later, such usages are deprecated and will emit an &lt;code&gt;E_WARNING&lt;/code&gt;, since they are most likely the result of a programming mistake.
&lt;!-- tooltip end --&gt;
&lt;ul&gt;
  &lt;li&gt;
    In PHP, such &lt;code&gt;continue&lt;/code&gt; statements are equivalent to &lt;code&gt;break&lt;/code&gt;, that is, they end the execution of the current &lt;code&gt;switch&lt;/code&gt; structure.
  &lt;/li&gt;
  &lt;li&gt;
    In other languages, such &lt;code&gt;continue&lt;/code&gt; statements behave as &lt;code&gt;continue 2&lt;/code&gt; in PHP, that is, they take the execution to a higher level control structure (for example, the next iteration of an outer loop).
  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
  See &lt;a href="https://www.php.net/manual/en/control-structures.continue.php"&gt;continue (php.net)&lt;/a&gt;, &lt;a href="https://www.php.net/manual/en/control-structures.break.php"&gt;break (php.net)&lt;/a&gt;, and &lt;a href="https://www.php.net/manual/en/control-structures.switch.php"&gt;switch (php.net)&lt;/a&gt; for details.
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpRedundantAssignmentToPromotedFieldInspection" defaultSeverity="WEAK WARNING" displayName="Redundant assignment to promoted property" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
  Reports redundant assignments to class properties that duplicate automatic assignments performed through promoted constructor parameters.
&lt;p&gt;
  See &lt;a href="https://wiki.php.net/rfc/constructor_promotion"&gt;Constructor Property Promotion (php.net)&lt;/a&gt; for details.
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpInArrayCanBeReplacedWithComparisonInspection" defaultSeverity="WEAK WARNING" displayName="'in_array' can be replaced with comparison" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the &lt;code&gt;in_array()&lt;/code&gt; calls that are provided with a single-element array as the &lt;code&gt;$haystack&lt;/code&gt; argument. Such calls can be replaced with direct comparisons.
&lt;p&gt;
  See &lt;a href="https://www.php.net/manual/en/function.in-array.php"&gt;in_array (php.net)&lt;/a&gt; for details.
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpArrayAppendUsingCountInspection" defaultSeverity="WEAK WARNING" displayName="Using 'count()' as index for appending value to array" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the &lt;code&gt;count($array)&lt;/code&gt; calls that are used as an array index for appending an element to the array: &lt;code&gt;$array[count($array)] = 42&lt;/code&gt;. In such
cases, it is recommended to use square bracket syntax (&lt;code&gt;$array[] = 42&lt;/code&gt;) instead, which adds no overhead of calling a function.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpUnnecessaryStopStatementInspection" defaultSeverity="WEAK WARNING" displayName="Unnecessary 'return/continue' statement" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
  Reports unnecessary &lt;code&gt;return&lt;/code&gt; and &lt;code&gt;continue&lt;/code&gt; statements that can be safely removed.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpExpressionWithSameOperandsInspection" defaultSeverity="WEAK WARNING" displayName="Logical expression has same operands" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the expressions that use the same operands, but should rather use different operands (for example, &lt;code&gt;$var == $var&lt;/code&gt;). These include comparison, logical, null-coalescing, subtraction, and division expressions.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpClassConstantAccessedViaChildClassInspection" defaultSeverity="WEAK WARNING" displayName="Class constant referenced via child class" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports reference to a class constant via child class which gets this constant from the parent class by inheritance and
does not override it within its own scope. Such reference may cause confusion between inheritance and overriding, so it's
advisable to reference the constant directly via parent class instead.
&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Behat" path="PHP"><inspection shortName="BehatDocStepCanBeConvertedToAttributeInspection" defaultSeverity="INFORMATION" displayName="Behat doc step can be converted to attribute version" enabled="true" language="PHP" pluginId="com.jetbrains.php.behat" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports Behat doc tags that can be replaced with attribute version
&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Refactoring opportunities" path="PHP"><inspection shortName="PhpComplexClassInspection" defaultSeverity="WEAK WARNING" displayName="Complex class should be refactored" enabled="false" language="PHP" pluginId="com.jetbrains.php.architecture" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the classes that are too complex.

&lt;p&gt;Class complexity is evaluated based on three metrics:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;TCC (Tight class cohesion) — the measure of class cohesiveness (more is better).&lt;/li&gt;
  &lt;li&gt;WMC (Weighted Method count) — the sum of cyclomatic complexities for all methods in a class (less is better).&lt;/li&gt;
  &lt;li&gt;ATFD (Access to foreign data) — the number of properties from another class that are accessed in the current class (less is better).&lt;/li&gt;
&lt;/ul&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpHalsteadMetricInspection" defaultSeverity="WEAK WARNING" displayName="Halstead metric" enabled="false" language="PHP" pluginId="com.jetbrains.php.architecture" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the methods with high Halstead Complexity metric.

&lt;p&gt;
  See &lt;a href="https://en.wikipedia.org/wiki/Halstead_complexity_measures"&gt;Halstead measure (wikipedia.org)&lt;/a&gt; for details.
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpClassHasTooManyDeclaredMembersInspection" defaultSeverity="WEAK WARNING" displayName="Class has too many declared members" enabled="false" language="PHP" pluginId="com.jetbrains.php.architecture" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the classes that have too many properties or methods.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpLackOfCohesionInspection" defaultSeverity="WEAK WARNING" displayName="LCOM metric" enabled="false" language="PHP" pluginId="com.jetbrains.php.architecture" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the classes that have high Lack of Cohesion metric value, which represents the degree of cohesiveness of a class.
&lt;p&gt;
It uses class dependency graph components for class cohesiveness measure (M. Hitz and B. Montazeri definition of LCOM metric)
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpComplexFunctionInspection" defaultSeverity="WEAK WARNING" displayName="Complex function should be refactored" enabled="false" language="PHP" pluginId="com.jetbrains.php.architecture" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the functions or methods that are too complex.

&lt;p&gt;Complexity is evaluated based on four metrics:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Lines of code — the number of code lines in a function/method (less is better)&lt;/li&gt;
  &lt;li&gt;Maximum Nesting depth — the maximum number of nested statements in a function/method body (less is better)&lt;/li&gt;
  &lt;li&gt;Cyclomatic complexity — the function/method cyclomatic complexity (less is better)&lt;/li&gt;
  &lt;li&gt;Number of variables — the number of variables used in function/method body&lt;/li&gt;
&lt;/ul&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpFeatureEnvyLocalInspection" defaultSeverity="WEAK WARNING" displayName="Method has Feature Envy on another class" enabled="false" language="PHP" pluginId="com.jetbrains.php.architecture" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the "Feature Envy" code smell.
Feature envy is defined as occurring when a method calls methods on another class more times than on the source class. It often indicates that the intended functionality is located in the wrong class.
&lt;p&gt;
  Calls to library classes, parent classes, and contained or containing classes are not counted by this inspection.
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpMemberCanBePulledUpInspection" defaultSeverity="WEAK WARNING" displayName="Member can be pulled up" enabled="false" language="PHP" pluginId="com.jetbrains.php.architecture" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the class methods and properties that should be pulled up to the parent class or interface.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpFunctionCyclomaticComplexityInspection" defaultSeverity="WEAK WARNING" displayName="Function has too high cyclomatic complexity" enabled="false" language="PHP" pluginId="com.jetbrains.php.architecture" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the methods that have high cyclomatic complexity and can probably be simplified.
&lt;p&gt;
  See &lt;a href="https://en.wikipedia.org/wiki/Cyclomatic_complexity"&gt;Cyclomatic complexity (wikipedia.org)&lt;/a&gt; for details.
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="CSS" path=""><inspection shortName="CssConvertColorToHexInspection" defaultSeverity="WARNING" displayName="Color could be replaced with #-hex" enabled="false" language="CSS" pluginId="com.intellij.css" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an &lt;code&gt;rgb()&lt;/code&gt;, &lt;code&gt;hsl()&lt;/code&gt;, or other color function.
&lt;p&gt;Suggests replacing a color function with an equivalent hexadecimal notation.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;rgb(12, 15, 255)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#0c0fff&lt;/code&gt;.&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="CssOverwrittenProperties" defaultSeverity="WARNING" displayName="Overwritten property" enabled="true" language="CSS" pluginId="com.intellij.css" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a duplicated CSS property within a ruleset. Respects shorthand properties.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
.foo {
  margin-bottom: 1px;
  margin-bottom: 1px; /* duplicates margin-bottom */
  margin: 0; /* overrides margin-bottom */
}
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="CssUnusedSymbol" defaultSeverity="WARNING" displayName="Unused selector" enabled="true" language="CSS" pluginId="com.intellij.css" pluginVersion="233.13135.108" isGlobalTool="true">&lt;html&gt;
&lt;body&gt;
Reports a CSS class or an element IDs that appears in selectors but is not used in HTML.
&lt;p&gt;
  Note that complete inspection results are available only when running it via &lt;b&gt;Code | Inspect Code&lt;/b&gt; or
  &lt;b&gt;Code | Analyze Code | Run Inspection by Name&lt;/b&gt;.
  Due to performance reasons, style sheet files are not inspected on the fly.
&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="CssConvertColorToRgbInspection" defaultSeverity="WARNING" displayName="Color could be replaced with rgb()" enabled="false" language="CSS" pluginId="com.intellij.css" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an &lt;code&gt;hsl()&lt;/code&gt; or &lt;code&gt;hwb()&lt;/code&gt; color function or a hexadecimal color notation.
&lt;p&gt;Suggests replacing such color value with an equivalent &lt;code&gt;rgb()&lt;/code&gt; or &lt;code&gt;rgba()&lt;/code&gt; color function.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#0c0fff&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;rgb(12, 15, 255)&lt;/code&gt;.&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="CssBrowserCompatibilityForProperties" defaultSeverity="WARNING" displayName="Property is incompatible with selected browsers" enabled="false" language="CSS" pluginId="com.intellij.css" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a CSS property that is not supported by the specified browsers.
Based on the &lt;a href="https://github.com/mdn/browser-compat-data"&gt;MDN Compatibility Data&lt;/a&gt;.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="CssReplaceWithShorthandUnsafely" defaultSeverity="INFORMATION" displayName="Properties may probably be replaced with a shorthand" enabled="true" language="CSS" pluginId="com.intellij.css" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a set of longhand CSS properties and suggests replacing an incomplete set of longhand CSS properties with a shorthand form,
which is however not 100% equivalent in this case.
&lt;p&gt;
  For example, 2 properties: &lt;code&gt;outline-color&lt;/code&gt; and &lt;code&gt;outline-style&lt;/code&gt; may be replaced with a single &lt;code&gt;outline&lt;/code&gt;.
  Such replacement is not 100% equivalent because shorthands reset all omitted sub-values to their initial states.
  In this example, switching to the &lt;code&gt;outline&lt;/code&gt; shorthand means that &lt;code&gt;outline-width&lt;/code&gt; is also set to its initial value,
  which is &lt;code&gt;medium&lt;/code&gt;.
&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  This inspection doesn't handle full sets of longhand properties (when switching to shorthand is 100% safe).
  For such cases see the 'Properties may be safely replaced with a shorthand' inspection instead.
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="CssDeprecatedValue" defaultSeverity="ERROR" displayName="Deprecated value" enabled="true" language="CSS" pluginId="com.intellij.css" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a deprecated CSS value. Suggests replacing the deprecated value with its valid equivalent.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="CssReplaceWithShorthandSafely" defaultSeverity="WEAK WARNING" displayName="Properties may be safely replaced with a shorthand" enabled="true" language="CSS" pluginId="com.intellij.css" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a set of longhand properties. Suggests replacing a complete set of longhand CSS properties with an equivalent shorthand form.
&lt;p&gt;
  For example, 4 properties: &lt;code&gt;padding-top&lt;/code&gt;, &lt;code&gt;padding-right&lt;/code&gt;, &lt;code&gt;padding-bottom&lt;/code&gt;, and
  &lt;code&gt;padding-left&lt;/code&gt;
  can be safely replaced with a single &lt;code&gt;padding&lt;/code&gt; property.
&lt;/p&gt;
&lt;p&gt;
  Note that this inspection doesn't show up if the set of longhand properties is incomplete
  (e.g. only 3 &lt;code&gt;padding-xxx&lt;/code&gt; properties in a ruleset)
  because switching to a shorthand may change the result.
  For such cases consider the 'Properties may probably be replaced with a shorthand'
  inspection.
&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Qodana" path=""><inspection shortName="QodanaSanity" defaultSeverity="ERROR" displayName="Sanity" enabled="false" pluginId="org.intellij.qodana" pluginVersion="233.13135.108" isGlobalTool="true">&lt;html&gt;
&lt;body&gt;
Reports issues essential to this file like syntax errors, unresolved methods and variables, etc...
&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Node.js" path="JavaScript and TypeScript"><inspection shortName="NodeCoreCodingAssistance" defaultSeverity="WARNING" displayName="Unresolved Node.js APIs" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Suggests configuring coding assistance for Node.js, for example, &lt;code&gt;require&lt;/code&gt; and/or core modules ('path', 'http', 'fs', etc.).
&lt;p&gt;
See &lt;a href="https://nodejs.org/api/"&gt;https://nodejs.org/api/&lt;/a&gt; for the complete list.&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="XSLT" path=""><inspection shortName="XsltVariableShadowing" defaultSeverity="WARNING" displayName="Shadowed variable" enabled="true" language="XML" pluginId="XPathView" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports shadowed XSLT variables.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="XsltDeclarations" defaultSeverity="ERROR" displayName="Incorrect declaration" enabled="true" language="XML" pluginId="XPathView" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports duplicate declarations and illegal identifiers in XSLT variables, parameters, and named templates:
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="XsltTemplateInvocation" defaultSeverity="ERROR" displayName="Incorrect template invocation" enabled="true" language="XML" pluginId="XPathView" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports missing arguments, passing arguments that are not declared, and passing arguments for parameters more than once
in named XSLT template invocations.

&lt;p&gt;
Parameters declared with a default value are optional and will not be reported as missing.
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="XsltUnusedDeclaration" defaultSeverity="WARNING" displayName="Unused variable or parameter" enabled="true" language="XML" pluginId="XPathView" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports local variables and parameters that are never used.
&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Code style" path="PHP/PHPDoc"><inspection shortName="PhpEnforceDocCommentInspection" defaultSeverity="WEAK WARNING" displayName="Enforce PHPDoc comment" enabled="false" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the elements without a PHPDoc comment or with a PHPDoc comment only containing the &lt;code&gt;@noinspection&lt;/code&gt; tag.

&lt;p&gt;You can use &lt;i&gt;Missing PHPDoc Comment&lt;/i&gt; inspection to report only non-fully typed elements.&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="PhpDocMissingThrowsInspection" defaultSeverity="WEAK WARNING" displayName="Missing @throws tag(s)" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
  Reports missing PHPDoc &lt;code&gt;@throws&lt;/code&gt; tags for exceptions thrown by functions or methods.
  &lt;!-- tooltip end --&gt;
  &lt;p&gt;The exception classes added to the &lt;b&gt;Unchecked Exceptions&lt;/b&gt; list under
    &lt;a href="settings://reference.webide.settings.project.settings.php?Unchecked%20Exceptions"&gt;Settings | PHP | Analysis&lt;/a&gt;
    are excluded from the inspection scope.&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpMissingDocCommentInspection" defaultSeverity="WEAK WARNING" displayName="Missing PHPDoc comment" enabled="false" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports non-fully typed elements without a PHPDoc comment or with a PHPDoc comment only containing the &lt;code&gt;@noinspection&lt;/code&gt; tag.

&lt;p&gt;You can use the &lt;i&gt;Enforce PHPDoc Comment&lt;/i&gt; inspection to report fully typed elements.&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="PhpNonCanonicalElementsOrderInspection" defaultSeverity="WEAK WARNING" displayName="Non-canonical order of elements" enabled="false" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
  Reports the PHPDoc tags that have elements listed in non-canonical order.
  &lt;p&gt;For example, for such tags as &lt;code&gt;@property&lt;/code&gt;, &lt;code&gt;@param&lt;/code&gt;, or &lt;code&gt;@var&lt;/code&gt;, the inspection will report the usages of &lt;code&gt;[name] ["Type"]&lt;/code&gt; instead of &lt;code&gt;["Type"] [name]&lt;/code&gt;.
  &lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpDocSignatureIsNotCompleteInspection" defaultSeverity="WEAK WARNING" displayName="PHPDoc comment signature is not complete" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the PHPDoc comments that contain at least one &lt;code&gt;@param&lt;/code&gt; or &lt;code&gt;@return&lt;/code&gt; tag but are missing some of the &lt;code&gt;@param&lt;/code&gt; or &lt;code&gt;@return&lt;/code&gt; tags for parameters or return types specified in the function/method declaration.
&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Markdown" path=""><inspection shortName="MarkdownLinkDestinationWithSpaces" defaultSeverity="WARNING" displayName="Links should not contain spaces" enabled="true" language="Markdown" pluginId="org.intellij.plugins.markdown" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
To ensure consistency between different tools, file links should not contain spaces.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  [Some file link](some file.md)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A quick-fix replaces spaces with their url-encoded equivalent:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  [Some file link](some%20file.md)
&lt;/code&gt;&lt;/pre&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="MarkdownUnresolvedLinkLabel" defaultSeverity="WARNING" displayName="Unresolved link label" enabled="true" language="Markdown" pluginId="org.intellij.plugins.markdown" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports unresolved link labels in Markdown files.
&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="MarkdownOutdatedTableOfContents" defaultSeverity="WARNING" displayName="Outdated table of contents section" enabled="true" language="Markdown" pluginId="org.intellij.plugins.markdown" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Checks if a particular table of contents section corresponds to the actual structure of the document.
&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="MarkdownIncorrectlyNumberedListItem" defaultSeverity="WARNING" displayName="Incorrectly numbered list item" enabled="true" language="Markdown" pluginId="org.intellij.plugins.markdown" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Ordered list items are expected to have straight numeration starting from 1.&lt;/p&gt;
&lt;p&gt;The motivation behind this is that most of Markdown processors are ignoring the numbering of ordered lists. A processor will generate an &lt;code&gt;&amp;lt;ol&amp;gt;&lt;/code&gt; element for such list, that will number items continuously from 1.&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="MarkdownUnresolvedFileReference" defaultSeverity="WARNING" displayName="Unresolved file references" enabled="true" language="Markdown" pluginId="org.intellij.plugins.markdown" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports unresolved file references in Markdown files.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="MarkdownUnresolvedHeaderReference" defaultSeverity="WARNING" displayName="Unresolved header reference" enabled="true" language="Markdown" pluginId="org.intellij.plugins.markdown" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports unresolved header references in Markdown files.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="MarkdownNoTableBorders" defaultSeverity="WARNING" displayName="Table doesn't have side borders" enabled="true" language="Markdown" pluginId="org.intellij.plugins.markdown" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Checks if table has correct side borders.
For compatibility reasons all table rows should have borders (pipe symbols) at the start and at the end.
&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="MarkdownIncorrectTableFormatting" defaultSeverity="WEAK WARNING" displayName="Incorrect table formatting" enabled="true" language="Markdown" pluginId="org.intellij.plugins.markdown" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Checks if table is correctly formatted.
&lt;/body&gt;
&lt;/html&gt;
</inspection></group><group name="DotEnv" path=""><inspection shortName="DotEnvLowercaseKeyInspection" defaultSeverity="WARNING" displayName="Key uses lowercase chars" enabled="true" language="DotEnv" pluginId="ru.adelf.idea.dotenv" pluginVersion="2024.1" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports keys, which use lowercase chars. Keys should be written in uppercase.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="DotEnvSpaceInsideNonQuotedInspection" defaultSeverity="WARNING" displayName="Space inside non-quoted value" enabled="true" language="DotEnv" pluginId="ru.adelf.idea.dotenv" pluginVersion="2024.1" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports spaces inside non-quoted values. Some .env libraries ignore everything after first space.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="DotEnvIncorrectDelimiterInspection" defaultSeverity="WARNING" displayName="Incorrect delimiter" enabled="true" language="DotEnv" pluginId="ru.adelf.idea.dotenv" pluginVersion="2024.1" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports incorrect delimiter in .env files ('-' instead of'_').
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="DotEnvSpaceAroundSeparatorInspection" defaultSeverity="WARNING" displayName="Extra spaces surrounding '='" enabled="true" language="DotEnv" pluginId="ru.adelf.idea.dotenv" pluginVersion="2024.1" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports spaces surrounding separator.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="DotEnvLeadingCharacterInspection" defaultSeverity="WARNING" displayName="Invalid leading character" enabled="true" language="DotEnv" pluginId="ru.adelf.idea.dotenv" pluginVersion="2024.1" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports keys with invalid leading character in .env files. Only A-Z and '_' are allowed as first char of a key.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="DotEnvDuplicateKeyInspection" defaultSeverity="WARNING" displayName="Duplicate keys" enabled="true" language="DotEnv" pluginId="ru.adelf.idea.dotenv" pluginVersion="2024.1" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports duplicate keys in .env files.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="DotEnvExtraBlankLineInspection" defaultSeverity="WARNING" displayName="Extra blank line" enabled="true" language="DotEnv" pluginId="ru.adelf.idea.dotenv" pluginVersion="2024.1" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports extra blank lines in .env files.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="DotEnvTrailingWhitespaceInspection" defaultSeverity="WARNING" displayName="Value has trailing whitespace" enabled="true" language="DotEnv" pluginId="ru.adelf.idea.dotenv" pluginVersion="2024.1" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports trailing whitespaces.
&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Data flow" path="JavaScript and TypeScript"><inspection shortName="ReuseOfLocalVariableJS" defaultSeverity="WARNING" displayName="Reuse of local variable" enabled="false" language="JavaScript" pluginId="JavaScript" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports reusing a local variable and overwriting its
value with a new value that is not related to the original variable usage.  Reusing a local variable in this way may be confusing
because the intended semantics of the local variable may vary with each usage.  It may also cause bugs, if code changes result in values that were expected to be overwritten while they are actually live.   It is good practices to keep variable lifetimes as short as possible, and not
reuse local variables for the sake of brevity.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="UnnecessaryLocalVariableJS" defaultSeverity="WARNING" displayName="Redundant local variable" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an unnecessary local variable that does not make
a function more comprehensible: &lt;ul&gt;
&lt;li&gt;a local variable that is immediately returned&lt;/li&gt;
&lt;li&gt;a local variable that is immediately assigned to another variable and is not used anymore&lt;/li&gt;
&lt;li&gt;a local variable that always has the same value as another local variable or parameter.&lt;/li&gt;&lt;/ul&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
Use the checkbox below to have this inspection ignore variables that are immediately
returned or thrown.  Some coding styles suggest using such variables for clarity and
ease of debugging.
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Vue" path=""><inspection shortName="VueMissingComponentImportInspection" defaultSeverity="WARNING" displayName="Missing component import" enabled="true" language="Vue" pluginId="org.jetbrains.plugins.vue" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports Vue components, which require to be imported in Vue templates. It provides a quick fix to add the missing import.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="VueUnrecognizedSlot" defaultSeverity="WEAK WARNING" displayName="Unrecognized slot" enabled="true" language="Vue" pluginId="org.jetbrains.plugins.vue" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an unrecognized Vue slot.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="VueDuplicateTag" defaultSeverity="WARNING" displayName="Duplicate template/script tag" enabled="true" language="Vue" pluginId="org.jetbrains.plugins.vue" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports multiple usages of the &lt;code&gt;template&lt;/code&gt; or &lt;code&gt;script&lt;/code&gt; tag in a Vue file.
  &lt;p&gt;&lt;a href="https://vue-loader.vuejs.org/spec.html"&gt;Vue Component specification&lt;/a&gt; indicates that each &lt;code&gt;*.vue&lt;/code&gt; file can contain at most one &lt;code&gt;template&lt;/code&gt; or &lt;code&gt;script&lt;/code&gt; block at a time.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="VueDataFunction" defaultSeverity="WARNING" displayName="Data function" enabled="true" language="Vue" pluginId="org.jetbrains.plugins.vue" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a Vue component &lt;a href="https://vuejs.org/v2/api/#data"&gt;data&lt;/a&gt; property that is not a function. Suggests wrapping an object literal with a function.
&lt;p&gt;When defining a component, &lt;code&gt;data&lt;/code&gt; must be declared as a function that returns the initial data object, because the same definition will be used for creating numerous instances. If a plain object is still used for &lt;code&gt;data&lt;/code&gt;, that very object will be shared by reference across all instances created! With a &lt;code&gt;data&lt;/code&gt; function,  every time a new instance is created we can simply call it to return a fresh copy of the initial data.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="VueUnrecognizedDirective" defaultSeverity="WARNING" displayName="Unrecognized directive" enabled="true" language="Vue" pluginId="org.jetbrains.plugins.vue" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an unrecognized Vue directive.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="VueDeprecatedSymbol" defaultSeverity="WARNING" displayName="Deprecated symbol" enabled="true" language="Vue" pluginId="org.jetbrains.plugins.vue" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a deprecated Vue symbol.
&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Control flow issues" path="JavaScript and TypeScript"><inspection shortName="UnreachableCodeJS" defaultSeverity="WARNING" displayName="Unreachable code" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports code that can never be executed, which almost certainly indicates an error
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="UnnecessaryLabelOnBreakStatementJS" defaultSeverity="WARNING" displayName="Unnecessary label on 'break' statement" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a labeled &lt;code&gt;break&lt;/code&gt; statement
whose labels may be removed without changing the flow of control.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="UnnecessaryLabelOnContinueStatementJS" defaultSeverity="WARNING" displayName="Unnecessary label on 'continue' statement" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a labeled &lt;code&gt;continue&lt;/code&gt; statement
whose labels may be removed without changing the flow of control.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="TrivialConditionalJS" defaultSeverity="WARNING" displayName="Redundant conditional expression" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a conditional expression of the form
&lt;pre&gt;&lt;code&gt;
condition ? true : false
condition ? false : true
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
  These expressions may be safely converted to
&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
condition
!condition
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="UnnecessaryLabelJS" defaultSeverity="WARNING" displayName="Unnecessary label" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an unused label.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="IfStatementWithTooManyBranchesJS" defaultSeverity="WARNING" displayName="'if' statement with too many branches" enabled="false" language="JavaScript" pluginId="JavaScript" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an &lt;code&gt;if&lt;/code&gt; statement with too many
branches. Such statements may be confusing, and 
often indicate inadequate levels of design abstraction.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  Use the field below to specify the maximum number of branches expected.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="UnnecessaryContinueJS" defaultSeverity="WARNING" displayName="Unnecessary 'continue' statement" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an unnecessary &lt;code&gt;continue&lt;/code&gt; statement at the end of a loop. Suggests removing such statements.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ConstantConditionalExpressionJS" defaultSeverity="WARNING" displayName="Constant conditional expression" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a conditional expression in the format &lt;code&gt;true? result1: result2&lt;/code&gt; or &lt;code&gt;false? result1: result2&lt;/b&gt;.
Suggests simplifying the expression.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JSObjectNullOrUndefined" defaultSeverity="WARNING" displayName="Object is 'null' or 'undefined'" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an error caused by invoking a method,
accessing a property, or calling a function on an object that is &lt;code&gt;undefined&lt;/code&gt; or &lt;code&gt;null&lt;/code&gt;.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="IfStatementWithIdenticalBranchesJS" defaultSeverity="WARNING" displayName="'if' statement with identical branches" enabled="false" language="JavaScript" pluginId="JavaScript" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an &lt;code&gt;if&lt;/code&gt; statement with identical &lt;code&gt;then&lt;/code&gt; and &lt;code&gt;else&lt;/code&gt; branches. Such statements are almost
certainly an error.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="TrivialIfJS" defaultSeverity="WARNING" displayName="Redundant 'if' statement" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an &lt;code&gt;if&lt;/code&gt; statement that
can be simplified to a single assignment or
a &lt;code&gt;return&lt;/code&gt; statement.  &lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
if(foo())
 {
  return true;
 }
 else
 {
   return false;
 }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After applying the quick-fix the code looks as follows:&lt;/p&gt;
&lt;pre&gt;
 &lt;code&gt;return foo();&lt;/code&gt;
&lt;/pre&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ConditionalExpressionWithIdenticalBranchesJS" defaultSeverity="WARNING" displayName="Conditional expression with identical branches" enabled="false" language="JavaScript" pluginId="JavaScript" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a ternary conditional expression with identical &lt;code&gt;then&lt;/code&gt; and &lt;code&gt;else&lt;/code&gt; branches.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="LoopStatementThatDoesntLoopJS" defaultSeverity="WARNING" displayName="Loop statement that doesn't loop" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a &lt;code&gt;for&lt;/code&gt;, &lt;code&gt;while&lt;/code&gt;, or &lt;code&gt;do&lt;/code&gt; statement
whose bodies are guaranteed to execute at most once. Normally, this indicates an error.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="DuplicateConditionJS" defaultSeverity="WARNING" displayName="Duplicate condition in 'if' statement" enabled="false" language="JavaScript" pluginId="JavaScript" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports duplicate conditions in different branches of an
&lt;code&gt;if&lt;/code&gt; statement. Duplicate conditions usually represent programmer oversight.
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  if (a) {
    ...
  } else if (a) {
    ...
  }
&lt;/code&gt;
&lt;/pre&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="SuspiciousTypeOfGuard" defaultSeverity="WARNING" displayName="Unsound type guard check" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a &lt;code&gt;typeof&lt;/code&gt; or &lt;code&gt;instanceof&lt;/code&gt; unsound type guard check.
The &lt;code&gt;typeof x&lt;/code&gt; type guard can be unsound in one of the following two cases:
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;typeof x&lt;/code&gt; never corresponds to the specified value (for example, &lt;code&gt;typeof x === 'number'&lt;/code&gt; when &lt;code&gt;x&lt;/code&gt; is of the type 'string | boolean')&lt;/li&gt;
&lt;li&gt;&lt;code&gt;typeof x&lt;/code&gt; always corresponds to the specified value (for example,  &lt;code&gt;typeof x === 'string'&lt;/code&gt; when &lt;code&gt;x&lt;/code&gt; is of the type 'string')&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
The &lt;code&gt;x instanceof A&lt;/code&gt; type guard can be unsound in one of the following two cases:
&lt;ul&gt;
  &lt;li&gt;The type of &lt;code&gt;x&lt;/code&gt; is not related to &lt;code&gt;A&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;The type of &lt;code&gt;x&lt;/code&gt; is &lt;code&gt;A&lt;/code&gt; or a subtype of &lt;code&gt;A&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="UnnecessaryReturnJS" defaultSeverity="WARNING" displayName="Unnecessary 'return' statement" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an unnecessary &lt;code&gt;return&lt;/code&gt; statement, that is, a &lt;code&gt;return&lt;/code&gt; statement that 
returns no value and occurs just before the function would have "fallen through" the bottom.
These statements may be safely removed.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="TailRecursionJS" defaultSeverity="WARNING" displayName="Tail recursion" enabled="false" language="JavaScript" pluginId="JavaScript" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a tail recursion, that is, when a function calls itself
as its last action before returning.  A tail recursion can always be replaced by looping, which will be considerably faster.
Some JavaScript engines perform this optimization, while others do not.  Thus, tail recursive solutions may have considerably different
performance characteristics in different environments.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ForLoopReplaceableByWhileJS" defaultSeverity="WARNING" displayName="'for' loop may be replaced by 'while' loop" enabled="false" language="JavaScript" pluginId="JavaScript" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a &lt;code&gt;for&lt;/code&gt; loop
that contains neither initialization nor an update component. Suggests replacing the loop with a simpler &lt;code&gt;while&lt;/code&gt; statement.
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  for(; exitCondition(); ) {
    process();
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied the result looks like:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  while(exitCondition()) {
    process();
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;Use the checkbox below if you wish this inspection to ignore &lt;b&gt;for&lt;/b&gt; loops with trivial or non-existent conditions.&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PointlessBooleanExpressionJS" defaultSeverity="WARNING" displayName="Pointless statement or boolean expression" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a pointless or pointlessly complicated boolean expression or statement.
&lt;p&gt;Example:
&lt;pre&gt;&lt;code&gt;
  let a = !(false &amp;&amp; x);
  let b = false || x;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick fix is applied the result looks like:
&lt;pre&gt;&lt;code&gt;
  let a = true;
  let b = x;
&lt;/code&gt;&lt;/pre&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="File Watchers" path=""><inspection shortName="TaskProblemsInspection" defaultSeverity="WEAK WARNING" displayName="File watcher problems" enabled="true" pluginId="com.intellij.plugins.watcher" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an error detected by the output filters from a File Watcher.
&lt;p&gt;
A File Watcher tracks changes in files and executes the configured command when a change is detected.
&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Sass/SCSS" path=""><inspection shortName="SassScssUnresolvedPlaceholderSelector" defaultSeverity="WARNING" displayName="Unresolved placeholder selector" enabled="true" language="SCSS" pluginId="org.jetbrains.plugins.sass" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an unresolved &lt;a href="https://sass-lang.com/documentation/variables"&gt;Sass/SCSS placeholder selector&lt;/a&gt; reference.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
* {
  @extend %unknown-placeholder-selector;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="SassScssUnresolvedVariable" defaultSeverity="WARNING" displayName="Unresolved variable" enabled="true" language="SCSS" pluginId="org.jetbrains.plugins.sass" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an unresolved &lt;a href="https://sass-lang.com/documentation/variables"&gt;Sass/SCSS variable&lt;/a&gt; reference.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
* {
  margin: $unknown-var;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="SassScssUnresolvedMixin" defaultSeverity="WARNING" displayName="Unresolved mixin" enabled="true" language="SCSS" pluginId="org.jetbrains.plugins.sass" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an unresolved &lt;a href="https://sass-lang.com/documentation/at-rules/mixin"&gt;Sass/SCSS mixin&lt;/a&gt; reference.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
* {
  @include unknown-mixin;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="SassScssResolvedByNameOnly" defaultSeverity="WEAK WARNING" displayName="Missing import" enabled="true" language="CSS" pluginId="org.jetbrains.plugins.sass" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a reference to a variable, mixin, or function that is declared in another file but this file isn't 
explicitly &lt;a href="https://sass-lang.com/documentation/at-rules/import"&gt;imported&lt;/a&gt; in the current file.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
* {
  margin: $var-in-other-file;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="PSR-12" path="PHP/Code style"><inspection shortName="PhpCompoundNamespaceDepthInspection" defaultSeverity="WEAK WARNING" displayName="Compound namespace depth is more than 2" enabled="false" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the usages of compound namespaces whose depth exceeds two levels.

&lt;p&gt;According to PSR-12, compound namespaces with a depth of more than two MUST NOT be used.&lt;/p&gt;

&lt;p&gt;
  See &lt;a href="https://www.php-fig.org/psr/psr-12/#3-declare-statements-namespace-and-import-statements"&gt;PSR-12: Extended Coding Style (php-fig.org)&lt;/a&gt; for details.
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpModifierOrderInspection" defaultSeverity="WEAK WARNING" displayName="Order of modifiers" enabled="false" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports visibility modifiers that are specified in the incorrect order.

&lt;p&gt;According to PSR-12, the correct order is as follows:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;When present, the &lt;code&gt;abstract&lt;/code&gt; and &lt;code&gt;final&lt;/code&gt; declarations MUST precede the visibility declaration.&lt;/li&gt;

  &lt;li&gt;When present, the &lt;code&gt;static&lt;/code&gt; declaration MUST come after the visibility declaration.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
  See &lt;a href="https://www.php-fig.org/psr/psr-12/#46-abstract-final-and-static"&gt;PSR-12: Extended Coding Style (php-fig.org)&lt;/a&gt; for
  details.
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpSeparateElseIfInspection" defaultSeverity="WEAK WARNING" displayName="Else if" enabled="false" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the usages of the &lt;code&gt;else if&lt;/code&gt; constructs specified in two words.

&lt;p&gt;According to PSR-12, the keyword &lt;code&gt;elseif&lt;/code&gt; SHOULD be used instead of &lt;code&gt;else if&lt;/code&gt; so that all control keywords look like single words.&lt;/p&gt;

&lt;p&gt;
  See &lt;a href="https://www.php-fig.org/psr/psr-12/#51-if-elseif-else"&gt;PSR-12: Extended Coding Style (php-fig.org)&lt;/a&gt; for details.
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpTraitsUseListInspection" defaultSeverity="WEAK WARNING" displayName="One-per-line trait uses" enabled="false" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the cases of several traits being imported via a single &lt;code&gt;use&lt;/code&gt; statement.

&lt;p&gt;
  According to PSR-12, each individual trait imported into a class MUST be included one-per-line, and each inclusion MUST have its own &lt;code&gt;use&lt;/code&gt; import statement.
&lt;/p&gt;

&lt;p&gt;
  See &lt;a href="https://www.php-fig.org/psr/psr-12/#42-using-traits"&gt;PSR-12: Extended Coding Style (php-fig.org)&lt;/a&gt; for details.
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpLongTypeFormInspection" defaultSeverity="WEAK WARNING" displayName="Short form of type keywords" enabled="false" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports usages of long form type keywords.
&lt;p&gt;
  According to PSR-12, short form of type keywords MUST be used, that is &lt;code&gt;bool&lt;/code&gt; instead of &lt;code&gt;boolean&lt;/code&gt;, &lt;code&gt;int&lt;/code&gt; instead of &lt;code&gt;integer&lt;/code&gt;, and so on.
&lt;/p&gt;
&lt;p&gt;
  See &lt;a href="https://www.php-fig.org/psr/psr-12/#25-keywords-and-types"&gt;Keywords and Types (php-fig.org)&lt;/a&gt; for details.
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpNewClassMissingParameterListInspection" defaultSeverity="WEAK WARNING" displayName="Missing parameter list" enabled="false" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports missing parameter lists in a classes' instantiations.

&lt;p&gt;According to the PSR-12 specification, when instantiating a new class, parentheses MUST always be present even when there are no arguments passed to the constructor.&lt;/p&gt;

&lt;p&gt;
  See &lt;a href="https://www.php-fig.org/psr/psr-12/#4-classes-properties-and-methods"&gt;PSR-12: Extended Coding Style (php-fig.org)&lt;/a&gt; for details.
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpVarUsageInspection" defaultSeverity="WEAK WARNING" displayName="Usage of var" enabled="false" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the usages of the &lt;code&gt;var&lt;/code&gt; keyword for declaring class properties.

&lt;p&gt;According to PSR-12, the &lt;code&gt;var&lt;/code&gt; keyword MUST NOT be used to declare a property.&lt;/p&gt;

&lt;p&gt;
  See &lt;a href="https://www.php-fig.org/psr/psr-12/#43-properties-and-constants"&gt;PSR-12: Extended Coding Style (php-fig.org)&lt;/a&gt; for details.
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpMissingVisibilityInspection" defaultSeverity="WEAK WARNING" displayName="Missing visibility" enabled="false" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the properties, constants, and methods that are declared without visibility definition.
&lt;!-- tooltip end --&gt;
&lt;p&gt;According to PSR-12, visibility MUST be defined on:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
    All properties,
  &lt;/li&gt;
  &lt;li&gt;
    All constants if your project's PHP minimum version supports constant visibilities (PHP 7.1 or later),
  &lt;/li&gt;
  &lt;li&gt;
    All methods.
  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
  See &lt;a href="https://www.php-fig.org/psr/psr-12/#43-properties-and-constants"&gt;PSR-12: Extended Coding Style (php-fig.org)&lt;/a&gt; for details.
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Pest" path="PHP"><inspection shortName="InvalidTestNameCaseInspection" defaultSeverity="WARNING" displayName="Invalid test name case" enabled="true" language="PHP" pluginId="com.pestphp.pest-intellij" pluginVersion="233.13135.108" isGlobalTool="false"></inspection><inspection shortName="InvalidDatasetReferenceInspection" defaultSeverity="WARNING" displayName="Invalid dataset reference" enabled="true" language="PHP" pluginId="com.pestphp.pest-intellij" pluginVersion="233.13135.108" isGlobalTool="false"></inspection><inspection shortName="MultipleExpectChainableInspection" defaultSeverity="WARNING" displayName="Multiple expect can be chainable" enabled="true" language="PHP" pluginId="com.pestphp.pest-intellij" pluginVersion="233.13135.108" isGlobalTool="false"></inspection><inspection shortName="DuplicateTestNameInspection" defaultSeverity="WARNING" displayName="Duplicate test name" enabled="true" language="PHP" pluginId="com.pestphp.pest-intellij" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html lang="en"&gt;
&lt;body&gt;
Reports duplicate pest test names in the same file.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="DuplicateCustomExpectationInspection" defaultSeverity="WARNING" displayName="Duplicate extend name" enabled="true" language="PHP" pluginId="com.pestphp.pest-intellij" pluginVersion="233.13135.108" isGlobalTool="false"></inspection></group><group name="Confusing constructs" path="PHP/Php Inspections (EA Extended)"><inspection shortName="SenselessTernaryOperatorInspection" defaultSeverity="WARNING" displayName="Suspicious ternary operator" enabled="true" language="PHP" pluginId="com.kalessil.phpStorm.phpInspectionsEA" pluginVersion="5.0.0.0" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Documentation can be found &lt;a href="https://github.com/kalessil/phpinspectionsea/blob/master/docs/confusing-constructs.md#suspicious-ternary-operator"&gt;here&lt;/a&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ClassMethodNameMatchesFieldNameInspection" defaultSeverity="WEAK WARNING" displayName="Method name matches existing field name" enabled="true" language="PHP" pluginId="com.kalessil.phpStorm.phpInspectionsEA" pluginVersion="5.0.0.0" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Documentation can be found &lt;a href="https://github.com/kalessil/phpinspectionsea/blob/master/docs/confusing-constructs.md#method-name-matches-existing-field-name"&gt;here&lt;/a&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="UselessReturnInspection" defaultSeverity="WEAK WARNING" displayName="Useless return" enabled="true" language="PHP" pluginId="com.kalessil.phpStorm.phpInspectionsEA" pluginVersion="5.0.0.0" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Documentation can be found &lt;a href="https://github.com/kalessil/phpinspectionsea/blob/master/docs/confusing-constructs.md#useless-return"&gt;here&lt;/a&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="NestedTernaryOperatorInspection" defaultSeverity="WARNING" displayName="Nested ternary operator" enabled="true" language="PHP" pluginId="com.kalessil.phpStorm.phpInspectionsEA" pluginVersion="5.0.0.0" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Documentation can be found &lt;a href="https://github.com/kalessil/phpinspectionsea/blob/master/docs/confusing-constructs.md#nested-ternary-operator"&gt;here&lt;/a&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ReferencingObjectsInspection" defaultSeverity="WARNING" displayName="Referencing objects" enabled="true" language="PHP" pluginId="com.kalessil.phpStorm.phpInspectionsEA" pluginVersion="5.0.0.0" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Documentation can be found &lt;a href="https://github.com/kalessil/phpinspectionsea/blob/master/docs/confusing-constructs.md#referencing-objects"&gt;here&lt;/a&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Type compatibility" path="PHP"><inspection shortName="PhpNullIsNotCompatibleWithParameterInspection" defaultSeverity="ERROR" displayName="'null' is not compatible with parameter's declared type" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the variables that are initialised via passing them by reference to a parameter incompatible with &lt;code&gt;null&lt;/code&gt;.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpMissingReturnTypeInspection" defaultSeverity="WEAK WARNING" displayName="Missing return type declaration" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the functions that have no return type declaration specified.
&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="PhpRedundantTypeInUnionTypeInspection" defaultSeverity="WEAK WARNING" displayName="Type declaration is redundant and could be simplified" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports union type declarations that contain redundant types, for example, a union type that contains both the class alias and the original class.
&lt;p&gt;
  See &lt;a href="https://wiki.php.net/rfc/union_types_v2#duplicate_and_redundant_types"&gt;Union Types RFC: Duplicate and redundant types (php.net)&lt;/a&gt; for details.
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpMissingParamTypeInspection" defaultSeverity="WEAK WARNING" displayName="Missing parameter's type declaration" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the parameters that have no type declaration specified.
&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="PhpRedundantIntersectionTypeInspection" defaultSeverity="WEAK WARNING" displayName="Redundant intersection type" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the intersection type declarations that contain redundant types, for example, an intersection type that contains both the parent class and its subclass.
&lt;p&gt;
  See &lt;a href="https://wiki.php.net/rfc/pure-intersection-types"&gt;PHP RFC: Pure intersection types (php.net)&lt;/a&gt; for details.
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpIncompatibleReturnTypeInspection" defaultSeverity="WARNING" displayName="Incompatible return type" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
  Reports the &lt;code&gt;return&lt;/code&gt; statements whose return value type is not compatible with the one declared for a function/method.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpMissingStrictTypesDeclarationInspection" defaultSeverity="WEAK WARNING" displayName="Missing strict types declaration" enabled="false" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
  Detects the missing &lt;code&gt;declare(strict_types=1)&lt;/code&gt; directive in the file.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  See &lt;a href="https://www.php.net/manual/en/language.types.declarations.php#language.types.declarations.strict"&gt;Strict typing (php.net)&lt;/a&gt; to learn more about why you may need use this directive.
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpMissingClassConstantTypeInspection" defaultSeverity="WEAK WARNING" displayName="Class constant type is missing" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a class constant to which type can be appended
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpArrayAccessOnIllegalTypeInspection" defaultSeverity="WEAK WARNING" displayName="Array offset access on illegal type" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the array offset access expressions that are used on illegal types.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpIllegalArrayKeyTypeInspection" defaultSeverity="WARNING" displayName="Illegal array key type" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
  Reports the array keys that are of illegal type, such as objects or arrays.
    &lt;p&gt;
    See &lt;a href="http://www.php.net/manual/en/language.types.array.php"&gt;Arrays (php.net)&lt;/a&gt; for details.
  &lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="PhpParamsInspection" defaultSeverity="WARNING" displayName="Parameter type" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the parameters passed to a function call, whose types do not match the ones
specified in the function definition via type declaration or the PHPDoc &lt;code&gt;@param&lt;/code&gt; tag.
&lt;!-- tooltip end --&gt;

&lt;p&gt;See &lt;a href="http://php.net/manual/en/functions.arguments.php#functions.arguments.type-declaration"&gt;Type declarations (php.net)&lt;/a&gt; and
  &lt;a href="https://docs.phpdoc.org/guide/references/phpdoc/tags/param.html#param"&gt;@param (phpdoc.org)&lt;/a&gt; for details.&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpIllegalStringOffsetInspection" defaultSeverity="WARNING" displayName="Illegal string offset" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the usages of non-&lt;code&gt;integer&lt;/code&gt; offsets in string access expressions such as &lt;code&gt;$str[42]&lt;/code&gt;.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  Starting from PHP 5.4, string offsets have to be either integers or integer-like strings.
  Since it's considered bad practice to use strings as a string offset, the inspection reports them, as well.
&lt;/p&gt;
&lt;p&gt;See &lt;a href="https://www.php.net/manual/en/language.types.string.php#language.types.string.substr"&gt;String access and modification by character (php.net)&lt;/a&gt; for details.
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpWrongForeachArgumentTypeInspection" defaultSeverity="WARNING" displayName="Invalid argument supplied for 'foreach()'" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the &lt;code&gt;foreach&lt;/code&gt; constructs used on variables of the &lt;code&gt;string&lt;/code&gt;, &lt;code&gt;float&lt;/code&gt;, &lt;code&gt;int&lt;/code&gt;, or &lt;code&gt;boolean&lt;/code&gt; type.

&lt;p&gt;
  See &lt;a
      href="http://www.php.net/manual/en/control-structures.foreach.php"&gt;foreach (php.net)&lt;/a&gt; for details.
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpFieldAssignmentTypeMismatchInspection" defaultSeverity="WARNING" displayName="Type mismatch in property assignment" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports type violations in properties assignments.
&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="PhpArithmeticTypeCheckInspection" defaultSeverity="ERROR" displayName="Arithmetic operation with unsupported operands" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;

Reports arithmetic and bitwise expressions with unsupported operands.

&lt;p&gt;
  Starting with PHP 8.0, using the arithmetic and bitwise operators &lt;code&gt;+&lt;/code&gt;, &lt;code&gt;-&lt;/code&gt;, &lt;code&gt;*&lt;/code&gt;, &lt;code&gt;/&lt;/code&gt;, &lt;code&gt;**&lt;/code&gt;, &lt;code&gt;%&lt;/code&gt;, &lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt;, &lt;code&gt;&gt;&gt;&lt;/code&gt;, &lt;code&gt;&amp;&lt;/code&gt;, &lt;code&gt;|&lt;/code&gt;, &lt;code&gt;^&lt;/code&gt;, &lt;code&gt;~&lt;/code&gt;, &lt;code&gt;++&lt;/code&gt;, &lt;code&gt;--&lt;/code&gt;
  when one of the operands is an array, resource, or non-overloaded object will result in a &lt;code&gt;TypeError&lt;/code&gt;. The only exception is the
  &lt;code&gt;array + array&lt;/code&gt; merge operation, which remains supported.
&lt;/p&gt;

&lt;p&gt;
  See &lt;a href="https://github.com/php/php-src/blob/master/Zend/tests/operator_unsupported_types.phpt"&gt;PHP's internal test source&lt;/a&gt; for the complete list of operations.
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpMissingFieldTypeInspection" defaultSeverity="WEAK WARNING" displayName="Missing property's type declaration" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the properties that have no type declaration.
&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="PhpStrictTypeCheckingInspection" defaultSeverity="ERROR" displayName="Strict type checking rules violation" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports violations of the strict type checking rules.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  In strict mode, only the variables exactly matching the declaration types are accepted. Strict type-checking mode can be enabled:
&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Per file, if the &lt;code&gt;declare(strict_types=1)&lt;/code&gt; directive is specified.
    The directive must be the first statement in a file, block mode is explicitly disallowed.
  &lt;/li&gt;
  &lt;li&gt;For all files, if the &lt;b&gt;Enable for all files&lt;/b&gt; inspection option is enabled.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
  See &lt;a href="https://www.php.net/manual/en/language.types.declarations.php#language.types.declarations.strict"&gt;Strict typing (php.net)&lt;/a&gt; for details.
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Compatibility" path="PHP/Php Inspections (EA Extended)"><inspection shortName="MktimeUsageInspection" defaultSeverity="WARNING" displayName="'gmmktime(...)'/'mktime(...)' usage" enabled="true" language="PHP" pluginId="com.kalessil.phpStorm.phpInspectionsEA" pluginVersion="5.0.0.0" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Analyzes gmmktime(), mktime() calls and reports multiple compatibility issues.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="RandomApiMigrationInspection" defaultSeverity="WARNING" displayName="Random API migration" enabled="true" language="PHP" pluginId="com.kalessil.phpStorm.phpInspectionsEA" pluginVersion="5.0.0.0" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports rand(), srand(), getrandmax() calls suggesting usage of corresponding recommended alternatives.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="FopenBinaryUnsafeUsageInspection" defaultSeverity="WARNING" displayName="Binary-unsafe 'fopen(...)' usage" enabled="true" language="PHP" pluginId="com.kalessil.phpStorm.phpInspectionsEA" pluginVersion="5.0.0.0" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
From official documentation:

&lt;blockquote&gt;
    &lt;b&gt;Note:&lt;/b&gt;&lt;br /&gt;
    For portability, it is strongly recommended that you always use the 'b' flag when opening files with fopen().
&lt;/blockquote&gt;

&lt;blockquote&gt;
    &lt;b&gt;Note:&lt;/b&gt;&lt;br /&gt;
    Again, for portability, it is also strongly recommended that you re-write code that uses or relies upon
    the 't' mode so that it uses the correct line endings and 'b' mode instead.
&lt;/blockquote&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="DeprecatedIniOptionsInspection" defaultSeverity="WARNING" displayName="Deprecated configuration options" enabled="true" language="PHP" pluginId="com.kalessil.phpStorm.phpInspectionsEA" pluginVersion="5.0.0.0" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Analyzes ini_get(), ini_set(), and ini_restore() functions, and reports if deprecated configuration option names are used.
&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="RELAX NG" path=""><inspection shortName="UnusedDefine" defaultSeverity="WARNING" displayName="Unused define" enabled="false" pluginId="com.intellij" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an unused named pattern (&lt;code&gt;define&lt;/code&gt;) in a RELAX-NG file (XML or Compact Syntax).
&lt;code&gt;define&lt;/code&gt; elements that are used through an include in another file are ignored.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="UnresolvedReference" defaultSeverity="ERROR" displayName="Unresolved reference" enabled="true" pluginId="com.intellij" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an unresolved reference to a named pattern (&lt;code&gt;define&lt;/code&gt;) in RELAX-NG files that use XML syntax.
Suggests creating the referenced &lt;code&gt;define&lt;/code&gt; element.
&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Probable bugs" path="CSS"><inspection shortName="CssNoGenericFontName" defaultSeverity="WARNING" displayName="Missing generic font family name" enabled="true" language="CSS" pluginId="com.intellij.css" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Verifies that the &lt;code&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/font-family"&gt;font-family&lt;/a&gt;&lt;/code&gt; property
contains a generic font family name as a fallback alternative.
&lt;p&gt;
  Generic font family names are: &lt;code&gt;serif&lt;/code&gt;, &lt;code&gt;sans-serif&lt;/code&gt;, &lt;code&gt;cursive&lt;/code&gt;, &lt;code&gt;fantasy&lt;/code&gt;,
  and &lt;code&gt;monospace&lt;/code&gt;.
&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="CssNonIntegerLengthInPixels" defaultSeverity="WEAK WARNING" displayName="Non-integer length in pixels" enabled="true" language="CSS" pluginId="com.intellij.css" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a non-integer length in pixels.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; width: 3.14px&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="CssMissingComma" defaultSeverity="WARNING" displayName="Missing comma in selector list" enabled="true" language="CSS" pluginId="com.intellij.css" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a multi-line selector. Most likely this means that several single-line selectors are actually intended
but a comma is missing at the end of one or several lines.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
input /* comma has probably been forgotten */
.button {
  margin: 1px;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Async code and promises" path="JavaScript and TypeScript"><inspection shortName="JSIgnoredPromiseFromCall" defaultSeverity="WEAK WARNING" displayName="Result of method call returning a promise is ignored" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a function call that returns a &lt;code&gt;Promise&lt;/code&gt; that is not used later.
Such calls are usually unintended and indicate an error.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ES6TopLevelAwaitExpression" defaultSeverity="ERROR" displayName="Top-level 'await' expression" enabled="false" language="JavaScript" pluginId="JavaScript" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a usage of a top-level &lt;code&gt;await&lt;/code&gt; expression.
&lt;!-- tooltip end --&gt;
While the new 'top-level async' proposal is on its way, using &lt;code&gt;await&lt;/code&gt; outside async functions is not allowed.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ES6RedundantAwait" defaultSeverity="WEAK WARNING" displayName="Redundant 'await' expression" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a redundant usage of &lt;code&gt;await&lt;/code&gt;, such as &lt;code&gt;await await&lt;/code&gt;, or awaiting a non-promise result.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  When the 'Report for promises' option is selected, suggests removing &lt;code&gt;await&lt;/code&gt; before promises when applicable
  (in &lt;code&gt;return&lt;/code&gt; statements, and with &lt;code&gt;Promise.resolve/reject&lt;/code&gt;).
&lt;/p&gt;
&lt;p&gt;Removing &lt;code&gt;await&lt;/code&gt; in such contexts causes two problems.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
    Surrounding your code with &lt;code&gt;try-catch&lt;/code&gt; and forgetting to add
    &lt;code&gt;await&lt;/code&gt; will change code semantics while you may fail to notice that.
  &lt;/li&gt;
  &lt;li&gt;
    Having an explicit &lt;code&gt;await&lt;/code&gt; may prevent the V8 runtime from providing
    &lt;a href="http://bit.ly/v8-zero-cost-async-stack-traces"&gt;async stack traces&lt;/a&gt;.
  &lt;/li&gt;
&lt;/ul&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ES6PossiblyAsyncFunction" defaultSeverity="WEAK WARNING" displayName="'await' in non-async function" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a usage of &lt;code&gt;await&lt;/code&gt; in a function that was possibly intended to be async but is actually missing the &lt;code&gt;async&lt;/code&gt; modifier.
&lt;!-- tooltip end --&gt;
Although &lt;code&gt;await&lt;/code&gt; can be used as an identifier, it is likely that it was intended to be used as an operator, so
the containing function should be made &lt;code&gt;async&lt;/code&gt;.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ES6MissingAwait" defaultSeverity="WEAK WARNING" displayName="Missing await for an async function call" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an &lt;code&gt;async&lt;/code&gt; function call without an expected &lt;code&gt;await&lt;/code&gt; prefix inside an &lt;code&gt;async&lt;/code&gt; function.
Such call returns a &lt;code&gt;Promise&lt;/code&gt; and control flow is continued immediately.
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
async function bar() { /* ... */ }
async function foo() {
    bar(); // bad
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
After the quick-fix is applied, the &lt;code&gt;await&lt;/code&gt; prefix is added:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
async function bar() { /* ... */ }
async function foo() {
    await bar(); // good
}
&lt;/code&gt;&lt;/pre&gt;
&lt;br/&gt;
When the 'Report for promises in return statements' checkbox is selected, also suggests adding &lt;code&gt;await&lt;/code&gt; in return statements.&lt;br/&gt;
While this is generally not necessary, it gives two main benefits.&lt;br/&gt;&lt;ul&gt;&lt;li&gt;
You won't forget to add &lt;code&gt;await&lt;/code&gt; when surrounding your code with &lt;code&gt;try-catch&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;An explicit &lt;code&gt;await&lt;/code&gt; helps V8 runtime to provide &lt;a href="https://bit.ly/v8-zero-cost-async-stack-traces"&gt;async stack traces&lt;/a&gt;.&lt;/li&gt;&lt;/ul&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Security" path="PHP/Php Inspections (EA Extended)"><inspection shortName="SecurityAdvisoriesInspection" defaultSeverity="WARNING" displayName="Security advisories for Composer packages" enabled="true" language="JSON" pluginId="com.kalessil.phpStorm.phpInspectionsEA" pluginVersion="5.0.0.0" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Documentation can be found &lt;a href="https://github.com/kalessil/phpinspectionsea/blob/master/docs/security.md#security-advisories"&gt;here&lt;/a&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="CryptographicallySecureRandomnessInspection" defaultSeverity="ERROR" displayName="Cryptographically secure randomness" enabled="true" language="PHP" pluginId="com.kalessil.phpStorm.phpInspectionsEA" pluginVersion="5.0.0.0" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Documentation can be found &lt;a href="https://github.com/kalessil/phpinspectionsea/blob/master/docs/security.md#cryptographically-secure-randomness"&gt;here&lt;/a&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="EncryptionInitializationVectorRandomnessInspection" defaultSeverity="ERROR" displayName="Encryption initialization vector randomness" enabled="true" language="PHP" pluginId="com.kalessil.phpStorm.phpInspectionsEA" pluginVersion="5.0.0.0" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Checks if openssl_encrypt/mcrypt_encrypt IV was generated by using random_bytes/openssl_random_pseudo_bytes/mcrypt_create_iv.&lt;br /&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="UntrustedInclusionInspection" defaultSeverity="ERROR" displayName="Untrusted files inclusion" enabled="false" language="PHP" pluginId="com.kalessil.phpStorm.phpInspectionsEA" pluginVersion="5.0.0.0" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Documentation can be found &lt;a href="https://github.com/kalessil/phpinspectionsea/blob/master/docs/security.md#untrusted-files-inclusion"&gt;here&lt;/a&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="HostnameSubstitutionInspection" defaultSeverity="ERROR" displayName="Hostname substitution" enabled="true" language="PHP" pluginId="com.kalessil.phpStorm.phpInspectionsEA" pluginVersion="5.0.0.0" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Please follow this &lt;a href="https://expressionengine.com/blog/http-host-and-server-name-security-issues"&gt;link&lt;/a&gt; for more details.&lt;br/&gt;
&lt;br/&gt;
Shortly: due to server configuration issues, e-mail sub-systems can be easily exploited.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="NonSecureParseStrUsageInspection" defaultSeverity="ERROR" displayName="Insecure 'parse_str(...)' usage (Variable extract Vulnerability)" enabled="true" language="PHP" pluginId="com.kalessil.phpStorm.phpInspectionsEA" pluginVersion="5.0.0.0" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Documentation can be found &lt;a href="https://github.com/kalessil/phpinspectionsea/blob/master/docs/security.md#variables-extraction"&gt;here&lt;/a&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="NonSecureUniqidUsageInspection" defaultSeverity="ERROR" displayName="Insecure 'uniqid(...)' usage (Insufficient Entropy Vulnerability)" enabled="true" language="PHP" pluginId="com.kalessil.phpStorm.phpInspectionsEA" pluginVersion="5.0.0.0" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Analyzes uniqid() calls and reports if 'more_entropy' parameter is not provided.&lt;br/&gt;
&lt;br/&gt;
Prefix usage aids in identifying the source of the ID within the code and the more_entropy parameter improves randomness.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="CurlSslServerSpoofingInspection" defaultSeverity="ERROR" displayName="CURL: SSL server spoofing (SSL MITM and Spoofing Attacks)" enabled="true" language="PHP" pluginId="com.kalessil.phpStorm.phpInspectionsEA" pluginVersion="5.0.0.0" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Documentation can be found &lt;a href="https://github.com/kalessil/phpinspectionsea/blob/master/docs/security.md#ssl-server-spoofing"&gt;here&lt;/a&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="UnserializeExploitsInspection" defaultSeverity="ERROR" displayName="Exploiting unserialize (PHP Object Injection Vulnerability)" enabled="true" language="PHP" pluginId="com.kalessil.phpStorm.phpInspectionsEA" pluginVersion="5.0.0.0" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Documentation can be found &lt;a href="https://github.com/kalessil/phpinspectionsea/blob/master/docs/security.md#exploiting-unserialize"&gt;here&lt;/a&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="BacktickOperatorUsageInspection" defaultSeverity="WARNING" displayName="Backtick operator usage" enabled="true" language="PHP" pluginId="com.kalessil.phpStorm.phpInspectionsEA" pluginVersion="5.0.0.0" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Suggested 'shell_exec(...)' usage is security analysis friendly, as the operator being rarely used.
&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="PotentialMalwareInspection" defaultSeverity="ERROR" displayName="Basic malware patterns" enabled="true" language="PHP" pluginId="com.kalessil.phpStorm.phpInspectionsEA" pluginVersion="5.0.0.0" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Documentation can be found &lt;a href="https://github.com/kalessil/phpinspectionsea/blob/master/docs/security.md#basic-malware-patterns"&gt;here&lt;/a&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="CryptographicallySecureAlgorithmsInspection" defaultSeverity="ERROR" displayName="Cryptographically secure algorithms" enabled="true" language="PHP" pluginId="com.kalessil.phpStorm.phpInspectionsEA" pluginVersion="5.0.0.0" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Documentation can be found &lt;a href="https://github.com/kalessil/phpinspectionsea/blob/master/docs/security.md#cryptographically-secure-algorithms"&gt;here&lt;/a&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="JSON and JSON5" path=""><inspection shortName="JsonStandardCompliance" defaultSeverity="ERROR" displayName="Compliance with JSON standard" enabled="true" language="JSON" pluginId="com.intellij" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the following discrepancies of a JSON file with  &lt;a href="https://tools.ietf.org/html/rfc7159"&gt;the language specification&lt;/a&gt;:
&lt;ul&gt;
  &lt;li&gt;A line or  block comment (configurable).&lt;/li&gt;
  &lt;li&gt;Multiple top-level values (expect for JSON Lines files, configurable for others).&lt;/li&gt;
  &lt;li&gt;A trailing comma in an object or array (configurable).&lt;/li&gt;
  &lt;li&gt;A single quoted string.&lt;/li&gt;
  &lt;li&gt;A property key is a not a double quoted strings.&lt;/li&gt;
  &lt;li&gt;A NaN or Infinity/-Infinity numeric value as a floating point literal (configurable).&lt;/li&gt;
&lt;/ul&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JsonSchemaDeprecation" defaultSeverity="WEAK WARNING" displayName="Deprecated JSON property" enabled="true" language="JSON" pluginId="com.intellij" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a deprecated property in a JSON file.&lt;br&gt;
Note that deprecation mechanism is not defined in the JSON Schema specification yet,
and this inspection uses a non-standard extension 'deprecationMessage'.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JsonSchemaRefReference" defaultSeverity="WARNING" displayName="Unresolved '$ref' and '$schema' references" enabled="true" language="JSON" pluginId="com.intellij" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an unresolved &lt;code&gt;$ref&lt;/code&gt; or &lt;code&gt;$schema&lt;/code&gt; path in a JSON schema.&lt;br&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="Json5StandardCompliance" defaultSeverity="ERROR" displayName="Compliance with JSON5 standard" enabled="true" language="JSON5" pluginId="com.intellij" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports inconsistency with &lt;a href="http://json5.org"&gt;the language specification&lt;/a&gt; in a JSON5 file.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JsonDuplicatePropertyKeys" defaultSeverity="WARNING" displayName="Duplicate keys in object literals" enabled="true" language="JSON" pluginId="com.intellij" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a duplicate key in an object literal.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JsonSchemaCompliance" defaultSeverity="WARNING" displayName="Compliance with JSON schema" enabled="true" language="JSON" pluginId="com.intellij" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports inconsistence between a JSON file and the &lt;a href="https://json-schema.org"&gt;JSON schema&lt;/a&gt; that is assigned to it.&lt;br&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Code Coverage" path=""><inspection shortName="PhpCoverageInspection" defaultSeverity="WARNING" displayName="Check the PHP source code coverage" enabled="true" language="PHP" pluginId="org.intellij.qodana" pluginVersion="233.13135.108" isGlobalTool="true">&lt;html&gt;
&lt;body&gt;
Reports methods, classes and files whose coverage is below a certain threshold.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JsCoverageInspection" defaultSeverity="WARNING" displayName="Check JavaScript and TypeScript source code coverage" enabled="true" language="JavaScript" pluginId="org.intellij.qodana" pluginVersion="233.13135.108" isGlobalTool="true">&lt;html&gt;
&lt;body&gt;
Reports methods, classes and files whose coverage is below a certain threshold.
&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Cucumber" path=""><inspection shortName="GherkinMisplacedBackground" defaultSeverity="ERROR" displayName="Misplaced background section" enabled="true" language="Gherkin" pluginId="gherkin" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;code&gt;Background&lt;/code&gt; sections that are located incorrectly. The &lt;code&gt;Background&lt;/code&gt; section must be located before the
&lt;code&gt;Scenario&lt;/code&gt; section.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="GherkinScenarioToScenarioOutline" defaultSeverity="ERROR" displayName="Scenario with Examples section" enabled="true" language="Gherkin" pluginId="gherkin" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports Gherkin scenarios that contain an &lt;code&gt;Examples&lt;/code&gt; section.
&lt;p&gt;Use the quick-fix to convert &lt;code&gt;Scenario&lt;/code&gt; to &lt;code&gt;Scenario Outline&lt;/code&gt;.&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="CucumberUndefinedStep" defaultSeverity="WARNING" displayName="Undefined step" enabled="true" language="Gherkin" pluginId="gherkin" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports steps in Cucumber (or some other Gherkin) .feature files that do not have matching step definitions.
&lt;p&gt;Use the quick-fix to automatically create a new step definition.&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="CucumberExamplesColon" defaultSeverity="ERROR" displayName="Missing ':' after examples keyword" enabled="true" language="Gherkin" pluginId="gherkin" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;code&gt;Examples&lt;/code&gt; sections in Cucumber .feature files if they do not have ':' after the &lt;code&gt;Examples&lt;/code&gt; keyword.
&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="CucumberTableInspection" defaultSeverity="WARNING" displayName="Unused or missing columns in Cucumber tables" enabled="true" language="Gherkin" pluginId="gherkin" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports tables in &lt;code&gt;Examples&lt;/code&gt; sections in Cucumber .feature files with unused or missing columns.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="GherkinBrokenTableInspection" defaultSeverity="ERROR" displayName="Gherkin table is broken" enabled="true" language="Gherkin" pluginId="gherkin" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a table if there is at least one row with the number of cells different from the number of cells in the table header.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="CucumberMissedExamples" defaultSeverity="ERROR" displayName="Missing examples section" enabled="true" language="Gherkin" pluginId="gherkin" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
    Reports scenario outlines in Cucumber .feature files that do not have the &lt;code&gt;Examples&lt;/code&gt; section.
    &lt;p&gt;Use the quick-fix to automatically create the &lt;code&gt;Examples&lt;/code&gt; section with a pre-filled table header.&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Security" path=""><inspection shortName="HttpUrlsUsage" defaultSeverity="WEAK WARNING" displayName="Link with unencrypted protocol" enabled="true" pluginId="com.jetbrains.restClient" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports the links that use unencrypted protocols (such as HTTP), which can expose your data to man-in-the-middle attacks. These attacks
  are dangerous in general and may be especially harmful for artifact repositories. Use protocols with encryption, such as HTTPS,
  instead.&lt;/p&gt;
&lt;p&gt;See &lt;a href="https://en.wikipedia.org/wiki/HTTPS#Difference_from_HTTP"&gt;HTTPS: Difference from HTTP (wikipedia.org)&lt;/a&gt;.&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Regular expressions" path="PHP"><inspection shortName="PhpRegExpInvalidDelimiterInspection" defaultSeverity="WARNING" displayName="Invalid delimiter" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports invalid delimiters in regular expressions in two cases:
1. If a delimiter is an alphanumeric or a backslash.
2. If a delimiter is used in a regular expression pattern.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpRegExpRedundantModifierInspection" defaultSeverity="WEAK WARNING" displayName="Redundant modifier" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the &lt;code&gt;i&lt;/code&gt; (case insensitivity) modifiers that are used in regular expression patterns containing no letters. Such modifiers are redundant and can be safely removed.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpRangesInClassCanBeMergedInspection" defaultSeverity="WEAK WARNING" displayName="Ranges in class can be merged" enabled="true" language="RegExp" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the alphabetic ranges or characters in regular expression character classes that only adjust the already existing ranges. Such elements can be merged with the adjusted ranges.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpRegExpUnsupportedModifierInspection" defaultSeverity="WARNING" displayName="Unsupported modifier" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the usages of the &lt;code&gt;e&lt;/code&gt; modifier in regular expression patterns. In PHP 7.0 and later, such usages are deprecated and will emit an &lt;code&gt;E_WARNING&lt;/code&gt;.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpCoveredCharacterInClassInspection" defaultSeverity="WEAK WARNING" displayName="Element in class is already covered" enabled="true" language="RegExp" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the elements in regular expression character classes that are already covered by another element in the same class. Such elements are redundant and can be safely removed.
&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="TypeScript" path="JavaScript and TypeScript"><inspection shortName="TypeScriptDuplicateUnionOrIntersectionType" defaultSeverity="WARNING" displayName="Duplicate union or intersection type component" enabled="true" language="TypeScript" pluginId="JavaScript" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a duplicate type inside a union or intersection.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="TypeScriptExplicitMemberType" defaultSeverity="INFORMATION" displayName="Explicit types" enabled="true" language="TypeScript" pluginId="JavaScript" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a type annotation that doesn't match the current code style for explicit types.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  Type declarations are not necessary when the type that is inferred from the context exactly matches the type annotation, for example:
&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
    var pi: number = 3.14
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In some cases it is preferable to always have explicit types - this prevents accidental type changes and makes code more explicit.&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="TypeScriptRedundantGenericType" defaultSeverity="WEAK WARNING" displayName="Redundant type arguments" enabled="true" language="TypeScript" pluginId="JavaScript" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a type argument that is equal to the default one and can be removed.
&lt;p&gt;
Example:
&lt;pre&gt;&lt;code&gt;
type Foo&amp;lt;T=number&amp;gt; = T;
let z: Foo&amp;lt;number&amp;gt;;
&lt;/code&gt;&lt;/pre&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="TypeScriptValidateJSTypes" defaultSeverity="WEAK WARNING" displayName="Type mismatch in 'any' type" enabled="true" language="TypeScript" pluginId="JavaScript" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a function call with a parameter, return value, or assigned expression or incorrect type, 
if the context symbol can be implicitly resolved to the &lt;code&gt;any&lt;/code&gt; type.
&lt;pre&gt;
declare var test: any;
test.hasOwnProperty(true); //reports 'true'
&lt;/pre&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="TypeScriptValidateGenericTypes" defaultSeverity="ERROR" displayName="Incorrect generic type argument" enabled="true" language="TypeScript" pluginId="JavaScript" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an invalid type argument in a function, interface, or class declaration.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="TypeScriptSmartCast" defaultSeverity="WARNING" displayName="Narrowed type" enabled="true" language="TypeScript" pluginId="JavaScript" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a usage of a variable where the variable type is narrowed by a type guard.
Note that severity level doesn't affect this inspection.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="TypeScriptUMDGlobal" defaultSeverity="WEAK WARNING" displayName="Referenced UMD global variable" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a usage of a Universal Module Definition (UMD) global variable if the current file is a module (ECMAScript or CommonJS).
Referencing UMD variables without explicit imports can lead to a runtime error if the library isn't included implicitly.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="TypeScriptSuspiciousConstructorParameterAssignment" defaultSeverity="WARNING" displayName="Assigned constructor field parameter" enabled="true" language="TypeScript" pluginId="JavaScript" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a common mistake in TypeScript code, when a class field is declared as a constructor parameter, and then this parameter is assigned.&lt;br/&gt;
In this case, the corresponding field &lt;i&gt;won't&lt;/i&gt; be assigned, only the local parameter value is modified.
&lt;pre&gt;&lt;code&gt;
class Foo {
  constructor(private p: number) {
    p = 1; //must be this.p = 1;
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="TypeScriptAbstractClassConstructorCanBeMadeProtected" defaultSeverity="WEAK WARNING" displayName="Abstract class constructor can be made protected" enabled="true" language="TypeScript" pluginId="JavaScript" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a public constructor of an abstract class and suggests making it protected (because it is useless to have it public).
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="TypeScriptConfig" defaultSeverity="WARNING" displayName="Inconsistent tsconfig.json properties" enabled="true" language="JSON" pluginId="JavaScript" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports inconsistency  of a &lt;code&gt;paths&lt;/code&gt;, &lt;code&gt;checkJs&lt;/code&gt;, or &lt;code&gt;extends&lt;/code&gt; property in a tsconfig.json file.
&lt;br&gt;
The &lt;code&gt;checkJs&lt;/code&gt; property requires &lt;code&gt;allowJs&lt;/code&gt;.
&lt;br&gt;
The &lt;code&gt;extends&lt;/code&gt; property should be a valid file reference.

&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="TypeScriptLibrary" defaultSeverity="ERROR" displayName="Missing global library" enabled="true" language="TypeScript" pluginId="JavaScript" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a TypeScript library file that is required for a symbol but is not listed under the &lt;code&gt;lib&lt;/code&gt; compiler option in &lt;code&gt;tsconfig.json&lt;/code&gt;.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="TypeScriptJSXUnresolvedComponent" defaultSeverity="WEAK WARNING" displayName="Unresolved JSX component" enabled="true" language="TypeScript" pluginId="JavaScript" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an unresolved reference to a JSX component.
Suggests adding an import statement if the referenced component is defined in the project or its dependencies or creating a new component with the specified name.
&lt;p&gt;The template for a new component can be modified in Editor | File and Code Templates.&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="TypeScriptMissingConfigOption" defaultSeverity="WARNING" displayName="Missing tsconfig.json option " enabled="true" language="TypeScript" pluginId="JavaScript" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a usage that requires an explicit option in &lt;code&gt;tsconfig.json&lt;/code&gt;.
For example, to use JSX in &lt;code&gt;.tsx&lt;/code&gt; files, &lt;code&gt;tsconfig.json&lt;/code&gt; must contain &lt;code&gt;"jsx"&lt;/code&gt; property.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="TypeScriptMissingAugmentationImport" defaultSeverity="INFORMATION" displayName="Missing augmentation import" enabled="true" language="TypeScript" pluginId="JavaScript" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a usage from 
&lt;a href="https://www.typescriptlang.org/docs/handbook/declaration-merging.html#module-augmentation"&gt;augmentation module&lt;/a&gt; without an explicit import.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="TypeScriptCheckImport" defaultSeverity="ERROR" displayName="Unresolved imported name" enabled="true" language="TypeScript" pluginId="JavaScript" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an unresolved name or binding in an &lt;code&gt;import&lt;/code&gt; declaration in TypeScript code.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="TypeScriptValidateTypes" defaultSeverity="ERROR" displayName="Type mismatch" enabled="true" language="TypeScript" pluginId="JavaScript" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a parameter, return value, or assigned expression of incorrect type.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="TypeScriptUnresolvedReference" defaultSeverity="ERROR" displayName="Unresolved TypeScript reference" enabled="true" language="TypeScript" pluginId="JavaScript" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an unresolved reference in TypeScript code.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JSEqualityComparisonWithCoercion.TS" defaultSeverity="WARNING" displayName="Equality operator may cause type coercion" enabled="false" language="TypeScript" pluginId="JavaScript" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a usage of equality operators  may cause unexpected type coercions.
Suggests replacing &lt;code&gt;==&lt;/code&gt; or &lt;code&gt;!=&lt;/code&gt; equality operators with type-safe &lt;code&gt;===&lt;/code&gt; or &lt;code&gt;!==&lt;/code&gt; operators.

&lt;p&gt;Depending on the option selected, one of the following cases will be reported:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    All usages of &lt;code&gt;==&lt;/code&gt; and &lt;code&gt;!=&lt;/code&gt; operators.
  &lt;/li&gt;
  &lt;li&gt;
    All usages except comparison with null. Some code styles allow using &lt;code&gt;x == null&lt;/code&gt; as a replacement for
    &lt;code&gt;x === null || x === undefined&lt;/code&gt;.
  &lt;/li&gt;
  &lt;li&gt;
    Only suspicious expressions, such as: &lt;code&gt;==&lt;/code&gt; or &lt;code&gt;!=&lt;/code&gt; comparisons
    with &lt;code&gt;0&lt;/code&gt;, &lt;code&gt;''&lt;/code&gt;,
    &lt;code&gt;null&lt;/code&gt;, &lt;code&gt;true&lt;/code&gt;,
    &lt;code&gt;false&lt;/code&gt;, or &lt;code&gt;undefined&lt;/code&gt;.
  &lt;/li&gt;
&lt;/ul&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="TypeScriptFieldCanBeMadeReadonly" defaultSeverity="WEAK WARNING" displayName="Field can be readonly" enabled="true" language="TypeScript" pluginId="JavaScript" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a private field that can be made readonly (for example, if the field is assigned only in the constructor).
&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="DOM issues" path="JavaScript and TypeScript"><inspection shortName="PlatformDetectionJS" defaultSeverity="WARNING" displayName="Inaccurate platform detection" enabled="false" language="JavaScript" pluginId="JavaScript" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a common JavaScript pattern for detecting
the browser or operating system in which the script is run. In addition
to pointing out non-portable constructs, these platform detection patterns
are often incomplete and easily fooled. For most cases, detection of individual
environment features is preferable to attempting to detect the entire platform.
&lt;p&gt;Patterns detected include: &lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;document.all&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;document.layers&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;navigator.userAgent&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;navigator.oscpu&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;navigator.appName&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;navigator.appCodeName&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;navigator.platform&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="InnerHTMLJS" defaultSeverity="WARNING" displayName="Use of 'innerHTML' property" enabled="false" language="JavaScript" pluginId="JavaScript" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports  a JavaScript access to DOM nodes as text using the &lt;code&gt;innerHTML&lt;/code&gt; property.
Most usages of &lt;code&gt;innerHTML&lt;/code&gt; are performed better with explicit
DOM calls, such as &lt;code&gt;getElementByID()&lt;/code&gt; and
&lt;code&gt;createElement()&lt;/code&gt;.  Additionally,
&lt;code&gt;innerHTML&lt;/code&gt; will not work with XML
DOMs, including DOMs for XHTML if viewed as XML.  This can lead to difficulties in
diagnosing bugs.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="XHTMLIncompatabilitiesJS" defaultSeverity="WARNING" displayName="Incompatible XHTML usages" enabled="false" language="JavaScript" pluginId="JavaScript" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports common JavaScript DOM patterns which may present problems
with XHTML documents. In particular, the patterns detected will behave completely
differently depending on whether the document is loaded as XML or HTML.
This can result in subtle bugs where script behaviour is dependent on the MIME-type of the document, rather than its content.
Patterns detected include
&lt;b&gt;document.body&lt;/b&gt;,
&lt;b&gt;document.images&lt;/b&gt;,
&lt;b&gt;document.applets&lt;/b&gt;,
&lt;b&gt;document.links&lt;/b&gt;,
&lt;b&gt;document.forms&lt;/b&gt;, and
&lt;b&gt;document.anchors&lt;/b&gt;.
&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="DocumentWriteJS" defaultSeverity="WARNING" displayName="Call to 'document.write()'" enabled="false" language="JavaScript" pluginId="JavaScript" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a method call to &lt;code&gt;document.write()&lt;/code&gt; or &lt;code&gt;document.writeln()&lt;/code&gt;.
Most usages of such calls are performed better with explicit
DOM calls, such as &lt;code&gt;getElementByID()&lt;/code&gt; and
&lt;code&gt;createElement()&lt;/code&gt;.  Additionally, the &lt;code&gt;write()&lt;/code&gt; and
&lt;code&gt;writeln()&lt;/code&gt; calls will not work with XML
DOMs, including DOMs for XHTML if viewed as XML.  This can result in difficulty to point out bugs.
&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Dockerfile" path=""><inspection shortName="DockerFileArgumentCount" defaultSeverity="ERROR" displayName="Wrong number of arguments" enabled="true" language="Dockerfile" pluginId="Docker" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports invalid number of arguments for the Dockerfile commands.&lt;/p&gt;
&lt;p&gt;
  Docker build will fail after reaching the instruction with an invalid number of arguments.
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="DockerFileAddOrCopyPaths" defaultSeverity="WARNING" displayName="Invalid destination for ''ADD''/''COPY'' commands" enabled="true" language="Dockerfile" pluginId="Docker" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports invalid destination directories in &lt;code&gt;ADD&lt;/code&gt; and &lt;code&gt;COPY&lt;/code&gt; commands.&lt;/p&gt;
&lt;p&gt;
  According to the &lt;a href="https://docs.docker.com/engine/reference/builder/#add"&gt;Dockerfile specification&lt;/a&gt;,
  if multiple sources are specified, then the destination must be a directory, and it must end with a slash '/'.
  Otherwise, Docker build will fail.
&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;b&gt;Examples:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  # all the commands below will fail
  ADD textA.txt textB.txt relativeDir
  ADD ["binaryA.jar", "binary2.jar", "destination"]
  COPY text3.txt text4.txt /absolute/path
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  ADD textA.txt textB.txt relativeDir/
  ADD ["binaryA.jar", "binary2.jar", "destination/"]
  COPY text3.txt text4.txt /absolute/path/
&lt;/code&gt;&lt;/pre&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="DockerFileRunCommandMissingContinuation" defaultSeverity="ERROR" displayName="Missing continuation character for ''RUN'' command" enabled="true" language="Dockerfile" pluginId="Docker" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports missing continuation characters in &lt;code&gt;RUN&lt;/code&gt; command.&lt;/p&gt;
&lt;p&gt;
  In the &lt;i&gt;shell&lt;/i&gt; form of &lt;code&gt;RUN&lt;/code&gt; command you should use a '\' (backslash)
  to continue a single &lt;code&gt;RUN&lt;/code&gt; instruction onto the next line.
  Otherwise, Docker build will fail.
&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;b&gt;Examples:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  # the command below will fail
  RUN /bin/bash -c 'source $HOME/.bashrc;
      echo $HOME'
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  RUN /bin/bash -c 'source $HOME/.bashrc; \
      echo $HOME'
&lt;/code&gt;&lt;/pre&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="DockerJsonFormStringLiterals" defaultSeverity="WARNING" displayName="A single quoted string in JSON array format" enabled="true" language="Dockerfile" pluginId="Docker" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;
  Reports a single quoted string in JSON array format.
&lt;/p&gt;
&lt;p&gt;
  JSON array form, must use double-quotes (") around words not single-quotes ('). Otherwise, Docker build will fail.
&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;b&gt;Examples:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  # all the commands below will fail
  RUN ['/bin/bash', '-c', 'echo hello']
  ADD ['binaryA.jar', 'binary2.jar', 'destination/']
  COPY ['binaryA.jar', 'binary2.jar', 'destination/']
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  RUN ["/bin/bash", "-c", "echo hello"]
  ADD ["binaryA.jar", "binary2.jar", "destination/"]
  COPY ["binaryA.jar", "binary2.jar", "destination/"]
&lt;/code&gt;&lt;/pre&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="DockerFileAssignments" defaultSeverity="ERROR" displayName="Invalid spaces in ''key=value'' pair" enabled="true" language="Dockerfile" pluginId="Docker" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports incorrect spacing for key-value pairs in &lt;code&gt;ARG&lt;/code&gt;, &lt;code&gt;ENV&lt;/code&gt;, and &lt;code&gt;LABEL&lt;/code&gt; commands.&lt;/p&gt;
&lt;p&gt;
  While it is not explicitly specified in the &lt;a href="https://docs.docker.com/engine/reference/builder/#arg"&gt;Dockerfile specification&lt;/a&gt;,
  some combinations of spacing for key-value pairs are not allowed.
  Docker build will fail after reaching the problem instruction.
&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;b&gt;Examples:&lt;/b&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;The &lt;code&gt;ARG&lt;/code&gt; command does not allow any spaces around '='&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;ENV&lt;/code&gt; and &lt;code&gt;LABEL&lt;/code&gt; do not allow spaces after '='&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;
  # all the commands below will fail
  ARG answer = 42
  ARG version= "1.0.0"
  LABEL "maintained.by"= someone@gmail.com
  ENV JAVA_HOME= "/docker-java-home"
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  ARG answer=2
  ARG version="1.0.0"
  LABEL "maintained.by"=someone@gmail.com
  ENV JAVA_HOME="/docker-java-home"
&lt;/code&gt;&lt;/pre&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Potentially undesirable code constructs" path="JavaScript and TypeScript"><inspection shortName="VoidExpressionJS" defaultSeverity="WARNING" displayName="'void' expression" enabled="false" language="JavaScript" pluginId="JavaScript" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a &lt;code&gt;void&lt;/code&gt; expression.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ContinueStatementWithLabelJS" defaultSeverity="WARNING" displayName="'continue' statement with label" enabled="false" language="JavaScript" pluginId="JavaScript" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a labeled &lt;code&gt;continue&lt;/code&gt; statement.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="CommaExpressionJS" defaultSeverity="WARNING" displayName="Comma expression" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a comma expression. Such
expressions are often a sign of overly clever code, and may lead to subtle bugs.
Comma expressions in the initializer or in the update section of &lt;code&gt;for&lt;/code&gt;
loops are ignored.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="BreakStatementWithLabelJS" defaultSeverity="WARNING" displayName="'break' statement with label" enabled="false" language="JavaScript" pluginId="JavaScript" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a labeled &lt;code&gt;break&lt;/code&gt; statement.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ContinueStatementJS" defaultSeverity="WARNING" displayName="'continue' statement" enabled="false" language="JavaScript" pluginId="JavaScript" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a &lt;code&gt;continue&lt;/code&gt; statement.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="WithStatementJS" defaultSeverity="WARNING" displayName="'with' statement" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a &lt;code&gt;with&lt;/code&gt; statements. Such 
statements result in potentially confusing implicit bindings, and may behave
strangely in setting new variables.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="AnonymousFunctionJS" defaultSeverity="WARNING" displayName="Anonymous function" enabled="false" language="JavaScript" pluginId="JavaScript" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an anonymous function. An explicit name of a function expression may be helpful for debugging.
Ignores function expressions without names if they have a &lt;code&gt;name&lt;/code&gt; property specified in the ECMAScript 6 standard.
For example, &lt;code&gt;var bar = function() {};&lt;/code&gt; is not reported.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="DebuggerStatementJS" defaultSeverity="WARNING" displayName="'debugger' statement" enabled="false" language="JavaScript" pluginId="JavaScript" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a &lt;code&gt;debugger&lt;/code&gt; statement used for interaction
with the Javascript debuggers.  Such statements should not appear in production code.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ConditionalExpressionJS" defaultSeverity="WARNING" displayName="Conditional expression" enabled="false" language="JavaScript" pluginId="JavaScript" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a ternary conditional expression.  Some coding standards
prohibit such expressions in favor of explicit &lt;code&gt;if&lt;/code&gt;
statements.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="BreakStatementJS" defaultSeverity="WARNING" displayName="'break' statement" enabled="false" language="JavaScript" pluginId="JavaScript" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a &lt;code&gt;break&lt;/code&gt; statements. Ignores &lt;code&gt;break&lt;/code&gt; statements that end case blocks.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="LabeledStatementJS" defaultSeverity="WARNING" displayName="Labeled statement" enabled="false" language="JavaScript" pluginId="JavaScript" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a labeled statement.
&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Psalm" path="PHP"><inspection shortName="PsalmAdvanceCallableParamsInspection" defaultSeverity="WARNING" displayName="Function call is not compatible with 'callable' declaration" enabled="true" language="PHP" pluginId="com.intellij.php.psalm" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the parameters in function calls whose types are not compatible with the ones defined via &lt;code&gt;Closure&lt;/code&gt;.
&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="MongoJS" path=""><inspection shortName="MongoJSExtResolveInspection" defaultSeverity="WARNING" displayName="Resolution problems" enabled="true" language="MongoJSExt" pluginId="com.intellij.database" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports unresolved references in MongoDB and JavaScript code.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="MongoJSExtDeprecationInspection" defaultSeverity="WARNING" displayName="Deprecated element" enabled="true" language="MongoJSExt" pluginId="com.intellij.database" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports usages of deprecated methods in MongoDB and JavaScript code.
&lt;p&gt;The quick-fix replaces deprecated methods with recommended alternatives.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  db.my_collection.insert()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  db.my_collection.insertOne()
&lt;/code&gt;&lt;/pre&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="MongoJSResolveInspection" defaultSeverity="WARNING" displayName="Resolution problems" enabled="true" language="MongoJS" pluginId="com.intellij.database" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports unresolved references in MongoDB and JavaScript code.
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;db
use foo
  -- a reference to a non-existing collection
db.non_existing_collection
db['non_existing_collection']
db['non_existing_collection'].find().hasNext()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;non_existing_collection&lt;/code&gt; collection does not exist in the database and will be reported.&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="MongoJSExtSideEffectsInspection" defaultSeverity="WARNING" displayName="Statement with side effects" enabled="true" language="MongoJSExt" pluginId="com.intellij.database" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports statements that may cause side effects while the data source is in read-only mode.
&lt;p&gt;The quick-fix turns off the read-only mode for the respective data source.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
db.my_collection.insertOne()
&lt;/code&gt;&lt;/pre&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="MongoJSDeprecationInspection" defaultSeverity="WARNING" displayName="Deprecated element" enabled="true" language="MongoJS" pluginId="com.intellij.database" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports usages of deprecated methods in MongoDB and JavaScript code.
&lt;p&gt;The quick-fix replaces deprecated methods with recommended alternatives.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;db.my_collection.insert()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;db.my_collection.insertOne()&lt;/code&gt;&lt;/pre&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="MongoJSSideEffectsInspection" defaultSeverity="WARNING" displayName="Statement with side effects" enabled="true" language="MongoJS" pluginId="com.intellij.database" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports statements that can cause side effects while the data source is in read-only mode.
&lt;p&gt;For more information about enabling read-only mode, see
  &lt;a href="https://www.jetbrains.com/help/datagrip/configuring-database-connections.html#enable-read-only-mode-for-a-connection"&gt;Enable
    read-only mode for a connection in the IDE documentation&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The &lt;b&gt;Disable read-only mode&lt;/b&gt; quick-fix turns off the read-only mode for the respective data source.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
db.my_collection.insertOne()
&lt;/code&gt;&lt;/pre&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="PHP strict standards" path="PHP"><inspection shortName="PhpAbstractStaticMethodInspection" defaultSeverity="WARNING" displayName="Static function should not be abstract" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
  Reports the static methods that are declared as abstract.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpSignatureMismatchDuringInheritanceInspection" defaultSeverity="WARNING" displayName="Declaration of overridden method should be compatible with parent class" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
  Reports the overridden methods declarations that are not compatible with the parent class. The inspection is enabled only for the PHP language level lower than 8.0.
&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Accessibility" path="HTML"><inspection shortName="HtmlRequiredLangAttribute" defaultSeverity="WARNING" displayName="Missing required 'lang' attribute" enabled="true" language="XML" pluginId="HtmlTools" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a missing &lt;code&gt;lang&lt;/code&gt; (or &lt;code&gt;xml:lang&lt;/code&gt;) attribute in a &lt;code&gt;html&lt;/code&gt; tag. Suggests adding a required attribute to state the default language of the document. Based on WCAG 2.0: &lt;a href="https://www.w3.org/TR/WCAG20-TECHS/H57.html"&gt;H57&lt;/a&gt;.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="HtmlFormInputWithoutLabel" defaultSeverity="WARNING" displayName="Missing associated label" enabled="true" language="XML" pluginId="HtmlTools" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a form element (&lt;code&gt;input&lt;/code&gt;, &lt;code&gt;textarea&lt;/code&gt;, or &lt;code&gt;select&lt;/code&gt;) without an associated label. Suggests creating a new label. Based on WCAG 2.0: &lt;a href="https://www.w3.org/TR/WCAG20-TECHS/H44.html"&gt;H44&lt;/a&gt;.&lt;br&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="HtmlRequiredSummaryAttribute" defaultSeverity="INFORMATION" displayName="Missing required 'summary' attribute" enabled="false" language="XML" pluginId="HtmlTools" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a missing &lt;code&gt;summary&lt;/code&gt; attribute in a &lt;code&gt;table&lt;/code&gt; tag. Suggests adding a&lt;code&gt;summary&lt;/code&gt; attribute. Based on WCAG 2.0: &lt;a href="https://www.w3.org/TR/WCAG20-TECHS/H73.html"&gt;H73&lt;/a&gt;.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="HtmlRequiredTitleAttribute" defaultSeverity="INFORMATION" displayName="Missing required 'title' attribute" enabled="false" language="XML" pluginId="HtmlTools" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a missing title attribute &lt;code&gt;frame&lt;/code&gt;, &lt;code&gt;iframe&lt;/code&gt;, &lt;code&gt;dl&lt;/code&gt;, and &lt;code&gt;a&lt;/code&gt; tags. Suggests adding a title attribute. Based on WCAG 2.0: &lt;a href="https://www.w3.org/TR/WCAG20-TECHS/H33.html"&gt;H33&lt;/a&gt;, &lt;a href="https://www.w3.org/TR/WCAG20-TECHS/H40.html"&gt;H40&lt;/a&gt;, and &lt;a href="https://www.w3.org/TR/WCAG20-TECHS/H64.html"&gt;H64&lt;/a&gt;.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="HtmlRequiredTitleElement" defaultSeverity="WARNING" displayName="Missing required 'title' element" enabled="true" language="XML" pluginId="HtmlTools" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a missing &lt;code&gt;title&lt;/code&gt; element inside a &lt;code&gt;head&lt;/code&gt; section. Suggests adding a &lt;code&gt;title&lt;/code&gt; element. The title should describe the document. Based on WCAG 2.0: &lt;a href="https://www.w3.org/TR/WCAG20-TECHS/H25.html"&gt;H25&lt;/a&gt;.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="HtmlRequiredAltAttribute" defaultSeverity="WARNING" displayName="Missing required 'alt' attribute" enabled="true" language="XML" pluginId="HtmlTools" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a missing &lt;code&gt;alt&lt;/code&gt; attribute in a &lt;code&gt;img&lt;/code&gt; or &lt;code&gt;applet&lt;/code&gt; tag or in a &lt;code&gt;area&lt;/code&gt; element of an image map. Suggests adding a required attribute with a text alternative for the contents of the tag. Based on WCAG 2.0: &lt;a href="https://www.w3.org/TR/WCAG20-TECHS/H24.html"&gt;H24&lt;/a&gt;, &lt;a href="https://www.w3.org/TR/WCAG20-TECHS/H35.html"&gt;H35&lt;/a&gt;, &lt;a href="https://www.w3.org/TR/WCAG20-TECHS/H36.html"&gt;H36&lt;/a&gt;, &lt;a href="https://www.w3.org/TR/WCAG20-TECHS/H37.html"&gt;H37&lt;/a&gt;.
&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="HTML" path=""><inspection shortName="CheckImageSize" defaultSeverity="WARNING" displayName="Mismatched image size" enabled="true" language="XML" pluginId="HtmlTools" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a &lt;code&gt;width&lt;/code&gt; and &lt;code&gt;height&lt;/code&gt; attribute value of a &lt;code&gt;img&lt;/code&gt; tag
that is different from the actual width and height of the referenced image.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="HtmlDeprecatedTag" defaultSeverity="WARNING" displayName="Obsolete tag" enabled="true" language="XML" pluginId="HtmlTools" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an obsolete HTML5 tag. Suggests replacing the obsolete tag with a CSS or another tag.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="HtmlPresentationalElement" defaultSeverity="INFORMATION" displayName="Presentational tag" enabled="false" language="XML" pluginId="HtmlTools" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a presentational HTML tag. Suggests replacing the presentational tag with a CSS or another tag.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="CheckValidXmlInScriptTagBody" defaultSeverity="ERROR" displayName="Malformed content of 'script' tag" enabled="true" language="XML" pluginId="com.intellij" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports contents of &lt;code&gt;script&lt;/code&gt; tags that are invalid XML.&lt;br&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  &amp;lt;script type="text/javascript"&gt;
    console.log('&amp;lt;');
  &amp;lt;/script&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  &amp;lt;script type="text/javascript"&gt;
    console.log('&amp;amp;lt;');
  &amp;lt;/script&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="HtmlUnknownAttribute" defaultSeverity="WARNING" displayName="Unknown attribute" enabled="true" language="HTML" pluginId="com.intellij" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an unknown HTML attribute. Suggests configuring attributes that should not be reported.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="HtmlUnknownTarget" defaultSeverity="WARNING" displayName="Unresolved file in a link" enabled="true" language="XML" pluginId="com.intellij" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an unresolved file in a link.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="HtmlMissingClosingTag" defaultSeverity="INFORMATION" displayName="Missing closing tag" enabled="true" language="HTML" pluginId="com.intellij" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an HTML element without a closing tag.
Some coding styles require that HTML elements have closing tags even where this is optional.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  &amp;lt;html&gt;
    &amp;lt;body&gt;
      &amp;lt;p&gt;Behold!
    &amp;lt;/body&gt;
  &amp;lt;/html&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  &amp;lt;html&gt;
    &amp;lt;body&gt;
      &amp;lt;p&gt;Behold!&amp;lt;/p&gt;
    &amp;lt;/body&gt;
  &amp;lt;/html&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="HtmlUnknownBooleanAttribute" defaultSeverity="WARNING" displayName="Incorrect boolean attribute" enabled="true" language="HTML" pluginId="com.intellij" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an HTML non-boolean attribute without a value. Suggests configuring attributes that should not be reported.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="CheckEmptyScriptTag" defaultSeverity="WARNING" displayName="Empty tag" enabled="true" language="XML" pluginId="com.intellij" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports empty tags that do not work in some browsers.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  &amp;lt;html&gt;
    &amp;lt;script/&gt;
  &amp;lt;/html&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  &amp;lt;html&gt;
    &amp;lt;script&gt;&amp;lt;/script&gt;
  &amp;lt;/html&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="HtmlExtraClosingTag" defaultSeverity="WARNING" displayName="Redundant closing tag" enabled="true" language="HTML" pluginId="com.intellij" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports redundant closing tags on empty elements, for example, &lt;code&gt;img&lt;/code&gt; or &lt;code&gt;br&lt;/code&gt;.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  &amp;lt;html&gt;
    &amp;lt;body&gt;
      &amp;lt;br&gt;&amp;lt;/br&gt;
    &amp;lt;/body&gt;
  &amp;lt;/html&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  &amp;lt;html&gt;
    &amp;lt;body&gt;
      &amp;lt;br&gt;
    &amp;lt;/body&gt;
  &amp;lt;/html&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="HtmlWrongAttributeValue" defaultSeverity="WARNING" displayName="Wrong attribute value" enabled="true" language="HtmlCompatible" pluginId="com.intellij" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an incorrect HTML attribute value.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="HtmlDeprecatedAttribute" defaultSeverity="WARNING" displayName="Obsolete attribute" enabled="true" language="XML" pluginId="HtmlTools" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an obsolete HTML5 attribute.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="RequiredAttributes" defaultSeverity="WARNING" displayName="Missing required attribute" enabled="true" language="XML" pluginId="com.intellij" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a missing mandatory attribute in an XML/HTML tag. Suggests configuring attributes that should not be reported.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="HtmlUnknownAnchorTarget" defaultSeverity="WARNING" displayName="Unresolved fragment in a link" enabled="true" language="XML" pluginId="com.intellij" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an unresolved last part of an URL after the &lt;code&gt;#&lt;/code&gt; sign.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="HtmlNonExistentInternetResource" defaultSeverity="WARNING" displayName="Unresolved web link" enabled="false" language="XML" pluginId="HtmlTools" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an unresolved web link. Works by making network requests in the background.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="HtmlUnknownTag" defaultSeverity="WARNING" displayName="Unknown tag" enabled="true" language="HTML" pluginId="com.intellij" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an unknown HTML tag. Suggests configuring tags that should not be reported.
&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="SQL server" path=""><inspection shortName="MsOrderByInspection" defaultSeverity="ERROR" displayName="ORDER BY in queries" enabled="true" language="SQL" pluginId="com.intellij.database" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports usages when the &lt;code&gt;ORDER BY&lt;/code&gt; clause is used without &lt;code&gt;TOP&lt;/code&gt;, &lt;code&gt;OFFSET&lt;/code&gt;, or &lt;code&gt;FOR XML&lt;/code&gt; in views,
inline functions, derived tables, subqueries, and common table expressions.
&lt;p&gt;For more information about usages of &lt;code&gt;ORDER BY&lt;/code&gt;, see &lt;a
    href="https://docs.microsoft.com/en-us/sql/t-sql/queries/select-order-by-clause-transact-sql"&gt;SELECT - ORDER BY Clause (Transact-SQL) at
  docs.microsoft.com&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Example (Microsoft SQL server):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;CREATE TABLE foo (a INT NOT NULL, b  INT NOT NULL);

SELECT *
FROM (SELECT a, b
FROM foo A
WHERE a &amp;lt; 89
ORDER BY b) ALIAS;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In a subquery, ORDER BY will be highlighted as an error. You can add TOP, OFFSET, or FOR XML to a subquery.
  Alternatively, use the &lt;b&gt;Delete element&lt;/b&gt; quick-fix to delete the ORDER BY section.&lt;/p&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;SELECT *
FROM (SELECT a, b
FROM foo A
WHERE a &amp;lt; 89) ALIAS;
&lt;/code&gt;&lt;/pre&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="MsBuiltinInspection" defaultSeverity="WARNING" displayName="Builtin functions" enabled="true" language="SQL" pluginId="com.intellij.database" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports truncations of string arguments in ISNULL functions.

&lt;p&gt;The ISNULL syntax is &lt;code&gt;ISNULL(check_expression, replacement_value)&lt;/code&gt;.
&lt;/p&gt;

&lt;p&gt;According to &lt;a href="https://docs.microsoft.com/en-us/sql/t-sql/functions/isnull-transact-sql" target="_blank"&gt;ISNULL at
  docs.microsoft.com&lt;/a&gt;, &lt;code&gt;replacement_value&lt;/code&gt; will be truncated if &lt;code&gt;replacement_value&lt;/code&gt; is longer than
  &lt;code&gt;check_expression&lt;/code&gt;.
&lt;/p&gt;

&lt;p&gt;Example (Microsoft SQL Server):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;DECLARE @name1 VARCHAR(2) = NULL;
DECLARE @name2 VARCHAR(10) = 'Example';
DECLARE @name3 VARCHAR(2) = 'Hi';

  -- `@name2` is VARCHAR(10) and will be truncated
SELECT ISNULL(@name1, @name2);

  -- `@name3` is VARCHAR(2) as `@name1` and will not be truncated
SELECT ISNULL(@name1, @name3);&lt;/code&gt;&lt;/pre&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Undefined symbols" path="PHP"><inspection shortName="PhpMultipleClassDeclarationsInspection" defaultSeverity="WEAK WARNING" displayName="Multiple class declarations" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the references to classes that have multiple declarations in project files.
&lt;p&gt;Use the options below to customize the inspection:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;b&gt;Ignore PHPDoc&lt;/b&gt;: if selected, the inspection will not report multiple declarations of classes referenced in PHPDoc blocks.
  &lt;/li&gt;
&lt;/ul&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpUndefinedFunctionInspection" defaultSeverity="WARNING" displayName="Undefined function" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the references to functions that are not defined in the project files, configured include paths, or among the PHP predefined functions.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpUndefinedClassInspection" defaultSeverity="WARNING" displayName="Undefined class" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the references to classes whose declarations are not found in the project files, configured include paths, or among the PHP predefined classes.
&lt;p&gt;Use the options below to customize the inspection:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;b&gt;Ignore PHPDoc&lt;/b&gt;: if selected, the inspection will not report the undefined classes referenced in PHPDoc blocks.
  &lt;/li&gt;
&lt;/ul&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpPossiblePolymorphicInvocationInspection" defaultSeverity="WEAK WARNING" displayName="Possible polymorphic call" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports polymorphic code usages. Such usages are ambiguous and can be potentially inoperable depending on the class instance passed as the argument.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpUndefinedMethodInspection" defaultSeverity="WARNING" displayName="Undefined method" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
    Reports the references to class methods that are not defined.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpUndefinedClassConstantInspection" defaultSeverity="ERROR" displayName="Undefined class constant" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
  Reports the references to class constants that are not declared.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpUndefinedConstantInspection" defaultSeverity="WARNING" displayName="Undefined constant" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the references to constants that are not found in the project files, configured include paths, or among the PHP predefined constants.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpUndefinedGotoLabelInspection" defaultSeverity="WARNING" displayName="Undefined goto label" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
  Reports the &lt;code&gt;goto&lt;/code&gt; labels that are not found in the current scope.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  The target &lt;code&gt;goto&lt;/code&gt; label must reside in the same file and context: you cannot jump into or out of a function or method, and cannot jump into a loop or switch structure.
&lt;/p&gt;
&lt;p&gt;
  See &lt;a href="https://www.php.net/manual/en/control-structures.goto.php"&gt;goto (php.net)&lt;/a&gt; for details.
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="PhpDynamicFieldDeclarationInspection" defaultSeverity="WEAK WARNING" displayName="Dynamic property declaration" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the references to dynamic class properties declarations. Such declaration are deprecated starting from PHP 8.2
&lt;p&gt;
  The inspection skips the objects of the &lt;code&gt;stdClass&lt;/code&gt; or derived types.
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpUndefinedNamespaceInspection" defaultSeverity="WARNING" displayName="Undefined namespace" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
  Reports the references to a namespace that is not found.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpUndefinedFieldInspection" defaultSeverity="WARNING" displayName="Undefined property" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the references to class properties that are not declared.
&lt;p&gt;
  The inspection skips the objects of the &lt;code&gt;stdClass&lt;/code&gt; or derived types.
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpUndefinedVariableInspection" defaultSeverity="ERROR" displayName="Undefined variable" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
  Produces two types of warnings:
  &lt;ul&gt;
    &lt;li&gt;
      &lt;i&gt;Undefined variable&lt;/i&gt;: the variable's definition is not found in the project files, configured include paths, or among the PHP predefined variables.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;i&gt;Variable might have not been defined&lt;/i&gt;: there are one or more paths to reach the line with the variable usage without defining it.
    &lt;/li&gt;
  &lt;/ul&gt;
  &lt;p&gt;
    Use the options below to customize the inspection:
  &lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;
      &lt;b&gt;Report that variable is probably undefined&lt;/b&gt;: clear the checkbox to disable the &lt;i&gt;Variable might have not been defined&lt;/i&gt; warnings.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;b&gt;Enable inspection in global space&lt;/b&gt;: by default, the inspection is enabled for global space. Clear the checkbox to only report
      undefined variables from functions' local scope.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;p&gt;
        &lt;b&gt;Search for variable's definition outside the current file&lt;/b&gt;: if selected, the IDE reports a global variable as undefined only in case there are no &lt;code&gt;include&lt;/code&gt; or &lt;code&gt;require&lt;/code&gt; statements in the current file and the variable's definition cannot be found in the project. Note that the IDE does not examine the actual content of included files but only checks the presence of &lt;code&gt;include&lt;/code&gt; or &lt;code&gt;require&lt;/code&gt; statements.
      &lt;/p&gt;
      &lt;p&gt;
        Otherwise, if not selected, the IDE searches for the variable's definition only in the current file and ignores the &lt;code&gt;include&lt;/code&gt; or &lt;code&gt;require&lt;/code&gt; statements if any.
      &lt;/p&gt;
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpUndefinedCallbackInspection" defaultSeverity="WARNING" displayName="Undefined callback" enabled="false" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the functions, methods, properties, or classes that are referenced from a callback but are not found.
&lt;!-- tooltip end --&gt;
&lt;p&gt;Use the options below to customize the inspection:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;b&gt;Ignore callback from *_exists and is_callable functions&lt;/b&gt;: if selected, the inspection will skip callback references from the
    &lt;code&gt;method_exists&lt;/code&gt;, &lt;code&gt;function_exists&lt;/code&gt;, &lt;code&gt;property_exists&lt;/code&gt;, &lt;code&gt;class_exists&lt;/code&gt; and &lt;code&gt;is_callable&lt;/code&gt; functions.
  &lt;/li&gt;
  &lt;li&gt;&lt;b&gt;Don't report in case of ambiguity&lt;/b&gt;: if selected, the inspection will skip the parameters with multiple possible types, for example marked as &lt;code&gt;callable|string&lt;/code&gt;.
  &lt;/li&gt;
&lt;/ul&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="XPath" path=""><inspection shortName="CheckNodeTest" defaultSeverity="WARNING" displayName="Unknown element or attribute name" enabled="true" language="XPath" pluginId="XPathView" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports names of elements or attributes that are used in an XPath-expression but are missing in the associated XML files and are not
defined in the referenced schemas.
Such names are often the result of typos and would otherwise probably only be discovered at runtime.

&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  &amp;lt;xsl:template match="&lt;b&gt;h:txtarea&lt;/b&gt;" /&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;
  If the &lt;code&gt;h&lt;/code&gt; is bound to the XHTML namespace, the inspection will report this part of the &lt;code&gt;match&lt;/code&gt; expression as an
  unknown element name because the correct name of the element is "textarea".
&lt;/p&gt;


&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="IndexZeroUsage" defaultSeverity="WARNING" displayName="XPath predicate with index 0" enabled="true" language="XPath" pluginId="XPathView" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports usages of &lt;code&gt;0&lt;/code&gt; in a predicate index or in a comparison with the function
&lt;code&gt;position()&lt;/code&gt;. Such usage is almost always a bug because in XPath, the index starts at &lt;code&gt;1&lt;/code&gt;, &lt;em&gt;not&lt;/em&gt; at &lt;code&gt;0&lt;/code&gt;.

&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
  //someelement[&lt;b&gt;position() = 0&lt;/b&gt;]&lt;/code&gt; or &lt;code&gt;//something[&lt;b&gt;0&lt;/b&gt;]
&lt;/code&gt;&lt;/pre&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="ImplicitTypeConversion" defaultSeverity="WARNING" displayName="Implicit type conversion" enabled="true" language="XPath" pluginId="XPathView" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports implicit conversions between the predefined XPath-types &lt;code&gt;STRING&lt;/code&gt;, &lt;code&gt;NUMBER&lt;/code&gt;, &lt;code&gt;BOOLEAN&lt;/code&gt;,
and &lt;code&gt;NODESET&lt;/code&gt;. Helps to write XSLT scripts that are more expressive about types and prevents subtle bugs:
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  &amp;lt;xsl:if test="&lt;b&gt;foo&lt;/b&gt;" /&gt;
&lt;/code&gt;&lt;/pre&gt;
is not the same as
&lt;pre&gt;&lt;code&gt;
  &amp;lt;xsl:if test="&lt;b&gt;string(foo)&lt;/b&gt;" /&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;
The first test checks whether the element "foo" exists (&lt;code&gt;count(foo) &gt; 0)&lt;/code&gt;; the latter one however is only
 true if the element actually contains any text (&lt;code&gt;string-length(foo) &gt; 0&lt;/code&gt;). Suggests making 
the type conversion more explicit.
&lt;/p&gt;

&lt;p&gt;
  Use the following options to configure the inspection:
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Enable or disable implicit conversions between certain types&lt;/li&gt;
&lt;li&gt;Always report explicit conversions that do not result in the actually expected type, for example,
 &lt;code&gt;&amp;lt;xsl:if test="number(foo)" /&gt;&lt;/code&gt;&lt;/li&gt; 
&lt;li&gt;Ignore conversion from &lt;code&gt;NODESET&lt;/code&gt;
  to &lt;code&gt;BOOLEAN&lt;/code&gt; by using the &lt;code&gt;string()&lt;/code&gt; function as a shortcut for writing &lt;code&gt;string-length() &gt; 0&lt;/code&gt;.&lt;/li&gt;&lt;/ul&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="HardwiredNamespacePrefix" defaultSeverity="WARNING" displayName="Hardcoded namespace prefix" enabled="true" language="XPath" pluginId="XPathView" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports comparisons of the &lt;code&gt;name()&lt;/code&gt; function with a string that contains a colon (&lt;code&gt;:&lt;/code&gt;).  Such usages
usually indicate a hardcoded namespace prefix in the comparison. As a result,  the code will break when run against XML that
uses another prefix for the same namespace.

&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  &amp;lt;xsl:if test="name() = 'xlink:href'"&gt;...&amp;lt;xsl:if&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="RedundantTypeConversion" defaultSeverity="WARNING" displayName="Redundant type conversion" enabled="true" language="XPath" pluginId="XPathView" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports unnecessary type conversions.
Type conversions are unnecessary when the argument type of a &lt;code&gt;string()&lt;/code&gt;, &lt;code&gt;number()&lt;/code&gt;, or
&lt;code&gt;boolean()&lt;/code&gt; function is already the same as the function's return type or if
the expected expression type is &lt;code&gt;any&lt;/code&gt;. Suggests removing the unnecessary conversion.
&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Assignment issues" path="JavaScript and TypeScript"><inspection shortName="SillyAssignmentJS" defaultSeverity="WARNING" displayName="Variable is assigned to itself" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an assignment in the form &lt;code&gt;x = x&lt;/code&gt;. 
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="AssignmentToForLoopParameterJS" defaultSeverity="WARNING" displayName="Assignment to 'for' loop parameter" enabled="false" language="JavaScript" pluginId="JavaScript" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an assignment to a variable declared as a &lt;code&gt;for&lt;/code&gt; loop parameter.
Although occasionally intended, this construct can be extremely confusing, and is often a result of an error.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ReplaceAssignmentWithOperatorAssignmentJS" defaultSeverity="WARNING" displayName="Assignment could be replaced with operator assignment" enabled="false" language="JavaScript" pluginId="JavaScript" pluginVersion="233.13135.108" isGlobalTool="false">&lt;!-- Copied from community/plugins/InspectionGadgets/src/inspectionDescriptions/ReplaceAssignmentWithOperatorAssignment.html --&gt;
&lt;html&gt;
&lt;body&gt;
Reports an assignment operation that can be replaced by an operator assignment to make your code shorter and probably clearer.
&lt;p&gt;
  Example:
&lt;pre&gt;
&lt;code&gt;  x = x + 3;&lt;/code&gt;
  &lt;code&gt;x = x / 3;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;After the quick fix is applied the result looks like:
&lt;pre&gt;
  &lt;code&gt;x += 3;&lt;/code&gt;
  &lt;code&gt;x /= 3;&lt;/code&gt;
&lt;/pre&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="AssignmentResultUsedJS" defaultSeverity="WARNING" displayName="Result of assignment used" enabled="false" language="JavaScript" pluginId="JavaScript" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an assignment expression where the result of the assignment is
used in the containing expression. Such assignments often indicate coding errors, 
for example,  &lt;code&gt;=&lt;/code&gt; instead of &lt;code&gt;==&lt;/code&gt;.
Moreover, they can result in confusion due to the order
of operations, as evaluation of the assignment may affect the outer expression in unexpected
ways.
&lt;p&gt;Expressions in parentheses are ignored.&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="NestedAssignmentJS" defaultSeverity="WARNING" displayName="Nested assignment" enabled="false" language="JavaScript" pluginId="JavaScript" pluginVersion="233.13135.108" isGlobalTool="false">&lt;!-- Copied from community/plugins/InspectionGadgets/src/inspectionDescriptions/NestedAssignment.html --&gt;
&lt;html&gt;
&lt;body&gt;
Reports an assignment expression nested inside another expression, for example, &lt;code&gt;a = b = 1&lt;/code&gt;.
Such expressions may be confusing and violate the general design principle that a given construct should do precisely one thing.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JSAssignmentUsedAsCondition" defaultSeverity="WARNING" displayName="Assignment used as condition" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="233.13135.108" isGlobalTool="false">&lt;!-- Copied from community/plugins/InspectionGadgets/src/inspectionDescriptions/AssignmentUsedAsCondition.html --&gt;
&lt;html&gt;
&lt;body&gt;
Reports an assignment that is used as the condition of an &lt;code&gt;if&lt;/code&gt;, &lt;code&gt;while&lt;/code&gt;, &lt;code&gt;for&lt;/code&gt;, or
&lt;code&gt;do&lt;/code&gt; statement. Although occasionally intended,
this usage is confusing, and often indicates a typo
(for example, &lt;code&gt;=&lt;/code&gt; instead of &lt;code&gt;==&lt;/code&gt;).
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="AssignmentToFunctionParameterJS" defaultSeverity="WARNING" displayName="Assignment to function parameter" enabled="false" language="JavaScript" pluginId="JavaScript" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an assignment to a function parameter, including increment and decrement operations.
Although occasionally intended, this construct can be extremely confusing, and is often a result of an error.
&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Proofreading" path=""><inspection shortName="SpellCheckingInspection" defaultSeverity="TYPO" displayName="Typo" enabled="true" pluginId="com.intellij" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;&lt;body&gt;Reports typos and misspellings in your code, comments, and literals and fixes them with one click.&lt;/body&gt;&lt;/html&gt;
</inspection><inspection shortName="GrazieInspection" defaultSeverity="GRAMMAR_ERROR" displayName="Grammar" enabled="true" pluginId="tanvd.grazi" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html lang="en"&gt;&lt;body&gt;
Reports grammar mistakes in your text. You can configure the inspection in
&lt;a href="settings://reference.settingsdialog.project.grazie"&gt;Settings | Editor | Natural Languages | Grammar&lt;/a&gt;.
&lt;/body&gt;&lt;/html&gt;
</inspection><inspection shortName="LanguageDetectionInspection" defaultSeverity="WARNING" displayName="Natural language detection" enabled="true" pluginId="tanvd.grazi" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html lang="en"&gt;&lt;body&gt;Detects natural languages and suggests enabling corresponding grammar and spelling checks.&lt;/body&gt;&lt;/html&gt;
</inspection></group><group name="XML" path=""><inspection shortName="XmlPathReference" defaultSeverity="ERROR" displayName="Unresolved file reference" enabled="true" language="XML" pluginId="com.intellij" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an unresolved file reference in XML.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="CheckTagEmptyBody" defaultSeverity="WARNING" displayName="Empty element content" enabled="true" language="XML" pluginId="com.intellij" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports XML elements without contents.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  &amp;lt;user&gt;
    &amp;lt;name&gt;&amp;lt;/name&gt;
  &amp;lt;/user&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  &amp;lt;user&gt;
    &amp;lt;name/&gt;
  &amp;lt;/user&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="XmlDeprecatedElement" defaultSeverity="WARNING" displayName="Deprecated symbol" enabled="true" language="XML" pluginId="com.intellij" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a deprecated XML element or  attribute.
&lt;p&gt;Symbols can be marked by XML comment or documentation tag with text 'deprecated'.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="XmlDefaultAttributeValue" defaultSeverity="WARNING" displayName="Redundant attribute with default value" enabled="true" language="XML" pluginId="com.intellij" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a redundant assignment of the default value to an XML attribute.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="CheckXmlFileWithXercesValidator" defaultSeverity="ERROR" displayName="Failed external validation" enabled="true" language="XML" pluginId="com.intellij" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a discrepancy in an XML file with the specified DTD or schema detected by the Xerces validator.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="CheckDtdRefs" defaultSeverity="ERROR" displayName="Unresolved DTD reference" enabled="true" language="XML" pluginId="com.intellij" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports inconsistency in a DTD-specific reference, for example, in a reference to an XML entity or to a DTD element declaration.
Works in DTD an XML files.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="XmlWrongRootElement" defaultSeverity="ERROR" displayName="Wrong root element" enabled="true" language="XML" pluginId="com.intellij" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a root tag name different from the name specified in the &lt;code&gt;&amp;lt;doctype&amp;gt;&lt;/code&gt; tag.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="XmlDuplicatedId" defaultSeverity="ERROR" displayName="Duplicate 'id' attribute" enabled="true" language="XML" pluginId="com.intellij" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a duplicate &lt;code&gt;id&lt;/code&gt; attribute in XML.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="XmlHighlighting" defaultSeverity="ERROR" displayName="XML highlighting" enabled="true" language="XML" pluginId="com.intellij" pluginVersion="233.13135.108" isGlobalTool="true">&lt;html&gt;
&lt;body&gt;
Reports XML validation problems in the results of a batch code inspection.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="XmlInvalidId" defaultSeverity="ERROR" displayName="Unresolved 'id' reference" enabled="true" language="XML" pluginId="com.intellij" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an unresolved &lt;code&gt;id&lt;/code&gt; reference in XML.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="XmlUnboundNsPrefix" defaultSeverity="WARNING" displayName="Unbound namespace prefix" enabled="true" language="XML" pluginId="com.intellij" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an unbound namespace prefix in XML.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="XmlUnusedNamespaceDeclaration" defaultSeverity="WARNING" displayName="Unused schema declaration" enabled="true" language="XML" pluginId="com.intellij" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an unused namespace declaration or location hint in XML.
&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="PHPDoc" path="PHP"><inspection shortName="PhpDocDuplicateTypeInspection" defaultSeverity="WEAK WARNING" displayName="Type already exists in PHPDoc tag" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports duplicate types in PHPDoc comments.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpInappropriateInheritDocUsageInspection" defaultSeverity="WEAK WARNING" displayName="Inappropriate @inheritDoc usage" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
  Reports inappropriate &lt;code&gt;@inheritDoc&lt;/code&gt; usages:
  &lt;ul&gt;
    &lt;li&gt;
      On non-class members
    &lt;/li&gt;
    &lt;li&gt;
      On class members without any super members having a doc comment.
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpRedundantDocCommentInspection" defaultSeverity="INFORMATION" displayName="Redundant PHPDoc comment" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports PHPDoc comments or their parts that contain the information already provided in declarations.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpIntRangesMismatchInspection" defaultSeverity="WARNING" displayName="Number ranges mismatch" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the assignments and return statements whose arguments do not match the expected ranges specified via &lt;code&gt;int&amp;lt;min, max&amp;gt;&lt;/code&gt; PHPDoc syntax.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpDocSignatureInspection" defaultSeverity="WEAK WARNING" displayName="PHPDoc comment matches function/method signature" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the parameters' names and types in a PHPDoc comment that do not match the ones in the function/method declaration.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpReturnDocTypeMismatchInspection" defaultSeverity="WEAK WARNING" displayName="Return type in PHPDoc comment does not match the actual return type" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the return types in PHPDoc comments that do not match the actual return type of a function.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpRedundantVariableDocTypeInspection" defaultSeverity="WEAK WARNING" displayName="Redundant @var tag" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the &lt;code&gt;@var&lt;/code&gt; tags for variables whose type is already inferred from source code.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpDocFieldTypeMismatchInspection" defaultSeverity="WEAK WARNING" displayName="Type doesn't match property's declared type" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the properties' types in PHPDoc &lt;code&gt;@var&lt;/code&gt; tags that do not match the declared type of a property.
&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="PhpDocRedundantThrowsInspection" defaultSeverity="WEAK WARNING" displayName="Redundant @throws tag(s)" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
  Reports &lt;code&gt;@throws&lt;/code&gt; tags for exceptions that are not thrown by the function or method.
  &lt;!-- tooltip end --&gt;
  &lt;p&gt;The exception classes added to the &lt;b&gt;Unchecked Exceptions&lt;/b&gt; list under
    &lt;a href="settings://reference.webide.settings.project.settings.php?Unchecked%20Exceptions"&gt;Settings | PHP | Analysis&lt;/a&gt;
    are excluded from the inspection scope.&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpObjectShapeCanBeAddedInspection" defaultSeverity="INFORMATION" displayName="ObjectShape can be added" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports public properties of an object with specified types. Suggests specifying the shape of the returned object via the &lt;code&gt;#[ObjectShape]&lt;/code&gt;
attribute or an object shape in the PHPDoc comment.
&lt;/body&gt;
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  $a = new stdClass();
  $a-&gt;name = "name";
  $a-&gt;age = 2;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  /** @var $a object{name: string, age: int} */
  $a = new stdClass();
  $a-&gt;name = "name";
  $a-&gt;age = 2;
&lt;/code&gt;&lt;/pre&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpVarTagWithoutVariableNameInspection" defaultSeverity="WEAK WARNING" displayName="Type tag without variable name" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the PHPDoc type tags (&lt;code&gt;@var&lt;/code&gt;,&lt;code&gt;@type&lt;/code&gt;,&lt;code&gt;@param&lt;/code&gt;) that are provided without a specified variable/parameter name.
Such tags do not provide any type information for expressions and should be either deleted or expanded to include a concrete variable name for which the type is provided.
&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Ini files" path=""><inspection shortName="DuplicateSectionInFile" defaultSeverity="WARNING" displayName="Duplicate section in file" enabled="true" language="Ini" pluginId="com.jetbrains.plugins.ini4idea" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports duplicate sections in the &lt;code&gt;ini&lt;/code&gt; file.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="DuplicateKeyInSection" defaultSeverity="WARNING" displayName="Duplicate directive in section" enabled="true" language="Ini" pluginId="com.jetbrains.plugins.ini4idea" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports duplicate properties in the &lt;code&gt;ini&lt;/code&gt; file section.
&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Code style issues" path="CSS"><inspection shortName="CssRedundantUnit" defaultSeverity="WARNING" displayName="Redundant measure unit" enabled="true" language="CSS" pluginId="com.intellij.css" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a measure unit of a zero value where units are not required by the specification.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;width: 0px&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="CssMissingSemicolon" defaultSeverity="WARNING" displayName="Missing semicolon" enabled="false" language="CSS" pluginId="com.intellij.css" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a missing semicolon at the end of a declaration.
&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Control flow" path="PHP"><inspection shortName="PhpForeachVariableOverwritesAlreadyDefinedVariableInspection" defaultSeverity="WEAK WARNING" displayName="'foreach' variable overwrites already defined variable" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the keys and values in &lt;code&gt;foreach&lt;/code&gt; loops that are assigned a non-primitive value before the &lt;code&gt;foreach&lt;/code&gt; loop and are accessed after it.

Such usages may unwillingly overwrite an already defined value and cause latent bugs.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpUnreachableStatementInspection" defaultSeverity="WARNING" displayName="Unreachable statement" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the statements that cannot be reached.
&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="PhpWriteAccessToReferencedArrayValueWithoutUnsetInspection" defaultSeverity="WARNING" displayName="Write access to referenced array value without 'unset'" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the write access expressions on variables that are still referencing the array value previously used in a &lt;code&gt;foreach&lt;/code&gt; statement.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  It is recommended to destroy such references by using &lt;code&gt;unset&lt;/code&gt;.
&lt;/p&gt;
&lt;p&gt;
  See &lt;a href="https://www.php.net/manual/en/control-structures.foreach.php"&gt;foreach (php.net)&lt;/a&gt; and &lt;a href="https://www.php.net/manual/en/function.unset.php"&gt;unset (php.net)&lt;/a&gt; for details.
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpTypedPropertyMightBeUninitializedInspection" defaultSeverity="WARNING" displayName="Typed property might be uninitialized" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the attempts to read from an uninitialized typed property. Such attempts will result in &lt;code&gt;TypeError&lt;/code&gt;.
&lt;p&gt;
  Typed properties should be initialized in any of the following ways:
&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;by a default value&lt;/li&gt;
  &lt;li&gt;in the constructor&lt;/li&gt;
  &lt;li&gt;by the &lt;code&gt;__get()&lt;/code&gt; magic getter&lt;/li&gt;
  &lt;li&gt;in-place, at the moment of usage&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
  See &lt;a href="https://wiki.php.net/rfc/typed_properties_v2#uninitialized_and_unset_properties"&gt;Uninitialized and Unset Properties (php.net)&lt;/a&gt; for details.
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpSwitchWithCommonPartsInspection" defaultSeverity="WEAK WARNING" displayName="'switch' with common parts" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
  Reports the 'switch' statements with duplicated common parts.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpConditionAlreadyCheckedInspection" defaultSeverity="WEAK WARNING" displayName="Condition always evaluates to 'true/false'" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the conditions that are already covered by earlier conditions and thus have no effect as well as the variables that are always true (or always false) when reached.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpArrayWriteIsNotUsedInspection" defaultSeverity="WEAK WARNING" displayName="Array write access is not used" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the array write access expressions that are not used in code afterwards. The most common source of such problems is modifying an array passed via a parameter: if an array is passed by value, the change will not be visible outside the function.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpUnnecessaryElseBranchInspection" defaultSeverity="INFORMATION" displayName="Unnecessary 'else' branch" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the &lt;code&gt;else&lt;/code&gt; branches in &lt;code&gt;if&lt;/code&gt; statements whose bodies always execute a terminating statement such as
&lt;code&gt;return&lt;/code&gt; or &lt;code&gt;throw&lt;/code&gt;. Such branches are redundant and can be safely omitted.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpLoopNeverIteratesInspection" defaultSeverity="WEAK WARNING" displayName="Loop does not iterate" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the loop statements whose bodies will execute at most once.

&lt;p&gt;
  The inspection does not report &lt;code&gt;foreach&lt;/code&gt; loops with a key or value used inside the loop body. Commonly, such loops are intended to perform an action only on their first iteration (for example, get the first element of an array).
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpExpressionAlwaysNullInspection" defaultSeverity="WEAK WARNING" displayName="Expression is always 'null'" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the variables in &lt;code&gt;return&lt;/code&gt; statements that are always &lt;code&gt;null&lt;/code&gt;.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpInstanceofIsAlwaysTrueInspection" defaultSeverity="WEAK WARNING" displayName="Result of 'instanceof' is always 'true'" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the &lt;code&gt;instanceof&lt;/code&gt; expressions whose argument is within the hierarchy of the checked variable. Such expressions will always evaluate to &lt;code&gt;true&lt;/code&gt;.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpIfWithCommonPartsInspection" defaultSeverity="WEAK WARNING" displayName="'if' with common parts" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the &lt;code&gt;if&lt;/code&gt; statements with duplicated common parts.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpConditionCheckedByNextConditionInspection" defaultSeverity="WEAK WARNING" displayName="Condition inside logical expression checked by subsequent condition" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the conditions inside logical binary expressions that are covered by subsequent conditions and are therefore redundant.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpNeverTypedFunctionReturnViolationInspection" defaultSeverity="ERROR" displayName="'never'-typed function returns a value" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the functions with the &lt;code&gt;never&lt;/code&gt; return type hint that may return some value. Functions with such a return type are not expected to return any value and must prevent the rest of the script execution by either calling &lt;code&gt;die()&lt;/code&gt;, &lt;code&gt;exit()&lt;/code&gt;, and so on, or throwing an exception.
&lt;p&gt;
  See &lt;a href="https://wiki.php.net/rfc/noreturn_type"&gt;noreturn type (php.net)&lt;/a&gt; for details.
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Code Style" path="PHP/Php Inspections (EA Extended)"><inspection shortName="UnsetConstructsCanBeMergedInspection" defaultSeverity="WEAK WARNING" displayName="'unset(...)' constructs can be merged" enabled="true" language="PHP" pluginId="com.kalessil.phpStorm.phpInspectionsEA" pluginVersion="5.0.0.0" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Documentation can be found &lt;a href="https://github.com/kalessil/phpinspectionsea/blob/master/docs/control-flow.md#unset-constructs-can-be-merged"&gt;here&lt;/a&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="OpAssignShortSyntaxInspection" defaultSeverity="WEAK WARNING" displayName="Short syntax for applied operation" enabled="true" language="PHP" pluginId="com.kalessil.phpStorm.phpInspectionsEA" pluginVersion="5.0.0.0" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Analyzes assignment expressions and reports if combined operators (e.g. 'a += 3' instead of 'a = a + 3') can be used instead.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="DisallowWritingIntoStaticPropertiesInspection" defaultSeverity="WEAK WARNING" displayName="Disallow writing into static properties" enabled="false" language="PHP" pluginId="com.kalessil.phpStorm.phpInspectionsEA" pluginVersion="5.0.0.0" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Changing static properties can cause uncontrolled behavior.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="UnknownInspectionInspection" defaultSeverity="WEAK WARNING" displayName="Unknown inspection suppression" enabled="true" language="PHP" pluginId="com.kalessil.phpStorm.phpInspectionsEA" pluginVersion="5.0.0.0" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Finds suppressions referencing to unknown inspections (non-existent or from a non-installed plugin).
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="UnnecessaryUseAliasInspection" defaultSeverity="WEAK WARNING" displayName="Unnecessary use aliases" enabled="true" language="PHP" pluginId="com.kalessil.phpStorm.phpInspectionsEA" pluginVersion="5.0.0.0" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Unused aliases makes no harm, but overloads code with un-needed constructs.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="NestedPositiveIfStatementsInspection" defaultSeverity="WEAK WARNING" displayName="Nested positive ifs" enabled="true" language="PHP" pluginId="com.kalessil.phpStorm.phpInspectionsEA" pluginVersion="5.0.0.0" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports if nested positive if() structures are used. This is often a hangover from
C development methodologies and is called "bow and arrow" style; it is not optimal if
conditional analysis is possible.&lt;br /&gt;
&lt;br /&gt;
This pattern should be refactored if the risk is sufficiently low.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="MissUsingParentKeywordInspection" defaultSeverity="WEAK WARNING" displayName="'parent' keyword misused" enabled="true" language="PHP" pluginId="com.kalessil.phpStorm.phpInspectionsEA" pluginVersion="5.0.0.0" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports cases when 'parent' keyword has been miss used and could be replaced with '$this'.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ShortEchoTagCanBeUsedInspection" defaultSeverity="WEAK WARNING" displayName="Short echo tag can be used" enabled="false" language="PHP" pluginId="com.kalessil.phpStorm.phpInspectionsEA" pluginVersion="5.0.0.0" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Analyzes echo and print statement and reports if short open tag ('&lt;?= $value ?&gt;') can be applied.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="UnNecessaryDoubleQuotesInspection" defaultSeverity="WEAK WARNING" displayName="Unnecessary double quotes" enabled="false" language="PHP" pluginId="com.kalessil.phpStorm.phpInspectionsEA" pluginVersion="5.0.0.0" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Suggested refactoring will not gain any performance improvements, but rather unify code style.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ProperNullCoalescingOperatorUsageInspection" defaultSeverity="WEAK WARNING" displayName="Proper null-coalescing operator usage" enabled="true" language="PHP" pluginId="com.kalessil.phpStorm.phpInspectionsEA" pluginVersion="5.0.0.0" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Analyzes null-coalescing operator usage and reports questionable cases.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ComparisonOperandsOrderInspection" defaultSeverity="WEAK WARNING" displayName="Yoda/regular conditions style usage" enabled="false" language="PHP" pluginId="com.kalessil.phpStorm.phpInspectionsEA" pluginVersion="5.0.0.0" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
The inspection offer using yoda (0 === $x) or classical ($x === 0) style for comparison operands.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="UsingInclusionReturnValueInspection" defaultSeverity="WEAK WARNING" displayName="Usage of inclusion return value" enabled="false" language="PHP" pluginId="com.kalessil.phpStorm.phpInspectionsEA" pluginVersion="5.0.0.0" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Using value returned by include/include_once and require/require once can be considered as a bad practice.
Considered acceptable for template engines, but not as alternative to methods/functions (which can be UTed).
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="DynamicInvocationViaScopeResolutionInspection" defaultSeverity="WARNING" displayName="Dynamic methods invocation via '::'" enabled="true" language="PHP" pluginId="com.kalessil.phpStorm.phpInspectionsEA" pluginVersion="5.0.0.0" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports if dynamic method invocations use '...::'.&lt;br/&gt;
&lt;br/&gt;
This cases can be refactoring artifacts, which remains confusing as not reflecting actual architecture state.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="UnnecessaryFinalModifierInspection" defaultSeverity="WEAK WARNING" displayName="Unnecessary final modifiers" enabled="true" language="PHP" pluginId="com.kalessil.phpStorm.phpInspectionsEA" pluginVersion="5.0.0.0" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports methods declared final in context of final classes, therefore final keyword can be dropped from methods signature.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="UnnecessaryCastingInspection" defaultSeverity="WEAK WARNING" displayName="Unnecessary type casting" enabled="true" language="PHP" pluginId="com.kalessil.phpStorm.phpInspectionsEA" pluginVersion="5.0.0.0" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
The inspection analyzes parameters and return type hints and reports unnecessary type castings.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="IsNullFunctionUsageInspection" defaultSeverity="WEAK WARNING" displayName="'null === ...' can be used" enabled="false" language="PHP" pluginId="com.kalessil.phpStorm.phpInspectionsEA" pluginVersion="5.0.0.0" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports 'is_null(...)' usage, a feature introduced in PHP4.&lt;br /&gt;
&lt;br /&gt;
All 'is_null(...)' calls can be safely replaced with 'null === ...' constructs (or 'null !== ...' if the original construct was negated).
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="StaticInvocationViaThisInspection" defaultSeverity="WARNING" displayName="Static methods invocation via '-&gt;'" enabled="true" language="PHP" pluginId="com.kalessil.phpStorm.phpInspectionsEA" pluginVersion="5.0.0.0" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports if static method invocations use '$this' or '[expression]-&gt;'.&lt;br/&gt;
&lt;br/&gt;
This cases can be refactoring artifacts, which remains confusing as not reflecting actual architecture state.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="MisorderedModifiersInspection" defaultSeverity="WEAK WARNING" displayName="PSR-compliant modifiers order" enabled="true" language="PHP" pluginId="com.kalessil.phpStorm.phpInspectionsEA" pluginVersion="5.0.0.0" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports modifiers placed in the order violating PSR-2.
&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="ParameterDefaultValueIsNotNullInspection" defaultSeverity="WEAK WARNING" displayName="Non-null parameters default value" enabled="false" language="PHP" pluginId="com.kalessil.phpStorm.phpInspectionsEA" pluginVersion="5.0.0.0" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Documentation can be found &lt;a href="https://github.com/kalessil/phpinspectionsea/blob/master/docs/code-style.md#non-null-parameters-default-value"&gt;here&lt;/a&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="AccessModifierPresentedInspection" defaultSeverity="WEAK WARNING" displayName="Access modifiers shall be defined" enabled="true" language="PHP" pluginId="com.kalessil.phpStorm.phpInspectionsEA" pluginVersion="5.0.0.0" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Documentation can be found &lt;a href="https://github.com/kalessil/phpinspectionsea/blob/master/docs/code-style.md#access-modifiers-shall-be-defined"&gt;here&lt;/a&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="NestedNotOperatorsInspection" defaultSeverity="WEAK WARNING" displayName="Nested not operators usage" enabled="true" language="PHP" pluginId="com.kalessil.phpStorm.phpInspectionsEA" pluginVersion="5.0.0.0" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports multiple !-operators (e.g. !! or !!!) usage which is confusing to review.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ShortOpenTagUsageInspection" defaultSeverity="WEAK WARNING" displayName="PHP short open tag usage" enabled="true" language="PHP" pluginId="com.kalessil.phpStorm.phpInspectionsEA" pluginVersion="5.0.0.0" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports usage of short open php short open tags '&amp;amp;?', which considered to be a bad practice.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="IsEmptyFunctionUsageInspection" defaultSeverity="WEAK WARNING" displayName="'empty(...)' usage" enabled="true" language="PHP" pluginId="com.kalessil.phpStorm.phpInspectionsEA" pluginVersion="5.0.0.0" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Documentation can be found &lt;a href="https://github.com/kalessil/phpinspectionsea/blob/master/docs/types-compatibility.md#empty-usage"&gt;here&lt;/a&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="StaticClosureCanBeUsedInspection" defaultSeverity="WEAK WARNING" displayName="Static closure can be used" enabled="true" language="PHP" pluginId="com.kalessil.phpStorm.phpInspectionsEA" pluginVersion="5.0.0.0" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Analyzes closures and suggests using static closures instead.&lt;br/&gt;
&lt;br/&gt;
This can bring additional performance improvements, e.g. as &lt;a href="https://github.com/Ocramius/GeneratedHydrator/releases/tag/3.0.0"&gt;here&lt;/a&gt;:&lt;br/&gt;
&lt;blockquote&gt;
    Also, by using static function () {} closures, we squeezed out another 15% of hydration performance
    when dealing with private properties.
&lt;/blockquote&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="IncrementDecrementOperationEquivalentInspection" defaultSeverity="WEAK WARNING" displayName="Increment/decrement operation equivalent" enabled="true" language="PHP" pluginId="com.kalessil.phpStorm.phpInspectionsEA" pluginVersion="5.0.0.0" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Analyses assignment expressions and reports if prefixed increment/decrement constructions (e.g. '--$var', '++$var') can be used instead.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="NestedAssignmentsUsageInspection" defaultSeverity="WEAK WARNING" displayName="Nested assignments usage" enabled="false" language="PHP" pluginId="com.kalessil.phpStorm.phpInspectionsEA" pluginVersion="5.0.0.0" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Analyzes assignments and reports when nested assignments has been used (those are not considered to be the best practice).
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="MissingOrEmptyGroupStatementInspection" defaultSeverity="WEAK WARNING" displayName="Missing or empty conditionals group statement" enabled="true" language="PHP" pluginId="com.kalessil.phpStorm.phpInspectionsEA" pluginVersion="5.0.0.0" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports if conditionals and loops (if/elseif/else, foreach/for/while/do-while) have no bodies or empty bodies.&lt;br /&gt;
&lt;br /&gt;
The constructs should have a group statement wrapping statements in order to follow the best practices.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ImplodeArgumentsOrderInspection" defaultSeverity="WEAK WARNING" displayName="'implode(...)' arguments order" enabled="true" language="PHP" pluginId="com.kalessil.phpStorm.phpInspectionsEA" pluginVersion="5.0.0.0" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
While 'implode()' tolerant to arguments order, the inspection ensures that the order as as per official documentation.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="UnnecessarySemicolonInspection" defaultSeverity="WEAK WARNING" displayName="Unnecessary semicolon" enabled="true" language="PHP" pluginId="com.kalessil.phpStorm.phpInspectionsEA" pluginVersion="5.0.0.0" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
These semicolons are redundant and may be safely removed.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="SelfClassReferencingInspection" defaultSeverity="WEAK WARNING" displayName="Self class referencing" enabled="true" language="PHP" pluginId="com.kalessil.phpStorm.phpInspectionsEA" pluginVersion="5.0.0.0" isGlobalTool="false">&lt;html&gt;
    &lt;body&gt;
        Suggests a replacement from &lt;code&gt;new MyClass&lt;/code&gt; to &lt;code&gt;new self&lt;/code&gt;.

        &lt;p&gt;&lt;strong&gt;Supports to:&lt;/strong&gt;&lt;/p&gt;
        &lt;ul&gt;
            &lt;li&gt;&lt;code&gt;new MyClass&lt;/code&gt;;&lt;/li&gt;
            &lt;li&gt;&lt;code&gt;MyClass::CONSTANT&lt;/code&gt;;&lt;/li&gt;
            &lt;li&gt;&lt;code&gt;MyClass::staticMethod()&lt;/code&gt;;&lt;/li&gt;
            &lt;li&gt;&lt;code&gt;MyClass::$staticProperty&lt;/code&gt;;&lt;/li&gt;
            &lt;li&gt;&lt;code&gt;MyClass::class&lt;/code&gt; to &lt;code&gt;__CLASS__&lt;/code&gt;;&lt;/li&gt;
        &lt;/ul&gt;

        &lt;p&gt;The option &lt;strong&gt;prefer class name referencing&lt;/strong&gt; will do the opposite effect.&lt;/p&gt;
    &lt;/body&gt;
&lt;/html&gt;
</inspection></group><group name="PostCSS" path=""><inspection shortName="PostCssCustomMedia" defaultSeverity="ERROR" displayName="Invalid custom media" enabled="true" language="PostCSS" pluginId="org.intellij.plugins.postcss" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a syntax error in a &lt;a href="https://github.com/postcss/postcss-custom-media"&gt;PostCSS Custom Media&lt;/a&gt; query.
&lt;!-- tooltip end --&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
@custom-media --small-viewport (max-width: 30em);
&lt;/code&gt;&lt;/pre&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PostCssUnresolvedModuleValueReference" defaultSeverity="ERROR" displayName="Unresolved CSS module value" enabled="true" language="PostCSS" pluginId="org.intellij.plugins.postcss" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an unresolved reference to a &lt;a href="https://github.com/css-modules/postcss-modules-values"&gt;CSS Module Value&lt;/a&gt; (&lt;code&gt;@value&lt;/code&gt; declaration).
&lt;!-- tooltip end --&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
@value foo from unknown;
&lt;/code&gt;&lt;/pre&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PostCssMediaRange" defaultSeverity="ERROR" displayName="Invalid media query range" enabled="true" language="PostCSS" pluginId="org.intellij.plugins.postcss" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Checks &lt;a href="https://github.com/postcss/postcss-media-minmax"&gt;range context&lt;/a&gt; syntax, which may alternatively be used for
media features with a 'range' type.
&lt;!-- tooltip end --&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
@media screen and (500px &amp;lt;= width &amp;lt;= 1200px) {}
&lt;/code&gt;&lt;/pre&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="PostCssNesting" defaultSeverity="WARNING" displayName="Invalid nested rule" enabled="false" language="PostCSS" pluginId="org.intellij.plugins.postcss" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a nested style rule whose syntax doesn't comply with the &lt;a href="https://github.com/postcss/postcss-nested"&gt;PostCSS Nested&lt;/a&gt;
or the &lt;a href="https://github.com/csstools/postcss-nesting"&gt;PostCSS Nesting&lt;/a&gt; specification.
&lt;!-- tooltip end --&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
.phone {
  &amp;_title {}
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PostCssCustomSelector" defaultSeverity="ERROR" displayName="Invalid custom selector" enabled="true" language="PostCSS" pluginId="org.intellij.plugins.postcss" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a syntax error in &lt;a href="https://github.com/postcss/postcss-custom-selectors"&gt;PostCSS Custom Selector&lt;/a&gt;.
&lt;!-- tooltip end --&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
@custom-selector :--heading h1, h2, h3;
&lt;/code&gt;&lt;/pre&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Bitwise operation issues" path="JavaScript and TypeScript"><inspection shortName="JSBitwiseOperatorUsage" defaultSeverity="WARNING" displayName="Bitwise operator usage" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a suspicious usage of a bitwise AND ("&lt;code&gt;&amp;&lt;/code&gt;") or OR ("&lt;code&gt;|&lt;/code&gt;") operator.
Usually it is a typo and the result of applying boolean operations AND ("&lt;code&gt;&amp;&amp;&lt;/code&gt;") and OR ("&lt;code&gt;||&lt;/code&gt;")  is expected.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ShiftOutOfRangeJS" defaultSeverity="WARNING" displayName="Shift operation by possibly wrong constant" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="233.13135.108" isGlobalTool="false">&lt;!-- Copied from community/plugins/InspectionGadgets/src/inspectionDescriptions/ShiftOutOfRange.html --&gt;
&lt;html&gt;
&lt;body&gt;
Reports a shift operation where the second operand is a constant outside the reasonable range, for example, an integer
shift operation outside the range &lt;code&gt;0..31&lt;/code&gt;, shifting by negative or overly large values.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PointlessBitwiseExpressionJS" defaultSeverity="WARNING" displayName="Bitwise expression can be simplified" enabled="false" language="JavaScript" pluginId="JavaScript" pluginVersion="233.13135.108" isGlobalTool="false">&lt;!-- Copied from community/plugins/InspectionGadgets/src/inspectionDescriptions/PointlessBitwiseExpression.html --&gt;
&lt;html&gt;
&lt;body&gt;
Reports an expression that includes &lt;code&gt;and&lt;/code&gt; with zero, &lt;code&gt;or&lt;/code&gt; by zero, or 
shifting by zero. Such expressions may result from not fully completed automated refactorings.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="IncompatibleMaskJS" defaultSeverity="WARNING" displayName="Incompatible bitwise mask operation" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="233.13135.108" isGlobalTool="false">&lt;!-- Copied from community/plugins/InspectionGadgets/src/inspectionDescriptions/IncompatibleMask.html --&gt;
&lt;html&gt;
&lt;body&gt;
Reports a bitwise mask expression which for sure 
evaluates to &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;.
Expressions are of the form &lt;code&gt;(var &amp; constant1) == constant2&lt;/code&gt; or
&lt;code&gt;(var | constant1) == constant2&lt;/code&gt;, where &lt;code&gt;constant1&lt;/code&gt;
and &lt;code&gt;constant2&lt;/code&gt; are incompatible bitmask constants.
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
// Incompatible mask: as the last byte in mask is zero,
// something like 0x1200 would be possible, but not 0x1234
if ((mask &amp; 0xFF00) == 0x1234) {...}
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Try statement issues" path="JavaScript and TypeScript"><inspection shortName="EmptyCatchBlockJS" defaultSeverity="WARNING" displayName="Empty 'catch' block" enabled="false" language="JavaScript" pluginId="JavaScript" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an empty &lt;code&gt;catch&lt;/code&gt; block. This indicates that errors are simply ignored instead of handling them.
&lt;br/&gt;&lt;br/&gt;
Any comment in a &lt;code&gt;catch&lt;/code&gt; block mutes the inspection.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ContinueOrBreakFromFinallyBlockJS" defaultSeverity="WARNING" displayName="'continue' or 'break' inside 'finally' block" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports  a &lt;code&gt;break&lt;/code&gt; or &lt;code&gt;continue&lt;/code&gt; statement inside a &lt;code&gt;finally&lt;/code&gt;
block. Such statements are very confusing, may hide exceptions, and
complicate debugging.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="EmptyFinallyBlockJS" defaultSeverity="WARNING" displayName="Empty 'finally' block" enabled="false" language="JavaScript" pluginId="JavaScript" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an empty &lt;code&gt;finally&lt;/code&gt; block, which usually indicates an error.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ReturnFromFinallyBlockJS" defaultSeverity="WARNING" displayName="'return' inside 'finally' block" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a &lt;code&gt;return&lt;/code&gt; statement inside a &lt;code&gt;finally&lt;/code&gt;
block. Such &lt;code&gt;return&lt;/code&gt; statements may mask
exceptions thrown, and complicate debugging.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="UnusedCatchParameterJS" defaultSeverity="WARNING" displayName="Unused 'catch' parameter" enabled="false" language="JavaScript" pluginId="JavaScript" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a &lt;code&gt;catch&lt;/code&gt; parameter that is not used in the
corresponding block.  The &lt;code&gt;catch&lt;/code&gt; parameters named
&lt;code&gt;ignore&lt;/code&gt; or &lt;code&gt;ignored&lt;/code&gt; are ignored.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
    Use the checkbox below to disable this inspection for &lt;code&gt;catch&lt;/code&gt;
    blocks with comments.
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="EmptyTryBlockJS" defaultSeverity="WARNING" displayName="Empty 'try' block" enabled="false" language="JavaScript" pluginId="JavaScript" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an empty &lt;code&gt;try&lt;/code&gt; block, which usually indicates an error.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ThrowFromFinallyBlockJS" defaultSeverity="WARNING" displayName="'throw' inside 'finally' block" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports s &lt;code&gt;throw&lt;/code&gt; statement inside a &lt;code&gt;finally&lt;/code&gt;
block. Such &lt;code&gt;throw&lt;/code&gt; statements may mask
exceptions thrown, and complicate debugging.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ExceptionCaughtLocallyJS" defaultSeverity="WARNING" displayName="Exception used for local control-flow" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a &lt;code&gt;throw&lt;/code&gt; statement whose exceptions are always
caught by the containing &lt;code&gt;try&lt;/code&gt; statement. Using &lt;code&gt;throw&lt;/code&gt;
statements as a &lt;code&gt;goto&lt;/code&gt; to change the local flow of control is confusing.
&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="PostgreSQL" path=""><inspection shortName="PgSelectFromProcedureInspection" defaultSeverity="WARNING" displayName="Postgres: Select from procedure call" enabled="true" language="SQL" pluginId="com.intellij.database" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports situations when you make SELECT from a function or a DBLINK without an alias with a type (for example,
  &lt;code&gt;AS t1(s VARCHAR)&lt;/code&gt;).
  &lt;p&gt;This requirement does not apply to scalar functions.&lt;/p&gt;
&lt;p&gt;Example (PostgreSQL):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;CREATE FUNCTION produce_a_table() RETURNS RECORD AS $$
SELECT 1;
$$ LANGUAGE sql;
SELECT * FROM produce_a_table() AS s (c1 INT);
SELECT * FROM produce_a_table() AS s (c1);
SELECT * FROM DBLINK('dbname=mydb', 'SELECT proname, prosrc FROM pg_proc') AS t1;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;AS s (c1 INT)&lt;/code&gt; has a typed alias, while &lt;code&gt;AS s (c1)&lt;/code&gt; and &lt;code&gt;AS t1&lt;/code&gt; do not.
  In this case, the second call of &lt;code&gt;produce_a_table()&lt;/code&gt; and &lt;code&gt;DBLINK()&lt;/code&gt; will be highlighted.
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Code style" path="PHP"><inspection shortName="PhpLoopCanBeConvertedToArrayMapInspection" defaultSeverity="INFORMATION" displayName="Loop can be converted to 'array_map()' call" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the &lt;code&gt;foreach&lt;/code&gt; loops that can be replaced with &lt;code&gt;array_map()&lt;/code&gt; calls.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpConstructorStyleInspection" defaultSeverity="WARNING" displayName="Old style constructor" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports old-style constructor declarations (&lt;code&gt;ClassName()&lt;/code&gt;) and suggests replacing them with new-style constructors (&lt;code&gt;__construct()&lt;/code&gt;).
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  Prior to PHP 8.0, old-style constructor syntax used in the classes in the global namespace is treated as deprecated and will result in an &lt;code&gt;E_DEPRECATED&lt;/code&gt; error. If both a &lt;code&gt;__construct()&lt;/code&gt; and a &lt;code&gt;ClassName()&lt;/code&gt; method are defined, &lt;code&gt;__construct()&lt;/code&gt; will be called.
&lt;/p&gt;
&lt;p&gt;In namespaced classes, or any classes as of PHP 8.0, a &lt;code&gt;ClassName()&lt;/code&gt; method never has any special meaning and will never be called as a constructor. As a result, the inspection does not report such cases if the PHP language level is set to 8.0 or later.
&lt;/p&gt;
&lt;p&gt;
  See &lt;a href="https://www.php.net/manual/en/language.oop5.decon.php"&gt;Constructors and destructors (php.net)&lt;/a&gt; for details.
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="PhpClosureCanBeConvertedToShortArrowFunctionInspection" defaultSeverity="INFORMATION" displayName="Closure can be converted to arrow function" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the anonymous functions that can be transformed to short arrow functions. Support for short arrow functions is available since PHP 7.4.
&lt;p&gt;
  See &lt;a href="https://wiki.php.net/rfc/arrow_functions_v2"&gt;PHP RFC: Arrow Functions 2.0 (php.net)&lt;/a&gt; for details.
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpClassCanBeReadonlyInspection" defaultSeverity="WEAK WARNING" displayName="Class can be 'readonly'" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports classes which contain only &lt;code&gt;readonly&lt;/code&gt; properties.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpEchoOpenTagInspection" defaultSeverity="INFORMATION" displayName="Open 'echo' tag usage" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the &lt;code&gt;&amp;lt;?php echo&lt;/code&gt; usages that can be replaced with a short tag &lt;code&gt;&amp;lt;?=&lt;/code&gt;.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpIssetCanCheckNestedAccessDirectlyInspection" defaultSeverity="WEAK WARNING" displayName="'isset' can check nested array access and sub properties directly" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports constructions like &lt;code&gt;isset($a['a']) &amp;&amp; isset($a['a']['b']) &amp;&amp; isset($b) &amp;&amp; isset($b-&gt;b)&lt;/code&gt;
that can be replaced with &lt;code&gt;isset($a['a']['b']) &amp;&amp; isset($b-&gt;b)&lt;/code&gt;.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpMatchCanBeReplacedWithSwitchStatementInspection" defaultSeverity="INFORMATION" displayName="'match' can be replaced with 'switch' statement" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the &lt;code&gt;match&lt;/code&gt; expressions that can be replaced with &lt;code&gt;switch&lt;/code&gt; statements.
&lt;p&gt;
  Note that &lt;code&gt;match&lt;/code&gt; expressions use strict type comparison, while &lt;code&gt;switch&lt;/code&gt; statements rely on loose comparison. As a
  result, the expression semantics may change after replacement.
&lt;/p&gt;
&lt;p&gt;
  See &lt;a href="https://www.php.net/manual/en/control-structures.match.php"&gt;match (php.net)&lt;/a&gt; and &lt;a href="https://www.php.net/manual/en/control-structures.switch.php"&gt;switch (php.net)&lt;/a&gt; for details.
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpPluralMixedCanBeReplacedWithArrayInspection" defaultSeverity="WEAK WARNING" displayName="'mixed' type can be replaced with 'array'" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the &lt;code&gt;mixed[]&lt;/code&gt; usages in PHPDoc blocks that can be safely replaced with &lt;code&gt;array&lt;/code&gt;.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpUnnecessaryCurlyVarSyntaxInspection" defaultSeverity="WEAK WARNING" displayName="Unnecessary curly braces syntax for variable" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports unnecessary &lt;code&gt;{&lt;/code&gt; and &lt;code&gt;}&lt;/code&gt; used for interpolating variables in string literals.
&lt;p&gt;
  See &lt;a href="https://www.php.net/manual/en/language.types.string.php#language.types.string.parsing"&gt;Variable parsing (php.net)&lt;/a&gt; for details.
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpShortOpenTagInspection" defaultSeverity="WARNING" displayName="Short open tag usage" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports short PHP opening tag &lt;code&gt;&amp;lt;?&lt;/code&gt; usages. Since short tags can be disabled in the PHP interpreter configuration, using them may lead to code compatibility issues.
&lt;p&gt;
  See &lt;a href="https://www.php.net/manual/en/language.basic-syntax.phptags.php#language.basic-syntax.phptags"&gt;PHP tags (php.net)&lt;/a&gt; for details.
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpFullyQualifiedNameUsageInspection" defaultSeverity="WEAK WARNING" displayName="Fully qualified name usage" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the fully qualified class names that can be shortened by adding the &lt;code&gt;use&lt;/code&gt; statement.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpImplicitOctalLiteralUsageInspection" defaultSeverity="INFORMATION" displayName="Implicit octal literal can be replaced with explicit one" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the implicit octal literals such as &lt;code&gt;071&lt;/code&gt; that could be replaced with explicit ones such as 0o71.
&lt;p&gt;
  Explicit octal literals using the &lt;code&gt;0o/0O&lt;/code&gt; prefix are supported in PHP 8.1 and later.
&lt;/p&gt;
&lt;p&gt;
  See &lt;a href="https://wiki.php.net/rfc/explicit_octal_notation"&gt;Explicit octal integer literal notation (php.net)&lt;/a&gt; for details.
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpTraitUseRuleInsideDifferentClassUseListInspection" defaultSeverity="WEAK WARNING" displayName="Trait use rule resolved to method with different containing class " enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
  Reports the trait method &lt;code&gt;use&lt;/code&gt; rules that are resolved to methods from a different containing class rather than the one specified in the &lt;code&gt;use&lt;/code&gt; declaration.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpClosureCanBeConvertedToFirstClassCallableInspection" defaultSeverity="WEAK WARNING" displayName="'Closure::fromCallable()' can be converted to the first-class callable syntax" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the &lt;code&gt;callable&lt;/code&gt; creation expressions that use &lt;code&gt;Closure::fromCallable&lt;/code&gt; but can be replaced with first-class callable syntax &lt;code&gt;f(...)&lt;/code&gt; available since PHP 8.1.
&lt;p&gt;
  See &lt;a href="https://wiki.php.net/rfc/first_class_callable_syntax"&gt;First-class callable syntax (php.net)&lt;/a&gt; for details.
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpCatchWithInstanceOfCanBeReplacedWithSpecificCatchesInspection" defaultSeverity="WEAK WARNING" displayName="'instanceof' checks in 'catch' block can be replaced with specific catches" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the &lt;code&gt;instanceof&lt;/code&gt; checks in single &lt;code&gt;catch&lt;/code&gt; blocks that could be replaced with multiple &lt;code&gt;catch&lt;/code&gt; blocks specific for each exception instance.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpTraitUsageOutsideUseInspection" defaultSeverity="WEAK WARNING" displayName="Trait usage is not allowed" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the class references that are resolved to traits but are specified outside &lt;code&gt;use&lt;/code&gt; statements. Such usages are most probably the result of a programming mistake, since traits cannot be instantiated and any &lt;code&gt;instanceof&lt;/code&gt;-like behaviour is not supported for traits by design.
&lt;p&gt;
  See &lt;a href="https://www.php.net/manual/en/language.oop5.traits.php"&gt;Traits (php.net)&lt;/a&gt; for details.
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpCommentCanBeReplacedWithNamedArgumentInspection" defaultSeverity="WEAK WARNING" displayName="Comment can be replaced with named argument" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the inline comments before arguments in function calls that only contain the name of the parameter and thus serve as hints. In PHP 8.0 and later, named arguments can be used instead.
&lt;p&gt;
  See &lt;a href="https://wiki.php.net/rfc/match_expression_v2"&gt;Named arguments (php.net)&lt;/a&gt; for details.
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpTraditionalSyntaxArrayLiteralInspection" defaultSeverity="WEAK WARNING" displayName="Traditional syntax array literal detected" enabled="false" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports traditional array syntax (&lt;code&gt;array()&lt;/code&gt;) usages in array literals and suggests replacing them with short array syntax (&lt;code&gt;[]&lt;/code&gt;).
&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="PhpMethodOrClassCallIsNotCaseSensitiveInspection" defaultSeverity="WEAK WARNING" displayName="Case mismatch in method call or class usage" enabled="false" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the usages of functions, methods, classes, and namespaces that do not match the case used in their declarations.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpIllegalPsrClassPathInspection" defaultSeverity="WARNING" displayName="Class path doesn't match project structure" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the classes with the filepath not following the PSR-0/PSR-4 project structure.
&lt;p&gt;
  You can configure the project vendor roots under &lt;b&gt;Settings/Preferences | Directories&lt;/b&gt;.
&lt;/p&gt;

&lt;p&gt;
  See &lt;a href="https://www.php-fig.org/psr/psr-4/"&gt;PSR-0/PSR-4 standards (php-fig.org)&lt;/a&gt; for details.
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="PhpMatchExpressionCanBeReplacedWithTernaryInspection" defaultSeverity="INFORMATION" displayName="'match' expression can be replace with ternary expression" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the &lt;code&gt;match&lt;/code&gt; expressions containing a default arm and a single non-default arm. Such &lt;code&gt;match&lt;/code&gt; expressions can be replaced with ternary expressions.
&lt;p&gt;
  See &lt;a href="https://wiki.php.net/rfc/match_expression_v2"&gt;Match expression (php.net)&lt;/a&gt; for details.
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpStrFunctionsInspection" defaultSeverity="WEAK WARNING" displayName="'str*()' calls can be replaced with PHP 8 'str_*()' calls" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the &lt;code&gt;strpos&lt;/code&gt; and &lt;code&gt;substr&lt;/code&gt; functions calls that can be replaced with the &lt;code&gt;str_*&lt;/code&gt; functions calls (introduced in PHP 8.0).
&lt;p&gt;
  See &lt;a href="https://wiki.php.net/rfc/str_contains"&gt;str_contains (php.net)&lt;/a&gt; and &lt;a href="https://wiki.php.net/rfc/add_str_starts_with_and_ends_with_functions"&gt;str_starts_with and str_ends_with functions (php.net)&lt;/a&gt; for details.
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpUnnecessaryParenthesesInspection" defaultSeverity="INFORMATION" displayName="Unnecessary parentheses" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the expressions containing redundant parenthesis, which can be safely removed.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpRedundantClosingTagInspection" defaultSeverity="WEAK WARNING" displayName="Redundant closing tag" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports PHP closing tag &lt;code&gt;?&amp;gt;&lt;/code&gt; usages, which are redundant in files containing only PHP code.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpIfCanBeReplacedWithMatchExpressionInspection" defaultSeverity="INFORMATION" displayName="'if' can be replaced with 'match' expression" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the &lt;code&gt;if&lt;/code&gt; statements inside &lt;code&gt;if-elseif-else&lt;/code&gt; constructs that use strict comparisons (&lt;code&gt;===&lt;/code&gt;) and could be replaced with &lt;code&gt;match&lt;/code&gt; expressions.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpMultipleClassesDeclarationsInOneFile" defaultSeverity="WEAK WARNING" displayName="Multiple classes declarations in one file" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports multiple class declarations in a single file, which violates the PSR-0/PSR-4 standards.

&lt;p&gt;
  See &lt;a href="https://www.php-fig.org/psr/psr-4/"&gt;PSR-0/PSR-4 standards (php-fig.org)&lt;/a&gt; for details.
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="PhpConvertToJsonValidateInspection" defaultSeverity="WEAK WARNING" displayName="'json_decode()' and 'json_last_error()' can be converted to 'json_validate()'" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Convert `json_decode()` and `json_last_error() === JSON_ERROR_NONE` to `json_validate()`
&lt;p&gt;
  See &lt;a href="https://wiki.php.net/rfc/json_validate"&gt;PHP RFC: json_validate&lt;/a&gt; for details.
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpCastIsUnnecessaryInspection" defaultSeverity="WEAK WARNING" displayName="Type cast is unnecessary" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the type cast operators used on the values that are already of the corresponding type. Such operators are redundant and can be safely removed.
&lt;p&gt;
  See &lt;a href="https://www.php.net/manual/en/language.types.type-juggling.php"&gt;Type juggling (php.net)&lt;/a&gt; for details.
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpVariableIsUsedOnlyInClosureInspection" defaultSeverity="WEAK WARNING" displayName="Variable is only used inside closure" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports variables in closures' &lt;code&gt;use&lt;/code&gt; list that are only used inside closure.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpUnnecessaryLeadingBackslashInUseStatementInspection" defaultSeverity="WEAK WARNING" displayName="Unnecessary leading '\' in 'use' statement" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
  Reports the &lt;code&gt;use&lt;/code&gt; statements with an unnecessary leading &lt;code&gt;\&lt;/code&gt;.
&lt;p&gt;
  For namespaced names (fully qualified namespace names containing a namespace separator, such as &lt;code&gt;Foo\Bar&lt;/code&gt; as opposed to global names that do not, such as &lt;code&gt;FooBar&lt;/code&gt;), the leading backslash is unnecessary and not recommended, as import names must be fully qualified and are not processed relative to the current namespace.
&lt;/p&gt;
&lt;p&gt;
  See &lt;a href="https://www.php.net/manual/en/language.namespaces.importing.php"&gt;Using namespaces: Aliasing/Importing (php.net)&lt;/a&gt; for details.
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpPowCallCanBeReplacedWithOperatorInspection" defaultSeverity="INFORMATION" displayName="'pow()' call can be replaced with '**' operator" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the &lt;code&gt;pow()&lt;/code&gt; calls that can be replaced with the &lt;code&gt;**&lt;/code&gt; operator, which adds no overhead of calling a function.
&lt;p&gt;
  See &lt;a href="https://wiki.php.net/rfc/pow-operator"&gt;Power operator (php.net)&lt;/a&gt; for details.
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpUnnecessaryDoubleQuotesInspection" defaultSeverity="WEAK WARNING" displayName="Unnecessary double quotes" enabled="false" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports double-quoted string literals that do not contain string interpolation, escape sequences, or single quotes.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpDefineCanBeReplacedWithConstInspection" defaultSeverity="WEAK WARNING" displayName="Define constant name can be replaced with 'const' syntax" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the &lt;code&gt;define()&lt;/code&gt; calls that can be replaced with &lt;code&gt;const&lt;/code&gt; syntax.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpLoopCanBeConvertedToArrayFillInspection" defaultSeverity="INFORMATION" displayName="Loop can be converted to 'array_fill()' call" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the &lt;code&gt;for&lt;/code&gt; loops that can be replaced with &lt;code&gt;array_fill()&lt;/code&gt; calls.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpSwitchCanBeReplacedWithMatchExpressionInspection" defaultSeverity="WEAK WARNING" displayName="'switch' can be replaced with 'match' expression" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports 'switch' statements that could be replaced with 'match' expression
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpArrayMapCanBeConvertedToLoopInspection" defaultSeverity="INFORMATION" displayName="'array_map()' call can be converted to loop" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the &lt;code&gt;array_map()&lt;/code&gt; calls that can be replaced with &lt;code&gt;foreach&lt;/code&gt; loops.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpLoopCanBeConvertedToArrayFilterInspection" defaultSeverity="INFORMATION" displayName="Loop can be converted to 'array_filter()' call" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the &lt;code&gt;foreach&lt;/code&gt; loops that can be replaced with &lt;code&gt;array_filter()&lt;/code&gt; calls.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpArrayFillCanBeConvertedToLoopInspection" defaultSeverity="INFORMATION" displayName="'array_fill' can be converted to loop" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the &lt;code&gt;array_fill()&lt;/code&gt; calls that can be replaced with &lt;code&gt;foreach&lt;/code&gt; loops.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpMixedReturnTypeCanBeReducedInspection" defaultSeverity="WEAK WARNING" displayName="'mixed' return type can be narrowed" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
  Reports 'mixed' return types that can be narrowed down to more concrete types.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpVariableVariableInspection" defaultSeverity="WEAK WARNING" displayName="Usage of a variable variable" enabled="false" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the usages of variable variables (dynamic variable names such as &lt;code&gt;$$a&lt;/code&gt;).
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpIssetCanBeReplacedWithCoalesceInspection" defaultSeverity="WEAK WARNING" displayName="'isset' can be replaced with coalesce" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the conditions using &lt;code&gt;isset&lt;/code&gt; that can be safely replaced with expressions using the &lt;code&gt;??&lt;/code&gt; null coalesce operator.
&lt;p&gt;
  See &lt;a href="https://wiki.php.net/rfc/isset_ternary"&gt;Null coalesce operator (php.net)&lt;/a&gt; for details.
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpClassConstantCanBeFinalInspection" defaultSeverity="INFORMATION" displayName="Class constant can be 'final'" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the non-&lt;code&gt;final&lt;/code&gt; class constants that are not redefined in child classes. In PHP 8.1 and later, such constants can be made &lt;code&gt;final&lt;/code&gt;.
&lt;p&gt;
  See &lt;a href="https://wiki.php.net/rfc/final_class_const"&gt;Final class constants (php.net)&lt;/a&gt; for details.
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpArrayFilterCanBeConvertedToLoopInspection" defaultSeverity="INFORMATION" displayName="'array_filter()' call can be converted to loop" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the &lt;code&gt;array_filter()&lt;/code&gt; calls that can be replaced with &lt;code&gt;foreach&lt;/code&gt; loops.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpNamedArgumentsWithChangedOrderInspection" defaultSeverity="WEAK WARNING" displayName="Named arguments order does not match parameters order" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports named argument with order that does not match parameter order
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpNullSafeOperatorCanBeUsedInspection" defaultSeverity="WEAK WARNING" displayName="Nullsafe operator '?-&gt;' can be used" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the null-checking conditional expressions that can be safely replaced with the &lt;code&gt;?-&gt;&lt;/code&gt; nullsafe operator.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpShortOpenEchoTagInspection" defaultSeverity="INFORMATION" displayName="Short open 'echo' tag usage" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports short PHP &lt;code&gt;echo&lt;/code&gt; tag &lt;code&gt;&amp;lt;?=&lt;/code&gt; usages.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpCastIsEvaluableInspection" defaultSeverity="WEAK WARNING" displayName="Type cast on a scalar value" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the type casts that can be evaluated in place and suggests replacing them with actual computed values.
&lt;p&gt;
  See &lt;a href="https://www.php.net/manual/en/language.types.type-juggling.php"&gt;Type juggling (php.net)&lt;/a&gt; for details.
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="PhpRedundantReadonlyModifierInspection" defaultSeverity="WEAK WARNING" displayName="'readonly' modifier is redundant" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;code&gt;readonly&lt;/code&gt; modifiers applied to properties in read-only classes. Those modifiers are redundant since all properties in read-only
classes are implicitly read-only.
&lt;p&gt;
  See &lt;a href="https://wiki.php.net/rfc/readonly_classes#proposal"&gt;Readonly classes RFC (php.net)&lt;/a&gt; for details.
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpGetClassCanBeReplacedWithClassNameLiteralInspection" defaultSeverity="INFORMATION" displayName="'get_class()' call can be replaced with '::class'" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
  Reports the &lt;code&gt;get_class()&lt;/code&gt; calls and suggests replacing them with &lt;code&gt;::class&lt;/code&gt; when PHP Language level is set to 8.0 or later.
&lt;p&gt;
  See &lt;a href="https://wiki.php.net/rfc/class_name_literal_on_object"&gt;Allow ::class on objects (php.net)&lt;/a&gt; for details.
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpAutovivificationOnFalseValuesInspection" defaultSeverity="WEAK WARNING" displayName="Automatic conversion of 'false' to array is deprecated" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports automatic conversions of &lt;code&gt;false&lt;/code&gt; values to arrays. Such expressions are deprecated starting from PHP 8.1.
&lt;p&gt;
  See &lt;a href="https://wiki.php.net/rfc/autovivification_false"&gt;Deprecate autovivification on false&lt;/a&gt; for details.
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpCombineMultipleIssetCallsIntoOneInspection" defaultSeverity="INFORMATION" displayName="Multiple 'isset' calls can be replaced with one" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports multiple &lt;code&gt;isset()&lt;/code&gt; checks that can be replaced with a single one.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpDangerousArrayInitializationInspection" defaultSeverity="INFORMATION" displayName="Dangerous array initialization" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports dangerous array initializations (such as &lt;code&gt;$arr[] = value&lt;/code&gt;).
&lt;p&gt;
  This practice is discouraged because if &lt;code&gt;$arr&lt;/code&gt; already contains some value (for example, a string from a request variable), then this value will stay in place and &lt;code&gt;[]&lt;/code&gt; may actually stand for string access operator. It is always preferable to initialize a variable by direct assignment.
&lt;/p&gt;
&lt;p&gt;See &lt;a href="https://www.php.net/manual/en/language.types.array.php#language.types.array.syntax.modifying"&gt;Creating/modifying with square bracket syntax (php.net)&lt;/a&gt; for details.
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpSingleStatementWithBracesInspection" defaultSeverity="INFORMATION" displayName="Single-statement body with braces" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the control structures (such as loops or conditionals) whose bodies are enclosed in braces but only contain a single child statement. Using braces in such cases is not necessary.
&lt;p&gt;
  See &lt;a href="https://www.php.net/manual/en/language.control-structures.php"&gt;Control structures (php.net)&lt;/a&gt; for details.
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpArrayTraversableCanBeReplacedWithIterableInspection" defaultSeverity="WEAK WARNING" displayName="Type hint 'array|Traversable' can be replaced with 'iterable'" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the &lt;code&gt;array|Traversable&lt;/code&gt; type hints that can be replaced with &lt;code&gt;iterable&lt;/code&gt;.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpUnnecessaryFullyQualifiedNameInspection" defaultSeverity="WEAK WARNING" displayName="Unnecessary fully qualified name" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the usages of fully qualified class names, which can be shortened without adding the &lt;code&gt;use&lt;/code&gt; statement.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpStatementWithoutBracesInspection" defaultSeverity="INFORMATION" displayName="Control statement body without braces" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the control structures (such as loops or conditionals) whose bodies are not enclosed in braces.
&lt;p&gt;
  See &lt;a href="https://www.php.net/manual/en/language.control-structures.php"&gt;Control structures (php.net)&lt;/a&gt; for details.
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpMethodMayBeStaticInspection" defaultSeverity="INFORMATION" displayName="Method can be made 'static'" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the methods that don't use any instance references and thus may be converted to static methods.
&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="PhpExpressionWithoutClarifyingParenthesesInspection" defaultSeverity="INFORMATION" displayName="Expression without clarifying parentheses" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports potentially ambiguous expressions and proposes enclosing them in clarifying parentheses.
&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Code style issues" path="JavaScript and TypeScript"><inspection shortName="JSRemoveUnnecessaryParentheses" defaultSeverity="INFORMATION" displayName="Unnecessary parentheses" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports redundant parentheses.
&lt;!-- tooltip end --&gt;
&lt;p&gt;In expressions:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var x = ((1) + 2) + 3&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In arrow function argument lists:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var incrementer = (x) =&gt; x + 1&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In TypeScript and Flow type declarations:&lt;/p&gt;
&lt;pre&gt;&lt;code lang="typescript"&gt;type Card = (Suit &amp; Rank) | (Suit &amp; Number)&lt;/code&gt;&lt;/pre&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ChainedFunctionCallJS" defaultSeverity="WARNING" displayName="Chained function call" enabled="false" language="JavaScript" pluginId="JavaScript" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a function call whose target is another function call, for example, &lt;code&gt;foo().bar()&lt;/code&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ConstantOnRHSOfComparisonJS" defaultSeverity="WARNING" displayName="Constant on right side of comparison" enabled="false" language="JavaScript" pluginId="JavaScript" pluginVersion="233.13135.108" isGlobalTool="false">&lt;!-- Copied from community/plugins/InspectionGadgets/src/inspectionDescriptions/ConstantOnWrongSideOfComparison.html --&gt;
&lt;html&gt;
&lt;body&gt;
Reports a comparison operation with a constant in the right-hand side. According to 
coding conventions, constants should only be in the left-hand side of comparisons.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ConstantOnLHSOfComparisonJS" defaultSeverity="WARNING" displayName="Constant on left side of comparison" enabled="false" language="JavaScript" pluginId="JavaScript" pluginVersion="233.13135.108" isGlobalTool="false">&lt;!-- Copied from community/plugins/InspectionGadgets/src/inspectionDescriptions/ConstantOnWrongSideOfComparison.html --&gt;
&lt;html&gt;
&lt;body&gt;
Reports a comparison operation with a constant value in the left-hand side. According to
coding conventions, constants should be in the right-hand side of comparisons.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="NonBlockStatementBodyJS" defaultSeverity="WARNING" displayName="Statement body without braces" enabled="false" language="JavaScript" pluginId="JavaScript" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a &lt;code&gt;if&lt;/code&gt;, &lt;code&gt;while&lt;/code&gt;, &lt;code&gt;for&lt;/code&gt;, or &lt;code&gt;with&lt;/code&gt; statements whose body is not a block statement.  Using code block in statement bodies is usually safer for downstream maintenance.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ChainedEqualityJS" defaultSeverity="WARNING" displayName="Chained equality" enabled="false" language="JavaScript" pluginId="JavaScript" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a chained equality comparison (i.e. &lt;code&gt;a==b==c&lt;/code&gt;).  Such comparisons are confusing.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="UnterminatedStatementJS" defaultSeverity="WARNING" displayName="Unterminated statement" enabled="false" language="JavaScript" pluginId="JavaScript" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a statement without a semicolon or a newline at the end.
&lt;p&gt;Select the 'Terminate statements with semicolons' option in &lt;i&gt;Editor | Code Style | JavaScript or TypeScript - Punctuation&lt;/i&gt; to report any statement that doesn't end with a semicolon, even if a newline is used.
According to  some coding styles, semicolons are preferred to line-breaks for consistency with the other languages.
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JSDeclarationsAtScopeStart" defaultSeverity="WEAK WARNING" displayName="'var' declared not at the beginning of a function" enabled="false" language="JavaScript" pluginId="JavaScript" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Checks that declarations of local variables declared with &lt;b&gt;var&lt;/b&gt; are at the top of a function scope.
&lt;br/&gt;&lt;br/&gt;
By default, variable declarations are always moved ("hoisted") invisibly to the top of their containing scope when the code is executed.
Therefore, declaring them at the top of the scope helps represent this behavior in the code.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JSUndefinedPropertyAssignment" defaultSeverity="WEAK WARNING" displayName="Undefined property assignment" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an assignment to a property that is not defined in the type of a variable. &lt;p&gt;Example: &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
/**
 * @type {{ property1: string, property2: number }}
 */
let myVariable = create();

myVariable.newProperty = 3; // bad
&lt;/code&gt;&lt;/pre&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JSArrowFunctionBracesCanBeRemoved" defaultSeverity="INFORMATION" displayName="Redundant braces around arrow function body" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an arrow function whose body only consists of braces and exactly one statement.
Suggests  converting to concise syntax without braces.
&lt;!-- tooltip end --&gt;
&lt;pre&gt;&lt;code&gt;
    let incrementer = (x) =&gt; {return x + 1};
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied, the code fragment looks as follows:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
    let incrementer = (x) =&gt; x + 1;
&lt;/code&gt;&lt;/pre&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="NestedFunctionCallJS" defaultSeverity="WARNING" displayName="Nested function call" enabled="false" language="JavaScript" pluginId="JavaScript" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a function call that is used as an argument in another function call, for example, &lt;code&gt;foo(bar())&lt;/code&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Structural search" path=""><inspection shortName="SSBasedInspection" defaultSeverity="WARNING" displayName="Structural search inspection" enabled="true" pluginId="com.intellij" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Allows configuring &lt;b&gt;Structural Search/Structural Replace&lt;/b&gt; templates that you can apply to the file you are editing.
&lt;/p&gt;
&lt;p&gt;All matches will be highlighted and marked with the template name that you have configured.
If you configure the &lt;b&gt;Structural Replace&lt;/b&gt; pattern as well, the corresponding replace option will be available as a quick-fix.
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="React" path="JavaScript and TypeScript"><inspection shortName="JSXDomNesting" defaultSeverity="WARNING" displayName="Invalid DOM element nesting" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Detects HTML elements in JSX files which are not nested properly according to the DOM specification.
React reports runtime warnings on incorrectly nested elements.


&lt;!--Write your description here.--&gt;
&lt;!--Start the description with a verb in 3rd person singular, like reports, detects, highlights.--&gt;
&lt;!--In the first sentence, briefly explain what exactly the inspection helps you detect.--&gt;
&lt;!--Make sure the sentence is not very long and complicated.--&gt;
&lt;!--&lt;p&gt;--&gt;
&lt;!--  The first sentence must be in a dedicated paragraph separated from the rest of the text. This will make the description easier to read.--&gt;
&lt;!--  Make sure the description doesn’t just repeat the inspection title.--&gt;
&lt;!--&lt;/p&gt;--&gt;
&lt;!--&lt;p&gt;--&gt;
&lt;!--  See https://jetbrains.design/intellij/text/inspections/#descriptions for more information.--&gt;
&lt;!--&lt;/p&gt;--&gt;
&lt;!--&amp;lt;!&amp;ndash; tooltip end &amp;ndash;&amp;gt;--&gt;
&lt;!--&lt;p&gt;Text after this comment will only be shown in the settings of the inspection.&lt;/p&gt;--&gt;

&lt;!--&lt;p&gt;To open related settings directly from the description, add a link with `settings://$` optionally followed by `?$` to pre-select a UI--&gt;
&lt;!--  element.&lt;/p&gt;--&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Probable bugs" path="PHP"><inspection shortName="PhpOptionalBeforeRequiredParametersInspection" defaultSeverity="WARNING" displayName="Optional before required parameter" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the optional parameters that appear before the required parameters in a function/method declaration.
&lt;p&gt;
  See &lt;a href="http://www.php.net/manual/en/functions.arguments.php#functions.arguments.default"&gt;Default argument values (php.net)&lt;/a&gt; for details.
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpAssignmentInConditionInspection" defaultSeverity="INFORMATION" displayName="Assignment in condition" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the assignments that are used in conditional expressions.
&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="PhpArrayModificationWillNotHaveEffectInspection" defaultSeverity="WEAK WARNING" displayName="Modification of the array returned from function by value won't have any effect" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports call to a function that returns array by value, which makes the assignment operation non-working. Return by reference shall be used instead.
&lt;p&gt;&lt;b&gt;For example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
&amp;lt?php
class A {
    private $values = [];
    public function getValues() {
        return $this-&gt;values;
    }
}
$config = new A();
$config-&gt;getValues()['a'] = 'a';
&lt;/code&gt;&lt;/pre&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpObjectFieldsAreOnlyWrittenInspection" defaultSeverity="WARNING" displayName="Local object is used only for writing properties" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the variable assignments to new objects that are used only for writing the object's properties without observable side effects.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpNonStrictObjectEqualityInspection" defaultSeverity="WEAK WARNING" displayName="Non-strict object equality" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the usages of the comparison operator (&lt;code&gt;==&lt;/code&gt;) for comparing object variables.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  Object variables are compared as follows:
&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
    When using the comparison operator (&lt;code&gt;==&lt;/code&gt;), two object instances are considered equal if they have the same attributes and values (values are compared with
    &lt;code&gt;==&lt;/code&gt;), and are instances of the same class.
  &lt;/li&gt;
  &lt;li&gt;
    When using the identity operator (&lt;code&gt;===&lt;/code&gt;), object variables are considered identical if and only if they refer to the same instance of the same class.
  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
  See &lt;a href="http://www.php.net/manual/en/language.oop5.object-comparison.php"&gt;Comparing Objects (php.net)&lt;/a&gt; for details.
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpUncoveredEnumCasesInspection" defaultSeverity="WEAK WARNING" displayName="Some enum cases are uncovered" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the &lt;code&gt;match&lt;/code&gt; expressions that don't cover all &lt;code&gt;enum&lt;/code&gt; cases in &lt;code&gt;match&lt;/code&gt; arm conditions.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpToStringReturnInspection" defaultSeverity="ERROR" displayName="Method '__toString' return type" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
  Reports the &lt;code&gt;__toString&lt;/code&gt; methods that do not return &lt;code&gt;string&lt;/code&gt;.
  &lt;!-- tooltip end --&gt;
  &lt;p&gt;Prior to PHP 7.4, this would lead to a fatal &lt;code&gt;E_RECOVERABLE_ERROR&lt;/code&gt; level error. In PHP 7.4, a fatal non-recoverable &lt;code&gt;ERROR&lt;/code&gt; is thrown. In PHP 8.0, the return value follows the standard PHP type semantics and will be coerced into a string if possible and if strict typing is disabled.
  &lt;/p&gt;
  &lt;p&gt;
    See &lt;a href="https://www.php.net/manual/en/language.oop5.magic.php#language.oop5.magic.tostring"&gt;__toString (php.net)&lt;/a&gt; for details.
  &lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="PhpMissingParentConstructorInspection" defaultSeverity="WARNING" displayName="Missing parent call for constructor" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
 Reports the constructors that do not call their parent constructor.
&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="PhpNonCompoundUseInspection" defaultSeverity="WARNING" displayName="Unnecessary statement use" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
  Reports the &lt;code&gt;use&lt;/code&gt; statements that contain non-fully qualified class names and thus have no effect. The inspection only reports classes imports; functions and constants imports are not considered.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  See &lt;a href="http://www.php.net/manual/en/language.namespaces.importing.php#language.namespaces.importing"&gt;Using namespaces: Aliasing/Importing (php.net)&lt;/a&gt; for details.
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpMissingParentCallCommonInspection" defaultSeverity="WEAK WARNING" displayName="Missing parent call for method" enabled="false" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
  Reports the methods that do not call their parent method.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpUnpackedArgumentTypeMismatchInspection" defaultSeverity="WARNING" displayName="Invalid type of unpacked argument" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
  Reports unpacked function arguments and array elements whose type is neither &lt;code&gt;array&lt;/code&gt; nor &lt;code&gt;Traversable&lt;/code&gt;.
&lt;p&gt;
  Starting with PHP 8.0, such usages will result in &lt;code&gt;Fatal error&lt;/code&gt;.
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpDuplicateArrayKeysInspection" defaultSeverity="WARNING" displayName="Duplicate array keys" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
  Reports duplicate keys in array declarations.
  &lt;p&gt;If multiple elements in the array declaration use the same key, only the last one will be used, and all others will be overwritten.&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpDuplicateMatchConditionInspection" defaultSeverity="WARNING" displayName="Duplicate condition" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
  Reports duplicate conditions in &lt;code&gt;match&lt;/code&gt; expressions.
&lt;p&gt;
    See &lt;a href="https://wiki.php.net/rfc/match_expression_v2"&gt;Match expression (php.net)&lt;/a&gt; for details.
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpCaseWithValueNotFoundInEnumInspection" defaultSeverity="ERROR" displayName="Case with specified value not found in enum" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the arguments of enum's &lt;code&gt;from&lt;/code&gt; method calls that are not found in target enum classes.
&lt;p&gt;
  See &lt;a href="https://wiki.php.net/rfc/enumerations"&gt;Enumerations (php.net)&lt;/a&gt; for details.
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpStatementHasEmptyBodyInspection" defaultSeverity="WARNING" displayName="Statement has empty body" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the statements that have empty bodies.
&lt;p&gt;While occasionally useful, such statements are often the result of typos and may cause confusion.&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpVoidFunctionResultUsedInspection" defaultSeverity="WARNING" displayName="Invalid function result used" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
  Reports the usages of a &lt;code&gt;void&lt;/code&gt; or &lt;code&gt;never&lt;/code&gt; function's return value.
&lt;p&gt;
  Since &lt;code&gt;void&lt;/code&gt; functions do not have a return value and &lt;code&gt;never&lt;/code&gt; functions terminate execution or throw an exception, such usages are most likely a programming mistake.
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpApplyingEmptyIndexOperatorOnStringInspection" defaultSeverity="ERROR" displayName="Empty index operator not supported for strings" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the usages of empty index operator (&lt;code&gt;[]&lt;/code&gt;) on strings.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  Starting from PHP 7.1, applying the empty index operator on a string throws a fatal error.
&lt;/p&gt;
&lt;p&gt;See &lt;a href="https://www.php.net/manual/en/language.types.array.php#language.types.array.syntax.modifying"&gt;Creating/modifying with square bracket syntax (php.net)&lt;/a&gt; for details.
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpUnusedMatchConditionInspection" defaultSeverity="WEAK WARNING" displayName="Unused 'match' condition" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the conditions in &lt;code&gt;match&lt;/code&gt; expressions that will never be matched.
&lt;p&gt;
  Similarly to PHP Engine behavior, the inspection uses strict comparison (&lt;code&gt;===&lt;/code&gt;) to check the types in &lt;code&gt;match&lt;/code&gt; conditions against the &lt;code&gt;match&lt;/code&gt; argument type, regardless of the &lt;code&gt;strict_types&lt;/code&gt; directive. Since no type coercion occurs, some conditions may be non-matched due to non-matching types.
&lt;/p&gt;
&lt;p&gt;
  See &lt;a href="https://wiki.php.net/rfc/match_expression_v2"&gt;Match expression (php.net)&lt;/a&gt; for details.
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpInvalidStringOffsetUsageInspection" defaultSeverity="ERROR" displayName="Invalid string offset usage" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports invalid string offset usages that will result in a runtime error.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  The following usages are reported:
&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Using string offsets as objects or arrays&lt;/li&gt;
  &lt;li&gt;Unsetting string offsets via &lt;code&gt;unset&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Passing string offsets by reference&lt;/li&gt;
  &lt;li&gt;Creating references to or from string offsets&lt;/li&gt;
  &lt;li&gt;Incrementing or decrementing string offsets&lt;/li&gt;
  &lt;li&gt;Using combined operator assignments such as &lt;code&gt;+=&lt;/code&gt; or &lt;code&gt;.=&lt;/code&gt; on string offsets&lt;/li&gt;
  &lt;li&gt;Assigning string offsets with empty strings or strings with length &gt;1&lt;/li&gt;
&lt;/ul&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpUnusedSwitchBranchInspection" defaultSeverity="WEAK WARNING" displayName="Unused 'switch' branch" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the branches in &lt;code&gt;switch&lt;/code&gt; statements that do not belong to the set of enum cases and as a result are never executed.
&lt;p&gt;
  See &lt;a href="https://wiki.php.net/rfc/enumerations"&gt;Enumerations (php.net)&lt;/a&gt; for details.
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpSuspiciousNameCombinationInspection" defaultSeverity="WARNING" displayName="Suspicious names combination" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the assignments and function calls where the name of the variable or parameter probably doesn't match the name of the assigned or passed value.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  The following sets of names are supported:
&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;needle&lt;/code&gt;, &lt;code&gt;haystack&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;x&lt;/code&gt;, &lt;code&gt;y&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;top&lt;/code&gt;, &lt;code&gt;bottom&lt;/code&gt;, &lt;code&gt;left&lt;/code&gt;, &lt;code&gt;right&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;year&lt;/code&gt;, &lt;code&gt;month&lt;/code&gt;, &lt;code&gt;week&lt;/code&gt;, &lt;code&gt;day&lt;/code&gt;, &lt;code&gt;hour&lt;/code&gt;, &lt;code&gt;minute&lt;/code&gt;, &lt;code&gt;second&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpDuplicateSwitchCaseBodyInspection" defaultSeverity="WEAK WARNING" displayName="Duplicate branch in switch statement" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the &lt;code&gt;switch&lt;/code&gt; statements containing the same code in different branches.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpForeachNestedOuterKeyValueVariablesConflictInspection" defaultSeverity="WARNING" displayName="Nested vs outer 'foreach' variables conflict" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the variables that are used as a key or value both by the inner and outer &lt;code&gt;foreach&lt;/code&gt; loops. In most cases, this is an error or may result in an error in the future.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpStrictComparisonWithOperandsOfDifferentTypesInspection" defaultSeverity="WEAK WARNING" displayName="Strict comparison of operands with incompatible types" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the &lt;code&gt;===&lt;/code&gt; or &lt;code&gt;!==&lt;/code&gt; strict comparisons used on operands with incompatible types.
&lt;p&gt;
  See &lt;a href="https://www.php.net/manual/en/types.comparisons.php"&gt;PHP type comparison tables (php.net)&lt;/a&gt; for details.
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpForeachArrayIsUsedAsValueInspection" defaultSeverity="WARNING" displayName="Foreach array is used as value" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
  Reports the variables that are used in a &lt;code&gt;foreach&lt;/code&gt; loop as both an array expression and an array's key or value (for example,  &lt;code&gt;foreach ($items as $items) {}&lt;/code&gt;).
&lt;p&gt;
  Commonly, this is the result of a typing error.
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="PhpRandArgumentsInReverseOrderInspection" defaultSeverity="ERROR" displayName="Misordered 'rand' function arguments" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the &lt;code&gt;rand($min, $max)&lt;/code&gt; family function calls in which the &lt;code&gt;max&lt;/code&gt; argument is less than &lt;code&gt;min&lt;/code&gt;. For such functions as &lt;code&gt;mt_rand&lt;/code&gt; and &lt;code&gt;random_int&lt;/code&gt;, this will result in a fatal error.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpDuplicatedCharacterInStrFunctionCallInspection" defaultSeverity="WARNING" displayName="Duplicate character in function call" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports duplicate characters provided in the &lt;code&gt;characters&lt;/code&gt; argument of functions like &lt;code&gt;ltrim&lt;/code&gt; or &lt;code&gt;str_words_counts&lt;/code&gt;. Such duplicates are most probably a mistake and can be safely removed.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpDuplicateCaseInspection" defaultSeverity="WARNING" displayName="Duplicate case in switch statement" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
  Reports duplicate &lt;code&gt;case&lt;/code&gt; expressions in &lt;code&gt;switch&lt;/code&gt; statements.
  &lt;p&gt;If a &lt;code&gt;switch&lt;/code&gt; statement contains multiple duplicate &lt;code&gt;case&lt;/code&gt; expressions, only the first one is executed.&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpVarExportUsedWithoutReturnArgumentInspection" defaultSeverity="WEAK WARNING" displayName="'var_export' or 'print_r' call is used without 'return' argument" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;code&gt;var_export()&lt;/code&gt; and &lt;code&gt;print_r()&lt;/code&gt; calls without the &lt;code&gt;return&lt;/code&gt; argument when their results
are explicitly used.
Such calls most probably are a mistake, because &lt;code&gt;var_export&lt;/code&gt;/&lt;code&gt;print_r&lt;/code&gt; always returns
&lt;code&gt;null&lt;/code&gt;/&lt;code&gt;true&lt;/code&gt; if no &lt;code&gt;argument&lt;/code&gt; is specified.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpDuplicateMatchArmBodyInspection" defaultSeverity="WEAK WARNING" displayName="Duplicate arm in 'match' expression" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports duplicate bodies in &lt;code&gt;match&lt;/code&gt; arms.
&lt;p&gt;
  See &lt;a href="https://wiki.php.net/rfc/match_expression_v2"&gt;Match expression (php.net)&lt;/a&gt; for details.
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpFormatFunctionParametersMismatchInspection" defaultSeverity="WARNING" displayName="Format function parameters mismatch" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
  Reports the arguments of a format function (such as &lt;code&gt;printf&lt;/code&gt; or &lt;code&gt;sprintf&lt;/code&gt;) that are not mapped to any parameters or specification conversions.
&lt;p&gt;
  See &lt;a href="https://www.php.net/manual/en/function.printf.php"&gt;printf (php.net)&lt;/a&gt; and &lt;a href="https://www.php.net/manual/en/function.sprintf.php"&gt;sprintf (php.net)&lt;/a&gt; for details.
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpGotoIntoLoopInspection" defaultSeverity="ERROR" displayName="Goto into loop statement" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the &lt;code&gt;goto&lt;/code&gt; labels that are located inside loops or &lt;code&gt;switch&lt;/code&gt; statements.
&lt;p&gt;
  See &lt;a href="https://www.php.net/manual/en/control-structures.goto.php"&gt;goto (php.net)&lt;/a&gt; for details.
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="PhpExpressionResultUnusedInspection" defaultSeverity="WARNING" displayName="Expression result unused" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
  Reports the expressions that are calculated, but the calculation result is not used anywhere.
  &lt;p&gt;Such errors can be caused, for example, by misspelling the &lt;code&gt;=&lt;/code&gt; operator as &lt;code&gt;==&lt;/code&gt;.&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="PhpToStringImplementationInspection" defaultSeverity="WARNING" displayName="Method '__toString' implementation" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
  Reports the attempts to convert the objects having no &lt;code&gt;__toString&lt;/code&gt; method implementation to &lt;code&gt;string&lt;/code&gt;.
&lt;!-- tooltip end --&gt;
  &lt;p&gt;
    Prior to PHP 7.4, this would lead to a fatal &lt;code&gt;E_RECOVERABLE_ERROR&lt;/code&gt; level error. In PHP 7.4, a fatal non-recoverable &lt;code&gt;ERROR&lt;/code&gt; is thrown. In PHP 8.0, the return value follows the standard PHP type semantics and will be coerced into a string if possible and if strict typing is disabled.
  &lt;/p&gt;
  &lt;p&gt;
    If the &lt;b&gt;Check __toString exists for each expression type&lt;/b&gt; option is enabled, the inspection will check all possible types of the expression and
    report if at least one of them doesn't contain the &lt;code&gt;__toString&lt;/code&gt; method implementation.
  &lt;/p&gt;
&lt;p&gt;
  See &lt;a href="https://www.php.net/manual/en/language.oop5.magic.php#language.oop5.magic.tostring"&gt;__toString (php.net)&lt;/a&gt; for details.
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="PhpConstantReassignmentInspection" defaultSeverity="WARNING" displayName="Constant reassignment" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
   Reports reassignments of constants.
   &lt;p&gt;
     Since constants cannot be changed, such assignments will have no effect and will emit an &lt;code&gt;E_NOTICE&lt;/code&gt; (in PHP 7.4 and earlier) or &lt;code&gt;E_WARNING&lt;/code&gt; (in PHP 8.0 and later).
  &lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="PhpMethodMayBeInaccessibleInLateStaticBindingInspection" defaultSeverity="WARNING" displayName="Private method may be inaccessible during late static binding call" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the late static binding method calls (that is, performed via &lt;code&gt;static::&lt;/code&gt;) that may be resolved to inaccessible private methods from child classes.
&lt;p&gt;
  See &lt;a href="https://www.php.net/manual/en/language.oop5.late-static-bindings.php"&gt;Late Static Bindings (php.net)&lt;/a&gt; for details.
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpMissingParentCallMagicInspection" defaultSeverity="WEAK WARNING" displayName="Missing parent call for magic methods" enabled="false" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
  Reports the magic methods that do not call their parent magic method.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpMissingBreakStatementInspection" defaultSeverity="WEAK WARNING" displayName="Missing 'break' statement" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
  Reports the &lt;code&gt;case&lt;/code&gt; clauses in &lt;code&gt;switch&lt;/code&gt; statements that do not end with a &lt;code&gt;break&lt;/code&gt; or a &lt;code&gt;return&lt;/code&gt; statement.
  &lt;!-- tooltip end --&gt;
  &lt;p&gt;
    If a &lt;code&gt;case&lt;/code&gt; clause does not end with &lt;code&gt;break&lt;/code&gt; or &lt;code&gt;return&lt;/code&gt;, its execution can unintentionally fall through the next case.
  &lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpSwitchCaseWithoutDefaultBranchInspection" defaultSeverity="INFORMATION" displayName="Switch statement without default branch" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the &lt;code&gt;switch&lt;/code&gt; statements without a default branch.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpWrongStringConcatenationInspection" defaultSeverity="WARNING" displayName="Wrong string concatenation" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
  Reports the attempts to concatenate strings by using the &lt;code&gt;+&lt;/code&gt; operator instead of the dot (&lt;code&gt;.&lt;/code&gt;) concatenation operator. Such attempts are most likely a programming mistake.
&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="PhpRedeclarationStdlibFunctionInspection" defaultSeverity="ERROR" displayName="Redeclaration of standard library function" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
  Reports the redeclaration of standard library functions.
  Functions from the standard library cannot be redeclared in user code.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpPassByRefInspection" defaultSeverity="ERROR" displayName="Pass parameter by reference" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
  Reports the arguments in a function/method call that cannot be passed by reference.
  &lt;p&gt;
    Only variables and references returned from functions can be passed by reference. See &lt;a href="https://www.php.net/manual/en/language.references.pass.php#language.references.pass"&gt;Passing by Reference (php.net)&lt;/a&gt; for details.
  &lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="PhpDivisionByZeroInspection" defaultSeverity="ERROR" displayName="Division by zero" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
      Reports division by zero or modulo by zero.
&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="PhpFieldReferenceDoesNotMatchObjectShapeInspection" defaultSeverity="WEAK WARNING" displayName="Field reference does not match object shape " enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports reference to a property whose name does not match the name specified via an &lt;code&gt;#[ObjectShape]&lt;/code&gt; attribute or in the PHPDoc comment.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpSillyAssignmentInspection" defaultSeverity="WARNING" displayName="Redundant assignment" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
  Reports the assignment statements, in which both sides are equal. Such assignments have no effect and can be removed.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpConcatenationWithArithmeticInspection" defaultSeverity="WARNING" displayName="Concatenation with arithmetic usage" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the string concatenation expressions that are used together with &lt;code&gt;+&lt;/code&gt;, &lt;code&gt;-&lt;/code&gt;, &lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt;, and &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt; operators.

Starting with PHP 8, the concatenation operation has lower precedence and such expressions can thus produce unexpected results.
&lt;p&gt;
  See &lt;a href="https://wiki.php.net/rfc/concatenation_precedence"&gt;Concatenation precedence (php.net)&lt;/a&gt; for details.
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Unused symbols" path="JavaScript and TypeScript"><inspection shortName="JSUnusedAssignment" defaultSeverity="WARNING" displayName="Unused assignment" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a variable whose value is never used after assignment.&lt;br&gt;
Suggests removing the unused variable to shorten the code and to avoid redundant allocations.
&lt;p&gt;The following cases are reported:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;A variable is never read after assignment.&lt;/li&gt;
  &lt;li&gt;The value of a variable is always overwritten with another assignment before the variable is read next time.&lt;/li&gt;
  &lt;li&gt;The initializer of a variable is redundant (for one of the above-mentioned reasons).&lt;/li&gt;
&lt;/ul&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JSUnusedLocalSymbols" defaultSeverity="WARNING" displayName="Unused local symbol" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an unused locally accessible parameter, local variable, function, class, or private member declaration.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JSUnusedGlobalSymbols" defaultSeverity="WARNING" displayName="Unused global symbol" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an unused globally accessible public function, variable, class, or property.
&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="MySQL" path=""><inspection shortName="MysqlParsingInspection" defaultSeverity="WARNING" displayName="Unsupported syntax in pre-8.0 versions" enabled="true" language="MySQL based" pluginId="com.intellij.database" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports invalid usages of UNION in queries.
&lt;p&gt;The inspection works in MySQL versions that are earlier than 8.0.&lt;/p&gt;
&lt;p&gt;Example (MySQL):&lt;/p&gt;
&lt;pre&gt;&lt;code lang="mysql"&gt;
SELECT * FROM (SELECT 1 UNION (SELECT 1 UNION SELECT 2)) a;
&lt;/code&gt;&lt;/pre&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="MysqlLoadDataPathInspection" defaultSeverity="WARNING" displayName="LOAD statement path" enabled="true" language="MySQL based" pluginId="com.intellij.database" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports paths that start with the tilde character in LOAD statements.
&lt;p&gt;Example (MySQL):&lt;/p&gt;
&lt;pre&gt;&lt;code lang="mysql"&gt;CREATE TABLE table_name (id int);
LOAD DATA LOCAL INFILE '~/Documents/some_file.txt'
INTO TABLE table_name FIELDS TERMINATED BY ',' LINES TERMINATED BY '\n'
IGNORE 1 LINES;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Instead of the tilde character, use a full path to the file.&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="MysqlSpaceAfterFunctionNameInspection" defaultSeverity="ERROR" displayName="Whitespace between the function name and the open parenthesis" enabled="true" language="MySQL" pluginId="com.intellij.database" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports any whitespace in a function call between the function name and the open parenthesis, which is not supported by default.
&lt;p&gt;Example (MySQL):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;SELECT MAX (qty) FROM orders;&lt;/code&gt;&lt;/pre&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Blade files" path=""><inspection shortName="BladeUnpairedParenthesesInStringLiteral" defaultSeverity="ERROR" displayName="Parse error due to unpaired parentheses in string literals" enabled="true" language="PHP" pluginId="com.jetbrains.php.blade" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the unpaired parentheses in string literals that produce blade parser errors.

&lt;p&gt;
  See &lt;a href="https://github.com/laravel/framework/issues/18317"&gt;laravel issue (github.com)&lt;/a&gt; for details.
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="BladeControlDirectives" defaultSeverity="WARNING" displayName="Control directive missing" enabled="true" language="Blade" pluginId="com.jetbrains.php.blade" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
  Reports the Blade control directives that are not closed with the corresponding &lt;code&gt;@end...&lt;/code&gt; directives.
  &lt;p&gt;
    See &lt;a href="https://laravel.com/docs/blade#blade-directives"&gt;Blade directives (laravel.com)&lt;/a&gt; for details.
  &lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection></group><group name="ES2015 migration aids" path="JavaScript and TypeScript"><inspection shortName="ES6ConvertToForOf" defaultSeverity="INFORMATION" displayName="'for..in' is used instead of 'for..of'" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a usage of a &lt;code&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...in"&gt;for..in&lt;/a&gt;&lt;/code&gt;
loop on an array. Suggests replacing it with a &lt;code&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of"&gt;for..of&lt;/a&gt;&lt;/code&gt; loop.
&lt;br/&gt;&lt;code&gt;for..of&lt;/code&gt; loops, which are introduced in ECMAScript 6, iterate over &lt;code&gt;iterable&lt;/code&gt; objects.
For arrays, this structure is preferable to &lt;code&gt;for..in&lt;/code&gt;, because it works only with array values but not with array object's properties.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ES6ConvertRequireIntoImport" defaultSeverity="INFORMATION" displayName="'require()' is used instead of 'import'" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a &lt;code&gt;require()&lt;/code&gt; statement. Suggests converting  it to a &lt;code&gt;require()&lt;/code&gt; call with an &lt;code&gt;import&lt;/code&gt; statement.
&lt;br/&gt;&lt;br/&gt;
Enable 'Convert require() inside inner scopes with Fix all action'
to convert all &lt;code&gt;require()&lt;/code&gt; calls inside the nested functions and statements when using the 'Fix all' action.
&lt;br/&gt;&lt;br/&gt;
Please note that converting &lt;code&gt;require()&lt;/code&gt; statements inside inner scopes to &lt;code&gt;import&lt;/code&gt; statements
may cause changes in the semantics of the code.
Import statements are static module dependencies and are hoisted,
which means that they are moved to the top of the current module. &lt;code&gt;require()&lt;/code&gt; calls load modules dynamically.
They can be executed conditionally, and their scope is defined by the expression in which they are used.
&lt;br/&gt;Clear the 'Convert require() inside inner scopes with Fix all action' checkbox to prevent any changes in these complex cases when using the 'Fix all' action.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ES6ConvertLetToConst" defaultSeverity="INFORMATION" displayName="'let' is used instead of 'const'" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a &lt;code&gt;let&lt;/code&gt; declaration that can be made &lt;code&gt;const&lt;/code&gt;.&lt;br/&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ES6ConvertVarToLetConst" defaultSeverity="WEAK WARNING" displayName="'var' is used instead of 'let' or 'const'" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a &lt;code&gt;var&lt;/code&gt; declaration that is used instead of &lt;code&gt;let&lt;/code&gt; or &lt;code&gt;const&lt;/code&gt;.&lt;br/&gt;
Both &lt;code&gt;let&lt;/code&gt; and &lt;code&gt;const&lt;/code&gt; are block-scoped and behave more strictly.
&lt;br/&gt;&lt;br/&gt;
Suggests replacing all &lt;code&gt;var&lt;/code&gt; declarations with &lt;code&gt;let&lt;/code&gt; or &lt;code&gt;const&lt;/code&gt; declarations, depending on the semantics of a particular  value.
The declarations may be moved to the top of the function or placed before the first usage of the variable to avoid Reference errors.
&lt;br/&gt;Select the 'Conservatively convert var with Fix all action' option to prevent any changes in these complex cases when using the 'Fix all' action.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ES6ConvertIndexedForToForOf" defaultSeverity="INFORMATION" displayName="Indexed 'for' is used instead of 'for..of'" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an indexed &lt;code&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for"&gt;for&lt;/a&gt;&lt;/code&gt;
loop used on an array. Suggests replacing it with a &lt;code&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of"&gt;for..of&lt;/a&gt;&lt;/code&gt; loop.
&lt;br/&gt;&lt;code&gt;for..of&lt;/code&gt; loops are introduced in ECMAScript 6 and iterate over &lt;code&gt;iterable&lt;/code&gt; objects.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JSStringConcatenationToES6Template" defaultSeverity="INFORMATION" displayName="String concatenation is used instead of template literal" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a string concatenation. Suggests replacing it with a  &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals"&gt;template literal&lt;/a&gt;
&lt;p&gt;Example&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; "result: " + a + "." &lt;/code&gt;&lt;/pre&gt;
 &lt;p&gt;After applying the quick-fix the code looks as follows:&lt;/p&gt;
 &lt;pre&gt;&lt;code&gt; `result: ${a}.` &lt;/code&gt;&lt;/pre&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ES6ConvertModuleExportToExport" defaultSeverity="INFORMATION" displayName="'module.exports' is used instead of 'export'" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a &lt;code&gt;module.export&lt;/code&gt; statement. Suggests replacing it with an &lt;code&gt;export&lt;/code&gt; or &lt;code&gt;export default&lt;/code&gt; statement.
&lt;br/&gt;&lt;br/&gt;
Please note that the quick-fix for converting &lt;code&gt;module.export&lt;/code&gt; into &lt;code&gt;export&lt;/code&gt; is not available for &lt;code&gt;module.export&lt;/code&gt; inside functions or statements because &lt;code&gt;export&lt;/code&gt; statements can only be at the top level of a module.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JSFunctionExpressionToArrowFunction" defaultSeverity="INFORMATION" displayName="Function expression is used instead of arrow function" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;Reports a &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/function"&gt;function&lt;/a&gt; expression.
Suggests converting it to an &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions"&gt;arrow function&lt;/a&gt;.
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;arr.map(function(el) {return el + 1})&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After applying the quick-fix the code looks as follows:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;arr.map(el =&gt; el + 1)&lt;/code&gt;&lt;/pre&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Validity issues" path="JavaScript and TypeScript"><inspection shortName="JSOctalInteger" defaultSeverity="ERROR" displayName="Octal integer" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a deprecated octal integer literal prefixed with &lt;code&gt;0&lt;/code&gt; instead of &lt;code&gt;0o&lt;/code&gt;.&lt;br/&gt;
Such literals are not allowed in modern ECMAScript code, and using them in the strict mode is an error.&lt;br/&gt;
To force this inspection for ES5 and ES3 language levels, select the 'Warn about obsolete octal literals in ES5- code' checkbox below.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="FunctionWithInconsistentReturnsJS" defaultSeverity="WARNING" displayName="Function with inconsistent returns" enabled="false" language="JavaScript" pluginId="JavaScript" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a function that returns a value in
some cases while in other cases no value is returned. This usually indicates an error.
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
function foo() {
  if (true)
    return 3;
  return;
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="BadExpressionStatementJS" defaultSeverity="WEAK WARNING" displayName="Expression statement which is not assignment or call" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an expression statement that is neither an assignment nor a call.
Such statements usually indicate an error.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="StringLiteralBreaksHTMLJS" defaultSeverity="WARNING" displayName="String literal which breaks HTML parsing" enabled="false" language="JavaScript" pluginId="JavaScript" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a string literal that contains a &lt;code&gt;&amp;lt;/&lt;/code&gt; sequence.  Such strings
may result in incorrect parsing of any HTML in which the JavaScript code is embedded.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ReservedWordUsedAsNameJS" defaultSeverity="WARNING" displayName="Reserved word used as name" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a JavaScript reserved word used as a name.  The JavaScript specification
reserves a number of words which are currently not used as keywords.  Using those words as identifiers may
result in broken code if later versions of JavaScript start using them as keywords.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ThisExpressionReferencesGlobalObjectJS" defaultSeverity="WARNING" displayName="'this' expression which references the global object" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a &lt;code&gt;this&lt;/code&gt; expression outside an object literal or a constructor body.  Such &lt;code&gt;this&lt;/code&gt;
expressions reference the top-level "global" JavaScript object, 
but are mostly useless.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JSConstantReassignment" defaultSeverity="ERROR" displayName="Attempt to assign to const or readonly variable" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports reassigning a value to a constant or a readonly variable.
&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="RegExp" path=""><inspection shortName="RegExpSuspiciousBackref" defaultSeverity="WARNING" displayName="Suspicious back reference" enabled="true" language="RegExp" pluginId="com.intellij" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports back references that will not be resolvable at runtime.
This means that the back reference can never match anything.
A back reference will not be resolvable when the group is defined after the back reference,
or if the group is defined in a different branch of an alternation.
&lt;p&gt;&lt;b&gt;Example of a group defined after its back reference:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  \1(abc)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;b&gt;Example of a group and a back reference in different branches:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  a(b)c|(xy)\1z
&lt;/code&gt;&lt;/pre&gt;

&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;small&gt;New in 2022.1&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="RegExpRedundantEscape" defaultSeverity="WARNING" displayName="Redundant character escape" enabled="true" language="RegExp" pluginId="com.intellij" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports redundant character escape sequences that can be replaced with unescaped characters preserving the meaning.
Many escape sequences that are necessary outside of a character class are redundant inside square brackets &lt;code&gt;[]&lt;/code&gt; of a character class.
&lt;p&gt;
  Although unescaped opening curly braces &lt;code&gt;{&lt;/code&gt; outside of character classes are allowed in some dialects (JavaScript, Python, and so on),
  it can cause confusion and make the pattern less portable, because there are dialects that require escaping curly braces as characters.
  For this reason the inspection does not report escaped opening curly braces.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  \-\;[\.]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  -;[.]
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
The &lt;b&gt;Ignore escaped closing brackets '}' and ']'&lt;/b&gt; option specifies whether to report &lt;code&gt;\}&lt;/code&gt; and &lt;code&gt;\]&lt;/code&gt; outside of a character class
when they are allowed to be unescaped by the RegExp dialect.
&lt;p&gt;&lt;small&gt;New in 2017.3&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="CustomRegExpInspection" defaultSeverity="WARNING" displayName="Custom RegExp inspection" enabled="true" language="" pluginId="com.intellij" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Custom Regex Inspection
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="RegExpRedundantNestedCharacterClass" defaultSeverity="WARNING" displayName="Redundant nested character class" enabled="true" language="RegExp" pluginId="com.intellij" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports unnecessary nested character classes.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  [a-c[x-z]]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  [a-cx-z]
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;small&gt;New in 2020.2&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="RegExpDuplicateCharacterInClass" defaultSeverity="WARNING" displayName="Duplicate character in character class" enabled="true" language="RegExp" pluginId="com.intellij" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports duplicate characters inside a RegExp character class.
Duplicate characters are unnecessary and can be removed without changing the semantics of the regex.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  [aabc]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  [abc]
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="RegExpRedundantClassElement" defaultSeverity="WEAK WARNING" displayName="Redundant '\d', '[:digit:]', or '\D' class elements" enabled="true" language="RegExp" pluginId="com.intellij" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports redundant &lt;code&gt;\d&lt;/code&gt; or &lt;code&gt;[:digit:]&lt;/code&gt; that are used in one class with &lt;code&gt;\w&lt;/code&gt; or &lt;code&gt;[:word:]&lt;/code&gt;
(&lt;code&gt;\D&lt;/code&gt; with &lt;code&gt;\W&lt;/code&gt;) and can be removed.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  [\w\d]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  [\w]
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;small&gt;New in 2022.2&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="RegExpSimplifiable" defaultSeverity="WEAK WARNING" displayName="Regular expression can be simplified" enabled="true" language="RegExp" pluginId="com.intellij" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports regular expressions that can be simplified.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  [a] xx* [ah-hz]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  a x+ [ahz]
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;small&gt;New in 2022.1&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="RegExpAnonymousGroup" defaultSeverity="WARNING" displayName="Anonymous capturing group or numeric back reference" enabled="false" language="RegExp" pluginId="com.intellij" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports anonymous capturing groups and numeric back references in a RegExp.
These are only reported when the RegExp dialect supports named group and named group references.
Named groups and named back references improve code readability and are recommended to use instead.
When a capture is not needed, matching can be more performant and use less memory by using a non-capturing group,
i.e. &lt;code&gt;(?:xxx)&lt;/code&gt; instead of &lt;code&gt;(xxx)&lt;/code&gt;.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  (\d\d\d\d)\1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A better regex pattern could look like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  (?&amp;lt;quad&gt;\d\d\d\d)\k&amp;lt;quad&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;small&gt;New in 2017.2&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="RegExpRepeatedSpace" defaultSeverity="WARNING" displayName="Consecutive spaces" enabled="true" language="RegExp" pluginId="com.intellij" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports multiple consecutive spaces in a RegExp.
Because spaces are not visible by default, it can be hard to see how many spaces are required.
The RegExp can be made more clear by replacing the consecutive spaces with a single space and a counted quantifier.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  (     )
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  ( {5})
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
&lt;small&gt;New in 2017.1&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="RegExpUnexpectedAnchor" defaultSeverity="WARNING" displayName="Begin or end anchor in unexpected position" enabled="true" language="RegExp" pluginId="com.intellij" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;code&gt;^&lt;/code&gt; or &lt;code&gt;\A&lt;/code&gt; anchors not at the beginning of the pattern and
&lt;code&gt;$&lt;/code&gt;, &lt;code&gt;\Z&lt;/code&gt; or &lt;code&gt;\z&lt;/code&gt; anchors not at the end of the pattern.
In the wrong position these RegExp anchors prevent the pattern from matching anything.
In case of the &lt;code&gt;^&lt;/code&gt; and &lt;code&gt;$&lt;/code&gt; anchors, most likely the literal character was meant and the escape forgotten.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  (Price $10)
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
&lt;small&gt;New in 2018.1&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="RegExpEscapedMetaCharacter" defaultSeverity="INFORMATION" displayName="Escaped meta character" enabled="true" language="RegExp" pluginId="com.intellij" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports escaped meta characters.
Some RegExp coding styles specify that meta characters should be placed inside a character class,
to make the regular expression easier to understand.
This inspection does not warn about the meta character &lt;code&gt;[&lt;/code&gt;, &lt;code&gt;]&lt;/code&gt; and &lt;code&gt;^&lt;/code&gt;,
because those would need additional escaping inside a character class.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  \d+\.\d+
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  \d+[.]\d+
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;small&gt;New in 2017.1&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="RegExpDuplicateAlternationBranch" defaultSeverity="WARNING" displayName="Duplicate branch in alternation" enabled="true" language="RegExp" pluginId="com.intellij" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports duplicate branches in a RegExp alternation.
Duplicate branches slow down matching and obscure the intent of the expression.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  (alpha|bravo|charlie|alpha)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  (alpha|bravo|charlie)
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;small&gt;New in 2017.1&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="RegExpSingleCharAlternation" defaultSeverity="WARNING" displayName="Single character alternation" enabled="true" language="RegExp" pluginId="com.intellij" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports single char alternation in a RegExp.
It is simpler to use a character class instead.
This may also provide better matching performance.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  a|b|c|d
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  [abcd]
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;
&lt;small&gt;New in 2017.1&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="RegExpOctalEscape" defaultSeverity="INFORMATION" displayName="Octal escape" enabled="true" language="RegExp" pluginId="com.intellij" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports octal escapes, which are easily confused with back references.
Use hexadecimal escapes to avoid confusion.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  \07
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  \x07
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;small&gt;New in 2017.1&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="RegExpUnnecessaryNonCapturingGroup" defaultSeverity="WARNING" displayName="Unnecessary non-capturing group" enabled="true" language="RegExp" pluginId="com.intellij" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports unnecessary non-capturing groups, which have no influence on the match result.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  Everybody be cool, (?:this) is a robbery!
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  Everybody be cool, this is a robbery!
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;small&gt;New in 2021.1&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="RegExpEmptyAlternationBranch" defaultSeverity="WARNING" displayName="Empty branch in alternation" enabled="true" language="RegExp" pluginId="com.intellij" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports empty branches in a RegExp alternation.
An empty branch will only match the empty string, and in most cases that is not what is desired.
This inspection will not report a single empty branch at the start or the end of an alternation.
&lt;p&gt;&lt;b&gt;Example:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  (alpha||bravo)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the quick-fix is applied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  (alpha|bravo)
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;small&gt;New in 2017.2&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Switch statement issues" path="JavaScript and TypeScript"><inspection shortName="DefaultNotLastCaseInSwitchJS" defaultSeverity="WARNING" displayName="'default' not last case in 'switch'" enabled="false" language="JavaScript" pluginId="JavaScript" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a &lt;code&gt;switch&lt;/code&gt; statement where the &lt;code&gt;default&lt;/code&gt; case
comes before another case instead of being the very last case, which may cause confusion.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="NestedSwitchStatementJS" defaultSeverity="WARNING" displayName="Nested 'switch' statement" enabled="false" language="JavaScript" pluginId="JavaScript" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a &lt;code&gt;switch&lt;/code&gt; statement that is
nested in another &lt;code&gt;switch&lt;/code&gt; statement.  Nested &lt;code&gt;switch&lt;/code&gt; statements may be
very confusing, particularly if indenting is inconsistent.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JSSwitchVariableDeclarationIssue" defaultSeverity="WARNING" displayName="Variable is declared and being used in different 'case' clauses" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a variable that is declared in one &lt;code&gt;case&lt;/code&gt; clause of a &lt;code&gt;switch&lt;/code&gt; statement but is used in another &lt;code&gt;case&lt;/code&gt;
clause of the same statement.
For block-scoped variables, this results in throwing a &lt;code&gt;ReferenceError&lt;/code&gt;.
For &lt;code&gt;var&lt;/code&gt; variables, it indicates a potential error. &lt;p&gt;Disable the inspection for &lt;code&gt;var&lt;/code&gt; variables if this pattern is used intentionally.&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="FallThroughInSwitchStatementJS" defaultSeverity="WARNING" displayName="Fallthrough in 'switch' statement" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a &lt;code&gt;switch&lt;/code&gt; statement where control can proceed from a branch to the next one.  Such "fall-through" often
indicates an error, for example, a missing &lt;code&gt;break&lt;/code&gt; or &lt;code&gt;return&lt;/code&gt;.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JSMissingSwitchDefault" defaultSeverity="INFORMATION" displayName="'switch' statement has no 'default' branch" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a &lt;code&gt;switch&lt;/code&gt; statement without a &lt;code&gt;default&lt;/code&gt; clause when some possible values are not enumerated.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JSUnreachableSwitchBranches" defaultSeverity="WARNING" displayName="Unreachable 'case' branch of a 'switch' statement" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an unreachable &lt;code&gt;case&lt;/code&gt; branch of a &lt;code&gt;switch&lt;/code&gt; statement. &lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
/**
 * @param {('foo' | 'bar')} p
 */
function foo(p) {
    switch (p) {
        case 'foo': break;
        case 'bar': break;
        case 'baz': break; // unreachable
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JSRedundantSwitchStatement" defaultSeverity="INFORMATION" displayName="'switch' statement is redundant and can be replaced" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a &lt;code&gt;switch&lt;/code&gt; statement with an empty body, or with only one &lt;code&gt;case&lt;/code&gt; branch, or with a &lt;code&gt;default&lt;/code&gt; branch only.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="TextLabelInSwitchStatementJS" defaultSeverity="WARNING" displayName="Text label in 'switch' statement" enabled="false" language="JavaScript" pluginId="JavaScript" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a labeled statement inside a &lt;code&gt;switch&lt;/code&gt; statement, which 
often results from a typo.
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
    &lt;b&gt;switch&lt;/b&gt;(x)
    {
        &lt;b&gt;case&lt;/b&gt; 1:
        case2:   //typo!
        &lt;b&gt;case&lt;/b&gt; 3:
            &lt;b&gt;break&lt;/b&gt;;
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JSDuplicateCaseLabel" defaultSeverity="WARNING" displayName="Duplicate 'case' label" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a duplicated &lt;code&gt;case&lt;/code&gt; label on a &lt;code&gt;switch&lt;/code&gt; statement, which normally indicates an error.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JSMissingSwitchBranches" defaultSeverity="INFORMATION" displayName="'switch' statement has missing branches" enabled="true" language="JavaScript" pluginId="JavaScript" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a &lt;code&gt;switch&lt;/code&gt; statement on a variable of the type &lt;code&gt;enum&lt;/code&gt; or &lt;code&gt;union&lt;/code&gt; when the statement doesn't cover some value options from the type.
&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Performance" path="PHP/Php Inspections (EA Extended)"><inspection shortName="NotOptimalRegularExpressionsInspection" defaultSeverity="WARNING" displayName="Non-optimal regular expression" enabled="true" language="PHP" pluginId="com.kalessil.phpStorm.phpInspectionsEA" pluginVersion="5.0.0.0" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Documentation can be found &lt;a href="https://github.com/kalessil/phpinspectionsea/blob/master/docs/performance.md#non-optimal-regular-expression"&gt;here&lt;/a&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="AlterInForeachInspection" defaultSeverity="WARNING" displayName="Foreach variables reference usage correctness" enabled="true" language="PHP" pluginId="com.kalessil.phpStorm.phpInspectionsEA" pluginVersion="5.0.0.0" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Documentation can be found &lt;a href="https://github.com/kalessil/phpinspectionsea/blob/master/docs/performance.md#foreach-variables-reference-usage-correctness"&gt;here&lt;/a&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="SubStrUsedAsArrayAccessInspection" defaultSeverity="WARNING" displayName="'substr(...)' used as index-based access" enabled="true" language="PHP" pluginId="com.kalessil.phpStorm.phpInspectionsEA" pluginVersion="5.0.0.0" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
A 'substr()' call can behave as array access, but hiding some error-handling logic behind as well.
Using array access is a preferred way, because you have to implicitly write (read as document) errors handling code.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="VariableFunctionsUsageInspection" defaultSeverity="WEAK WARNING" displayName="Variable functions usage" enabled="true" language="PHP" pluginId="com.kalessil.phpStorm.phpInspectionsEA" pluginVersion="5.0.0.0" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Some of call_user_func()/call_user_func_array() might have semantic of variable function call.
Using variable function instead is a micro-optimization.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="SubStrShortHandUsageInspection" defaultSeverity="WARNING" displayName="'substr(...)' short-hand usage" enabled="true" language="PHP" pluginId="com.kalessil.phpStorm.phpInspectionsEA" pluginVersion="5.0.0.0" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Points out tweaks related to 'substr(...)' usage.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="CascadeStringReplacementInspection" defaultSeverity="WARNING" displayName="Cascading 'str_replace(...)' calls" enabled="true" language="PHP" pluginId="com.kalessil.phpStorm.phpInspectionsEA" pluginVersion="5.0.0.0" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Analyzes str_replace(...) calls and reports when the function has been applied to a variable sequentially.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="SlowArrayOperationsInLoopInspection" defaultSeverity="ERROR" displayName="Slow array function used in loop" enabled="true" language="PHP" pluginId="com.kalessil.phpStorm.phpInspectionsEA" pluginVersion="5.0.0.0" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Documentation can be found &lt;a href="https://github.com/kalessil/phpinspectionsea/blob/master/docs/performance.md#slow-array-function-used-in-loop"&gt;here&lt;/a&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PackedHashtableOptimizationInspection" defaultSeverity="WEAK WARNING" displayName="Packed hashtable optimizations" enabled="true" language="PHP" pluginId="com.kalessil.phpStorm.phpInspectionsEA" pluginVersion="5.0.0.0" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Documentation can be found &lt;a href="https://github.com/kalessil/phpinspectionsea/blob/master/docs/performance.md#packed-hashtable-optimizations"&gt;here&lt;/a&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ArrayPushMissUseInspection" defaultSeverity="WARNING" displayName="'array_push(...)' misused" enabled="true" language="PHP" pluginId="com.kalessil.phpStorm.phpInspectionsEA" pluginVersion="5.0.0.0" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports array_push(...) calls behaving as '$array []= ...'.&lt;br /&gt;
' []= ' works faster than invoking functions in PHP.
&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="CaseInsensitiveStringFunctionsMissUseInspection" defaultSeverity="WARNING" displayName="'stristr(...)/stripos(...)/strripos(...)' could be replaced with 'strstr(...)/strpos()/strrpos()'" enabled="true" language="PHP" pluginId="com.kalessil.phpStorm.phpInspectionsEA" pluginVersion="5.0.0.0" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reported cases can be refactored by using case-sensitive functions strstr(...)/strpos() for better performance because
matched patterns does not contain any characters.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="StrtotimeUsageInspection" defaultSeverity="WARNING" displayName="'strtotime(...)' misused" enabled="true" language="PHP" pluginId="com.kalessil.phpStorm.phpInspectionsEA" pluginVersion="5.0.0.0" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Analyzes 'strtotime()' calls and suggests using 2x faster 'time()' where possible.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="StrStrUsedAsStrPosInspection" defaultSeverity="WARNING" displayName="'str(i)str(...)' could be replaced with 'str(i)pos(...)'" enabled="true" language="PHP" pluginId="com.kalessil.phpStorm.phpInspectionsEA" pluginVersion="5.0.0.0" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports if strstr(...) is being used as strpos(...).
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="UnqualifiedReferenceInspection" defaultSeverity="WEAK WARNING" displayName="Unqualified function/constant reference" enabled="false" language="PHP" pluginId="com.kalessil.phpStorm.phpInspectionsEA" pluginVersion="5.0.0.0" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Using fully-qualified function calls is faster, details and benchmarks &lt;a href="https://github.com/Roave/FunctionFQNReplacer"&gt;are here&lt;/a&gt;.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="FixedTimeStartWithInspection" defaultSeverity="WARNING" displayName="Fixed-time string starts with checks" enabled="false" language="PHP" pluginId="com.kalessil.phpStorm.phpInspectionsEA" pluginVersion="5.0.0.0" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
The inspection checks 'stripos(...)' / 'strpos(...)' calls and reports if 'strncasecmp(...)' / 'strncmp(...)' can be used.
Improves performance when operating on long strings, but gives no performance boost in common cases (if not sure,
keep it disabled please).
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="AmbiguousMethodsCallsInArrayMappingInspection" defaultSeverity="WARNING" displayName="Non-optimized arrays mapping" enabled="true" language="PHP" pluginId="com.kalessil.phpStorm.phpInspectionsEA" pluginVersion="5.0.0.0" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Documentation can be found &lt;a href="https://github.com/kalessil/phpinspectionsea/blob/master/docs/performance.md#non-optimized-arrays-mapping"&gt;here&lt;/a&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="InArrayMissUseInspection" defaultSeverity="WARNING" displayName="'in_array(...)' misused" enabled="true" language="PHP" pluginId="com.kalessil.phpStorm.phpInspectionsEA" pluginVersion="5.0.0.0" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports misused in_array(...) calls.
&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="JSONPath" path=""><inspection shortName="JsonPathEvaluateUnknownKey" defaultSeverity="WARNING" displayName="Unknown property key used for JSONPath evaluate expression" enabled="true" language="JSONPath" pluginId="com.intellij.jsonpath" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a key in a JSONPath expression that is missing in the source JSON document to evaluate.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JsonPathUnknownOperator" defaultSeverity="WARNING" displayName="Unknown JSONPath operator" enabled="true" language="JSONPath" pluginId="com.intellij.jsonpath" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an unknown operator on a JSONPath expression instead of one of the standard ones: 
&lt;code&gt;in&lt;/code&gt;, &lt;code&gt;nin&lt;/code&gt;, &lt;code&gt;subsetof&lt;/code&gt;, &lt;code&gt;anyof&lt;/code&gt;, &lt;code&gt;noneof&lt;/code&gt;, &lt;code&gt;size&lt;/code&gt;, &lt;code&gt;empty&lt;/code&gt;, &lt;code&gt;contains&lt;/code&gt;.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="JsonPathUnknownFunction" defaultSeverity="WARNING" displayName="Unknown JSONPath function" enabled="true" language="JSONPath" pluginId="com.intellij.jsonpath" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an unknown name in a JSONPath function call instead of known standard function names:
&lt;code&gt;concat&lt;/code&gt;, &lt;code&gt;keys&lt;/code&gt;, &lt;code&gt;length&lt;/code&gt;, &lt;code&gt;min&lt;/code&gt;, &lt;code&gt;max&lt;/code&gt;, &lt;code&gt;avg&lt;/code&gt;, &lt;code&gt;stddev&lt;/code&gt;, &lt;code&gt;sum&lt;/code&gt;.
&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="OpenAPI specifications" path=""><inspection shortName="SwJsonMaybeSpecificationInspection" defaultSeverity="WARNING" displayName="Possible OpenAPI/Swagger specification candidate" enabled="true" language="JSON" pluginId="com.intellij.swagger" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Detects JSON files that can be interpreted as a part of OpenAPI/Swagger specification.
&lt;p&gt;
  Such files do not contain explicit specification attributes, but they are referenced from primary specification files located nearby.
&lt;/p&gt;
&lt;!-- tooltip end --&gt;

&lt;p&gt;
  The following example contains two files located in the same directory. First one is a plain primary specification file.
  Second is referenced from the first one and thus is suggested to be considered a specification too.
&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Primary specification file &lt;code&gt;openapi.yaml&lt;/code&gt;:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code lang="yaml"&gt;
openapi: 3.1.0
components:
  schemas:
    CustomSchema:
      description: Custom schema object
      properties:
        foo:
          $ref: 'common.components.json#/components/schemas/CommonSchema'
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;b&gt;Specification file candidate &lt;code&gt;common.components.json&lt;/code&gt;:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code lang="json"&gt;
{
  "components": { // 'Mark file as OpenAPI specification' highlighting
    "schemas": {
      "CommonSchema": {
        "description": "Common schema object reused in several specifications"
      }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="SwYamlUnresolvedReferencesInspection" defaultSeverity="ERROR" displayName="Unresolved reference" enabled="true" language="yaml" pluginId="com.intellij.swagger" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Detects unresolved references in Yaml specification files.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="SwYamlMaybeSpecificationInspection" defaultSeverity="WARNING" displayName="Possible OpenAPI/Swagger specification candidate" enabled="true" language="yaml" pluginId="com.intellij.swagger" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Detects YAML files that can be interpreted as a part of OpenAPI/Swagger specification.
&lt;p&gt;
  Such files do not contain explicit specification attributes, but they are referenced from primary specification files located nearby.
&lt;/p&gt;
&lt;!-- tooltip end --&gt;

&lt;p&gt;
  The following example contains two files located in the same directory. First one is a plain primary specification file.
  Second is referenced from the first one and thus is suggested to be considered a specification too.
&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Primary specification file &lt;code&gt;openapi.yaml&lt;/code&gt;:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
openapi: 3.1.0
components:
  schemas:
    CustomSchema:
      description: Custom schema object
      properties:
        foo:
          $ref: 'common.components.yaml#/components/schemas/CommonSchema'
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;b&gt;Specification file candidate &lt;code&gt;common.components.yaml&lt;/code&gt;:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
components: # 'Mark file as OpenAPI specification' highlighting
  schemas:
    CommonSchema:
      description: Common schema object reused in several specifications
&lt;/code&gt;&lt;/pre&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="SwJsonUnresolvedReferencesInspection" defaultSeverity="ERROR" displayName="Unresolved reference" enabled="true" language="JSON" pluginId="com.intellij.swagger" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Detects unresolved references in JSON specification files.
&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Error handling" path="PHP"><inspection shortName="PhpRedundantCatchClauseInspection" defaultSeverity="WEAK WARNING" displayName="Redundant catch clause" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the &lt;code&gt;catch&lt;/code&gt; clauses with exceptions that are never thrown from the corresponding &lt;code&gt;try&lt;/code&gt; block.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpUnhandledExceptionInspection" defaultSeverity="WEAK WARNING" displayName="Unhandled exception" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the exceptions that are neither enclosed in a &lt;code&gt;try-catch&lt;/code&gt; block nor documented via the &lt;code&gt;@throws&lt;/code&gt; tag.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="PhpWrongCatchClausesOrderInspection" defaultSeverity="WARNING" displayName="Wrong catch clauses order" enabled="true" language="PHP" pluginId="com.jetbrains.php" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the exceptions that are already caught by a preceding exception and the exceptions that are caught twice.
&lt;p&gt;
  The &lt;code&gt;catch&lt;/code&gt; clauses must be ordered from more specific to more generic ones. Otherwise, some exceptions may not be caught by the most specific handler.
&lt;/p&gt;
&lt;p&gt;
  See &lt;a href="http://www.php.net/manual/en/language.exceptions.php"&gt;Exceptions (php.net)&lt;/a&gt; for details.
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection></group><group name="General" path=""><inspection shortName="Annotator" defaultSeverity="ERROR" displayName="Annotator" enabled="true" pluginId="com.intellij" pluginVersion="233.13135.108" isGlobalTool="true">&lt;html&gt;
&lt;body&gt;
Reports issues essential to this file (e.g., syntax errors) in the result of a batch code inspection run.
These issues are usually always highlighted in the editor and can't be configured, unlike inspections.
These options control the scope of checks performed by this inspection:
&lt;ul&gt;
  &lt;li&gt;Option "&lt;b&gt;Report syntax errors&lt;/b&gt;": report parser-related issues.&lt;/li&gt;
  &lt;li&gt;Option "&lt;b&gt;Report issues from language-specific annotators&lt;/b&gt;": report issues found by annotators configured for the relevant language.
    See &lt;a href="https://plugins.jetbrains.com/docs/intellij/annotator.html"&gt;Custom Language Support: Annotators&lt;/a&gt; for details.&lt;/li&gt;
  &lt;li&gt;Option "&lt;b&gt;Report other highlighting problems&lt;/b&gt;": report issues specific to the language of the current file (e.g., type mismatches or unreported exceptions).
    See &lt;a href="https://plugins.jetbrains.com/docs/intellij/syntax-highlighting-and-error-highlighting.html#semantic-highlighting"&gt;Custom Language Support: Highlighting&lt;/a&gt; for details.&lt;/li&gt;
&lt;/ul&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="EmptyDirectory" defaultSeverity="WARNING" displayName="Empty directory" enabled="false" pluginId="com.intellij" pluginVersion="233.13135.108" isGlobalTool="true">&lt;html&gt;
&lt;body&gt;
Reports empty directories.
&lt;!-- tooltip end --&gt;
&lt;p&gt;Available only from &lt;b&gt;Code | Inspect Code&lt;/b&gt; or
  &lt;b&gt;Code | Analyze Code | Run Inspection by Name&lt;/b&gt; and isn't reported in the editor.&lt;/p&gt;
&lt;p&gt;Use the &lt;b&gt;Only report empty directories located under a source folder&lt;/b&gt; option to have only directories under source
  roots reported.&lt;p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ProblematicWhitespace" defaultSeverity="WARNING" displayName="Problematic whitespace" enabled="false" pluginId="com.intellij" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports the following problems:
&lt;ul&gt;
  &lt;li&gt;Tabs used for indentation when the code style is configured to use only spaces.&lt;/li&gt;
  &lt;li&gt;Spaces used for indentation when the code style is configured to use only tabs.&lt;/li&gt;
  &lt;li&gt;Spaces used for indentation and tabs used for alignment when the code
    style is configured to use smart tabs.&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- tooltip end --&gt;
&lt;p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="ReassignedToPlainText" defaultSeverity="WARNING" displayName="Reassigned to plain text" enabled="true" pluginId="com.intellij" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports files that were explicitly re-assigned to Plain Text File Type.
This association is unnecessary because the platform auto-detects text files by content automatically.

&lt;p&gt;You can dismiss this warning by removing the file type association
in &lt;b&gt;Settings | Editor | File Types | Text&lt;/b&gt;.&lt;/p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="InjectedReferences" defaultSeverity="ERROR" displayName="Injected references" enabled="true" pluginId="org.intellij.intelliLang" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports unresolved references injected by
&lt;a href="https://www.jetbrains.com/help/idea/using-language-injections.html"&gt;Language Injections&lt;/a&gt;.
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code lang="java"&gt;
    @Language("file-reference")
    String fileName = "/home/user/nonexistent.file"; // highlighted if file doesn't exist
&lt;/code&gt;&lt;/pre&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="InconsistentLineSeparators" defaultSeverity="WARNING" displayName="Inconsistent line separators" enabled="false" pluginId="com.intellij" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports files with line separators different from the ones that are specified in the project's settings.
&lt;p&gt;For example, the inspection will be triggered if you set the line separator to &lt;code&gt;\n&lt;/code&gt; in
  &lt;a href="settings://preferences.sourceCode?Line%20separator"&gt;Settings | Editor | Code Style | Line separator&lt;/a&gt;,
  while the file you are editing uses &lt;code&gt;\r\n&lt;/code&gt; as a line separator.&lt;/p&gt;

&lt;p&gt;The inspection also warns you about mixed line separators within a file.&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="DuplicatedCode" defaultSeverity="WEAK WARNING" displayName="Duplicated code fragment" enabled="true" pluginId="com.intellij" pluginVersion="233.13135.108" isGlobalTool="false">Reports duplicated blocks of code from the selected scope: the same file or the entire project.&lt;!-- tooltip end --&gt; &lt;p&gt;The inspection features quick-fixes that help you to set the size of detected duplicates, navigate to repetitive code fragments, and compare them in a tool window.&lt;p&gt;The inspection options allow you to select the scope of the reported duplicated fragments and set the initial size for the duplicated language constructs.</inspection><inspection shortName="TodoComment" defaultSeverity="WARNING" displayName="TODO comment" enabled="false" pluginId="com.intellij" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;b&gt;TODO&lt;/b&gt; comments in your code.
&lt;p&gt;You can configure the format for &lt;b&gt;TODO&lt;/b&gt; comments in &lt;a href="settings://preferences.toDoOptions"&gt;Settings | Editor | TODO&lt;/a&gt;.
&lt;!-- tooltip end --&gt;
&lt;p&gt;Enable the &lt;b&gt;Only warn on TODO comments without any details&lt;/b&gt; option to only warn on empty TODO comments, that
  don't provide any description on the task that should be done. Disable to report all TODO comments.&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="RedundantSuppression" defaultSeverity="WARNING" displayName="Redundant suppression" enabled="true" pluginId="com.intellij" pluginVersion="233.13135.108" isGlobalTool="true">&lt;html&gt;
&lt;body&gt;
Reports usages of the following elements that can be safely removed because the inspection they affect is no longer applicable in this context:
&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;@SuppressWarning&lt;/code&gt; annotation, or&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;// noinspection&lt;/code&gt; line comment, or&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;/** noinspection */&lt;/code&gt; JavaDoc comment&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code lang="java"&gt;
public class C {
 // symbol is already private,
 // but annotation is still around
  @SuppressWarnings({"WeakerAccess"})
  private boolean CONST = true;
  void f() {
    CONST = false;
  }
}
&lt;/code&gt;&lt;/pre&gt;


&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="LongLine" defaultSeverity="WARNING" displayName="Line is longer than allowed by code style" enabled="false" pluginId="com.intellij" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports lines that are longer than the &lt;b&gt;Hard wrap at&lt;/b&gt; parameter specified in
&lt;a href="settings://preferences.sourceCode?Hard%20wrap%20at"&gt;Settings | Editor | Code Style | General&lt;/a&gt;.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="IncorrectFormatting" defaultSeverity="WEAK WARNING" displayName="Incorrect formatting" enabled="false" pluginId="com.intellij" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;
  Reports formatting issues that appear if your code doesn't
  follow your project's code style settings.
&lt;/p&gt;
&lt;p&gt;
  This inspection is not compatible with languages that require
  third-party formatters for code formatting, for example, Go or
  C with CLangFormat enabled.
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection></group><group name="HTTP Client" path=""><inspection shortName="HttpRequestWhitespaceInsideRequestTargetPath" defaultSeverity="WEAK WARNING" displayName="Whitespace in URL" enabled="true" language="HTTP Request" pluginId="com.jetbrains.restClient" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Highlights spaces inside URL path segments. HTTP Client will ignore them. For better composing use Split Lines action.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="HttpRequestContentLengthIsIgnored" defaultSeverity="WARNING" displayName="Redundant 'Content-Length'" enabled="true" language="HTTP Request" pluginId="com.jetbrains.restClient" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an explicitly set &lt;code&gt;Content-Length&lt;/code&gt; header. The header is redundant because HTTP Client uses the actual request body length.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="IncorrectHttpHeaderInspection" defaultSeverity="WARNING" displayName="Incorrect HTTP header" enabled="true" language="HTTP Request" pluginId="com.jetbrains.restClient" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;
  Reports unknown HTTP headers that do not match any &lt;a href="https://www.iana.org/assignments/message-headers/message-headers.xml"&gt;publicly
  known headers&lt;/a&gt;. The quick fix suggests adding the header to the list of custom headers when the &lt;b&gt;Use custom HTTP headers&lt;/b&gt; option
  is enabled. HTTP headers from the list of custom headers will not trigger the inspection.
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="HttpClientUnresolvedAuthId" defaultSeverity="ERROR" displayName="Unresolved Auth identifier" enabled="true" language="HTTP Request" pluginId="com.jetbrains.restClient" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Highlights references to non-existent Auth configurations. Suggests creating a new one in the current environment.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="HttpRequestPlaceholder" defaultSeverity="WARNING" displayName="'$placeholder' in HTTP Request" enabled="true" language="HTTP Request" pluginId="com.jetbrains.restClient" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a &lt;code&gt;$placeholder&lt;/code&gt; inside a request. 
&lt;p&gt;A &lt;code&gt;$placeholder&lt;/code&gt; to be replaced by the user is created automatically when a tool cannot recognize a part of a request. For example, a request mapping &lt;code&gt;/aaaa/*/bbb&lt;/code&gt; will be generated as &lt;code&gt;GET localhost/aaaa/{{$placeholder}}/bbb&lt;/code&gt;.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="HttpClientUnresolvedVariable" defaultSeverity="WARNING" displayName="Unresolved environment variable" enabled="true" language="HTTP Request" pluginId="com.jetbrains.restClient" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;Reports variables undeclared in the current environment HTTP Client.&lt;/p&gt;
&lt;p&gt;
  Executing requests with undeclared variables probably fail.
  Consider adding a variable to the environment or selecting an environment with this variable.
&lt;/p&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;Inspection doesn't report variables in request bodies, because it can be a valid syntax of the body.&lt;/p&gt;
&lt;p&gt;
  Some variables may be not reported as unresolved, because they are declared in response or pre-request handler scripts via
  &lt;code&gt;client.global.set&lt;/code&gt; or &lt;code&gt;request.variables.set&lt;/code&gt; functions call.
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Makefile" path=""><inspection shortName="MakefileUnresolvedPrerequisite" defaultSeverity="WEAK WARNING" displayName="Unresolved prerequisite" enabled="true" language="Makefile" pluginId="name.kropp.intellij.makefile" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports unresolved target prerequisites
&lt;/body&gt;
&lt;/html&gt;</inspection></group><group name="Angular" path=""><inspection shortName="AngularInvalidTemplateReferenceVariable" defaultSeverity="ERROR" displayName="Unbound or ambiguous template reference variable" enabled="true" language="HtmlCompatible" pluginId="AngularJS" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a template reference variable that is not assigned to a directive when using &lt;code&gt;exportAs&lt;/code&gt; or is assigned to multiple
directives.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="AngularRecursiveModuleImportExport" defaultSeverity="ERROR" displayName="Recursive import or export of an Angular module or a standalone component" enabled="true" language="TypeScript" pluginId="AngularJS" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a cyclic dependency between Angular modules or standalone components.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="AngularBindingTypeMismatch" defaultSeverity="ERROR" displayName="Invalid binding type" enabled="true" language="HtmlCompatible" pluginId="AngularJS" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a mismatch between actual and expected directive binding type.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="AngularIncorrectTemplateDefinition" defaultSeverity="ERROR" displayName="Incorrect component template definition" enabled="true" language="TypeScript" pluginId="AngularJS" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a component that  doesn’t have an associated template or uses both &lt;code&gt;template&lt;/code&gt; and &lt;code&gt;templateUrl&lt;/code&gt; properties.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="AngularNgOptimizedImage" defaultSeverity="WEAK WARNING" displayName="Issues with ngSrc usage in img tags" enabled="true" language="HtmlCompatible" pluginId="AngularJS" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports issues related to usage of &lt;code&gt;ngSrc&lt;/code&gt; (&lt;a href="https://angular.io/guide/image-directive"&gt;NgOptimizedDirective&lt;/a&gt;)
on &lt;code&gt;img&lt;/code&gt; tags.
&lt;p&gt;
Following issues are reported:
&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;img&lt;/code&gt; tags, which use &lt;code&gt;src&lt;/code&gt; instead of &lt;code&gt;ngSrc&lt;/code&gt;
  &lt;li&gt;lack of &lt;code&gt;width&lt;/code&gt; and &lt;code&gt;height&lt;/code&gt;, or &lt;code&gt;fill&lt;/code&gt; attributes when &lt;code&gt;ngSrc&lt;/code&gt; is used
  &lt;li&gt;&lt;code&gt;width&lt;/code&gt; or &lt;code&gt;height&lt;/code&gt;, and &lt;code&gt;fill&lt;/code&gt; attributes being present on the same element when &lt;code&gt;ngSrc&lt;/code&gt; is used
&lt;/ul&gt;
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="AngularForBlockNonIterableVar" defaultSeverity="ERROR" displayName="Non-iterable type in @for block" enabled="true" language="Angular2Html" pluginId="AngularJS" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports that the type of variable to iterate over does not have &lt;code&gt;[Symbol.iterator]()&lt;/code&gt; method, which returns an iterator.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="AngularNonEmptyNgContent" defaultSeverity="ERROR" displayName="Content inside &lt;ng-content&gt; tag" enabled="true" language="HtmlCompatible" pluginId="AngularJS" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a text or tag occurrence inside a &lt;code&gt;&amp;lt;ng-content&amp;gt;&lt;/code&gt; tag used for content projection.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="AngularAmbiguousComponentTag" defaultSeverity="ERROR" displayName="Ambiguous component tag" enabled="true" language="HtmlCompatible" pluginId="AngularJS" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a component that is matched on an embedded template element &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt; or multiple components matched
on any other element.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="AngularInvalidImportedOrDeclaredSymbol" defaultSeverity="ERROR" displayName="Invalid imported or declared symbol" enabled="true" language="TypeScript" pluginId="AngularJS" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports any symbol that is declared, imported or exported by an Angular module or standalone component that is not a module, component, directive, or pipe or
can’t be used in the context of the property.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="AngularUndefinedTag" defaultSeverity="ERROR" displayName="Undefined tag" enabled="true" language="HtmlCompatible" pluginId="AngularJS" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a tag defined by a component or directive out of the current scope.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="AngularInvalidI18nAttribute" defaultSeverity="WARNING" displayName="Invalid i18n attribute" enabled="true" language="HtmlCompatible" pluginId="AngularJS" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a problem with a &lt;code&gt;i18n-*&lt;/code&gt; attribute.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="AngularNonStandaloneComponentImports" defaultSeverity="ERROR" displayName="Invalid usage of imports in non-standalone components" enabled="true" language="TypeScript" pluginId="AngularJS" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports usages of imports property in non-standalone component decorators. Imports can be used only in standalone components.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="AngularInvalidEntryComponent" defaultSeverity="ERROR" displayName="Invalid entry component" enabled="true" language="TypeScript" pluginId="AngularJS" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an invalid Angular component specified in the module’s &lt;code&gt;bootstrap&lt;/code&gt; or &lt;code&gt;entryComponents&lt;/code&gt; property.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="AngularInaccessibleSymbol" defaultSeverity="ERROR" displayName="Inaccessible component member or directive input" enabled="true" pluginId="AngularJS" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports access to invisible (private or protected) component member or directive input from an Angular template.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="AngularMissingOrInvalidDeclarationInModule" defaultSeverity="ERROR" displayName="Missing or invalid component, directive or pipe declaration in a module" enabled="true" language="TypeScript" pluginId="AngularJS" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a non-standalone Angular component, directive, or pipe that is not declared in any module or is declared in multiple modules.
&lt;/body&gt;
&lt;/html&gt;
</inspection><inspection shortName="AngularMissingEventHandler" defaultSeverity="ERROR" displayName="Missing event handler" enabled="true" language="HtmlCompatible" pluginId="AngularJS" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a missing event handler statement for an event binding.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="AngularMissingRequiredDirectiveInputBinding" defaultSeverity="ERROR" displayName="Missing required directive input" enabled="true" language="HtmlCompatible" pluginId="AngularJS" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a missing binding for a required directive input.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="AngularInsecureBindingToEvent" defaultSeverity="WARNING" displayName="Insecure binding to event" enabled="true" language="HtmlCompatible" pluginId="AngularJS" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports a binding to an event property or attribute, for example, &lt;code&gt;[onclick]&lt;/code&gt; or &lt;code&gt;[attr.onclick]&lt;/code&gt; instead of
&lt;code&gt;(click)&lt;/code&gt;.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="AngularMultipleStructuralDirectives" defaultSeverity="ERROR" displayName="Multiple structural directives on one element" enabled="true" language="HtmlCompatible" pluginId="AngularJS" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports multiple structural directives (&lt;code&gt;*ngIf&lt;/code&gt;, &lt;code&gt;*ngFor&lt;/code&gt;, etc.) on one element.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="AngularUndefinedBinding" defaultSeverity="ERROR" displayName="Undefined binding" enabled="true" language="HtmlCompatible" pluginId="AngularJS" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an undefined property, event, or structural directive bindings on elements.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="AngularCliAddDependency" defaultSeverity="WARNING" displayName="Angular CLI add dependency" enabled="true" language="JSON" pluginId="AngularJS" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Suggests using the &lt;code&gt;ng add&lt;/code&gt; command to install the dependency.
&lt;p&gt;&lt;code&gt;ng add&lt;/code&gt; will use the package manager to download it and invoke a schematic
  which can update your project with configuration changes, add additional dependencies (e.g. polyfills),
  or scaffold package-specific initialization code.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="AngularInvalidAnimationTriggerAssignment" defaultSeverity="ERROR" displayName="Invalid animation trigger assignment" enabled="true" language="HtmlCompatible" pluginId="AngularJS" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an invalid assignment of an animation trigger. To attach an animation to an element, use
&lt;code&gt;[@triggerName]="expression"&lt;/code&gt; or an attribute without a value &lt;code&gt;@triggerName&lt;/code&gt;.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="AngularInvalidSelector" defaultSeverity="ERROR" displayName="Missing or invalid selector" enabled="true" pluginId="AngularJS" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an invalid &lt;code&gt;selector&lt;/code&gt; property of a component or directive.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="AngularUndefinedModuleExport" defaultSeverity="ERROR" displayName="Undefined export from Angular module" enabled="true" language="TypeScript" pluginId="AngularJS" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports an export of an undeclared or unimported component, directive, or pipes from an Angular module.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="AngularDeferBlockOnTrigger" defaultSeverity="ERROR" displayName="Problems with @defer `on` triggers" enabled="true" language="Angular2Html" pluginId="AngularJS" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports issues with triggers in `on` parameters in `@defer` block.
&lt;/body&gt;
&lt;/html&gt;</inspection><inspection shortName="AngularIncorrectBlockUsage" defaultSeverity="ERROR" displayName="Incorrect usage of Angular block" enabled="true" language="Angular2Html" pluginId="AngularJS" pluginVersion="233.13135.108" isGlobalTool="false">&lt;html&gt;
&lt;body&gt;
Reports problems with Angular blocks.
&lt;/body&gt;
&lt;/html&gt;</inspection></group></inspections>